#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    AST                                                                                                                
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @formulaArgumentList {
  @lstring mVarName
}

#·······················································································································

class @assignmentFormula : @abstractFormula {
  @lstring mFormulaName
  @formulaArgumentList mFormulaArgumentList
  @expression mExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    SYNTAX                                                                                                             
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension kerbdd_syntax {

#·······················································································································

rule <topLevelDeClaration> ?!@ast ioAST {
  $formula$ ?let formulaName
  @formulaArgumentList formulaArgumentList = {}
  $($
  repeat
    $identifier$ ?let varName
    $:$
    $bool$
    formulaArgumentList += !varName
  while
    $,$
  end
  $)$
  $:=$
  <expression> ?let @expression expression
  $;$
  ioAST.mFormulaList += !@assignmentFormula.new {!formulaName !formulaArgumentList !expression}
}

#·······················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    ANALYZE FORMULA                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @varMap {
  @uint mIndex
  insert insertKey error message "the '%K' variable is already declared in %L"
  search searchKey error message "there is no '%K' variable"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @computedFormulaMap {
  @varMap mVarMap
  @uint mBitCount
  @binaryset mValue
  insert insertKey error message "the '%K' formula is already declared in %L"
  search searchKey error message "there is no '%K' formula"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @assignmentFormula analyzeFormula ?!@computedFormulaMap ioComputedFormulaMap {
#--- Build variable map
  @uint bitCount = 0
  @varMap varMap = {}
  for > (idf) in mFormulaArgumentList do
    [!?varMap insertKey !idf !bitCount]
    bitCount ++
  end
#--- Compute expression
  message "Computing $" + mFormulaName + "..."
  @binaryset result = [mExpression computeExpression !varMap]
  message "\n"
#---
  [!?ioComputedFormulaMap insertKey !mFormulaName !varMap !bitCount !result]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
