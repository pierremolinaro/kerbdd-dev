#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    AST                                                                                                                
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @formulaKind {
  case assignment
  case fixedPoint (@binaryset startValue)
}

#·······················································································································

shared class @assignmentFormula : @abstractFormula {
  @lstring mFormulaName
  @domainFieldList mFormulaArgumentList
  @formulaKind mKind
  @expression mExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    SYNTAX                                                                                                             
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension kerbdd_syntax {

#·······················································································································

rule <topLevelDeClaration> ?!@ast ioAST {
  $identifier$ ?let formulaName
  @domainFieldList domainFieldList
  $($
  select
    domainFieldList = {}
  or
    <recordFields> ?domainFieldList
  end
  $)$
  @formulaKind kind
  select
    $:=$
    kind = .assignment
  or
    $+=$
    kind = .fixedPoint {!startValue:.emptyBinarySet}
  or
    $-=$
    kind = .fixedPoint {!startValue:.fullBinarySet}
  end
  <expression> ?let @expression expression
  $;$
  ioAST.mFormulaList += !@assignmentFormula.new {!formulaName !domainFieldList !kind !expression}
}

#·······················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    ANALYZE FORMULA                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @computedFormulaMap {
  @varList mVarList
  @uint mBitCount
  @binaryset mValue
  insert insertKey error message "the '%K' formula is already declared in %L"
  search searchKey error message "there is no '%K' formula"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @assignmentFormula analyzeFormula 
  ?let @string unused inSourceFilePath
  ?let @domainMap inDomainMap
  ?!@computedFormulaMap ioComputedFormulaMap
{
#--- Build variable map
  @uint totalBitCount = 0
  @varList varList = {}
  @varMap varMap = {}
  [self.mFormulaArgumentList analyze !inDomainMap !?varMap !?varList !?totalBitCount]
#--- Compute expression
  switch self.mKind
  case assignment :
    message self.mFormulaName.string + "..."
    let timer = @timer.start
    let result = [self.mExpression computeExpression !inDomainMap !varMap !totalBitCount !ioComputedFormulaMap]
    [!?ioComputedFormulaMap insertKey !self.mFormulaName !varList !totalBitCount !result]
    let @uint64 valueCount = [result valueCount !totalBitCount]
#    let @bigint bigValueCount = [result bigValueCount !totalBitCount]
    let @uint64 nodeCount = [result nodeCount]
    message " "
      + valueCount + " value" + if valueCount > 1L then "s" else "" end
      + ", " + nodeCount + " node" + if nodeCount > 1L then "s" else "" end
      + " (" + timer + ")\n"
  case fixedPoint (@binaryset startValue) :
    message self.mFormulaName.string + "..."
    let timer = @timer.start
    @binaryset result = startValue
    [!?ioComputedFormulaMap insertKey !self.mFormulaName !varList !totalBitCount !result]
    var iterate = true ;
    var iterationCount = 0
    loop (@uint.max) while iterate do
      iterationCount ++
      let r = [self.mExpression computeExpression !inDomainMap !varMap !totalBitCount !ioComputedFormulaMap]
      if result == r then
        iterate = false
      else
        result = r
        [!?ioComputedFormulaMap setMValueForKey !result !self.mFormulaName.string]
      end
    end
    let @uint64 valueCount = [result valueCount !totalBitCount]
#    let @bigint bigValueCount = [result bigValueCount !totalBitCount]
    let @uint64 nodeCount = [result nodeCount]
    message " "
      + iterationCount + " iteration" + if iterationCount > 1 then "s" else "" end
      + ", " + valueCount + " value" + if valueCount > 1L then "s" else "" end
      + ", " + nodeCount + " node" + if nodeCount > 1L then "s" else "" end
      + " (" + timer + ")\n"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
