#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    AST                                                                                                                
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @formulaArgumentList {
  @lstring mVarName
  @luint mBitCount
}

#·······················································································································

class @assignmentFormula : @abstractFormula {
  @lstring mFormulaName
  @formulaArgumentList mFormulaArgumentList
  @expression mExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    SYNTAX                                                                                                             
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension kerbdd_syntax {

#·······················································································································

rule <topLevelDeClaration> ?!@ast ioAST {
  $formula$ ?let formulaName
  @formulaArgumentList formulaArgumentList = {}
  $($
  repeat
    $identifier$ ?let varName
    $:$
    $bool$
    @luint bitCount
    select
      bitCount = @luint.new {!1 !.here}
    or
      $[$
      $integer$ ?bitCount
      $]$
      if bitCount.uint == 0 then
        error bitCount : "size should be > 0"
      end
    end
    formulaArgumentList += !varName !bitCount
  while
    $,$
  end
  $)$
  $:=$
  <expression> ?let @expression expression
  $;$
  ioAST.mFormulaList += !@assignmentFormula.new {!formulaName !formulaArgumentList !expression}
}

#·······················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    ANALYZE FORMULA                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @varMap {
  @uint mIndex
  @uint mBitCount
  insert insertKey error message "the '%K' variable is already declared in %L"
  search searchKey error message "there is no '%K' variable"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @varList {
  @string mVarName
  @uint mBitIndex
  @uint mBitCount
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @computedFormulaMap {
  @varList mVarList
  @uint mBitCount
  @binaryset mValue
  insert insertKey error message "the '%K' formula is already declared in %L"
  search searchKey error message "there is no '%K' formula"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @assignmentFormula analyzeFormula 
  ?let @string unused inSourceFilePath
  ?!@computedFormulaMap ioComputedFormulaMap
{
#--- Build variable map
  @uint totalBitCount = 0
  @varList varList = {}
  @varMap varMap = {}
  for > (idf bitCount) in mFormulaArgumentList do
    [!?varMap insertKey !idf !totalBitCount !bitCount.uint]
    [!?varList insertAtIndex !idf.string !totalBitCount !bitCount.uint !0]
    totalBitCount = totalBitCount + bitCount.uint
  end
#--- Compute expression
  message "Computing $" + mFormulaName + "..."
  let timer = @timer.start
  let result = [mExpression computeExpression !varMap !totalBitCount !ioComputedFormulaMap]
  let @uint64 valueCount = [result valueCount !totalBitCount]
  let @uint64 nodeCount = [result nodeCount]
  message " "
    + valueCount + " value" + if valueCount > 1L then "s" else "" end
    + ", " + nodeCount + " node" + if nodeCount > 1L then "s" else "" end
    + " (" + timer + ")\n"
#---
  [!?ioComputedFormulaMap insertKey !mFormulaName !varList !totalBitCount !result]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
