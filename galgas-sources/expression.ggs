#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    AST                                                                                                                
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract class @expression {
}

#·······················································································································

class @varInExpression : @expression {
  public var @lstring mVarName
}

#·······················································································································

class @varBitInExpression : @expression {
  public var @lstring mVarName
  public var @luint mVarBit
}

#·······················································································································

class @andExpression : @expression {
  public var @expression mLeftExpression
  public var @expression mRightExpression
}

#·······················································································································

class @orExpression : @expression {
  public var @expression mLeftExpression
  public var @expression mRightExpression
}

#·······················································································································

class @xorExpression : @expression {
  public var @expression mLeftExpression
  public var @expression mRightExpression
}

#·······················································································································

class @equalExpression : @expression {
  public var @expression mLeftExpression
  public var @expression mRightExpression
}

#·······················································································································

class @notEqualExpression : @expression {
  public var @expression mLeftExpression
  public var @expression mRightExpression
}

#·······················································································································

class @impliesExpression : @expression {
  public var @expression mLeftExpression
  public var @expression mRightExpression
}

#·······················································································································

class @complementExpression : @expression {
  public var @expression mExpression
}

#·······················································································································

class @trueExpression : @expression {
}

#·······················································································································

class @falseExpression : @expression {
}

#·······················································································································

list @formulaParameterListInExpression {
  public var @lstring mParameterName
  public var @lstringlist mFieldNames
}

#·······················································································································

class @formulaInExpression : @expression {
  public var @lstring mFormulaName
  public var @formulaParameterListInExpression mParameterList
}

#·······················································································································

class @existInExpression : @expression {
  public var @domainFieldList mArgumentList
  public var @expression mExpression
}

#·······················································································································

class @forAllInExpression : @expression {
  public var @domainFieldList mArgumentList
  public var @expression mExpression
}

#·······················································································································

enum @comparison {
  case equal
  case notEqual
  case lowerOrEqual
  case lowerThan
  case greaterOrEqual
  case greaterThan
}

#·······················································································································

class @comparisonWithConstantInExpression : @expression {
  public var @lstring mVarName
  public var @lstringlist mFieldNames
  public var @comparison mComparison
  public var @luint mConstant
}

#·······················································································································

class @variableComparisonInExpression : @expression {
  public var @lstring mLeftVarName
  public var @lstringlist mLeftFieldNames
  public var @comparison mComparison
  public var @lstring mRightVarName
  public var @lstringlist mRightFieldNames
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    SYNTAX                                                                                                             
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension kerbdd_syntax {

#·······················································································································

rule <expression>( !@expression outExpression) {
  <comparison>( ?outExpression)
  select
  or
    $=$
    <comparison>( ?let @expression rightExpression)
    outExpression = @equalExpression.new (!outExpression !rightExpression)
  or
    $!=$
    <comparison>( ?let @expression rightExpression)
    outExpression = @notEqualExpression.new (!outExpression !rightExpression)
  end
}

#·······················································································································

rule <comparison>( !@expression outExpression) {
  <term>( ?outExpression)
  repeat
  while
    $|$
    <term>( ?let @expression rightExpression)
    outExpression = @orExpression.new (!outExpression !rightExpression)
  while
    $^$
    <term>( ?let @expression rightExpression)
    outExpression = @xorExpression.new (!outExpression !rightExpression)
  end
}

#·······················································································································

rule <term>( !@expression outExpression) {
  <factor>( ?outExpression)
  repeat
  while
    $&$
    <factor>( ?let @expression rightExpression)
    outExpression = @andExpression.new (!outExpression !rightExpression)
  while
    $->$
    <factor>( ?let @expression rightExpression)
    outExpression = @impliesExpression.new (!outExpression !rightExpression)
  end
}

#·······················································································································

rule <factor>( !@expression outExpression) {
  $identifier$( ?let varName)
  select
    outExpression = @varInExpression.new (!varName)
  or
    $.$
    $integer$( ?let varBit)
    outExpression = @varBitInExpression.new (!varName !varBit)
  end
}

#·······················································································································

rule <factor>( !@expression outExpression) {
  $($
  <expression>( ?outExpression)
  $)$
}

#·······················································································································

rule <factor>( !@expression outExpression) {
  $~$
  <factor>( ?let expression)
  outExpression = @complementExpression.new (!expression)
}

#·······················································································································

rule <factor>( !@expression outExpression) {
  $true$
  outExpression = @trueExpression.new
}

#·······················································································································

rule <factor>( !@expression outExpression) {
  $false$
  outExpression = @falseExpression.new
}

#·······················································································································

rule <factor>( !@expression outExpression) {
  $identifier$( ?let formulaName)
  var @formulaParameterListInExpression parameterList = {}
  $($
  select
  or
    repeat
      $identifier$( ?let parameterName)
      var @lstringlist fieldNames = {}
      repeat
      while
        $.$
        $identifier$( ?let fieldName)
        fieldNames += !fieldName
      end
      parameterList += !parameterName !fieldNames
    while
      $,$
    end
  end
  $)$
  outExpression = @formulaInExpression.new (!formulaName !parameterList)
}

#·······················································································································

rule <factor>( !@expression outExpression) {
  $?$
  <recordFields>( ?let @domainFieldList domainFieldList)
  $($
  <expression>( ?let expression)
  $)$
  outExpression = @existInExpression.new (!domainFieldList !expression)
}

#·······················································································································

rule <factor>( !@expression outExpression) {
  $!$
  <recordFields>( ?let @domainFieldList domainFieldList)
  $($
  <expression>( ?let expression)
  $)$
  outExpression = @forAllInExpression.new (!domainFieldList !expression)
}
#·······················································································································

rule <factor>( !@expression outExpression) {
  ${$
  $identifier$( ?let varName)
  var @lstringlist leftFieldNames = {}
  repeat
  while
    $.$
    $identifier$( ?let fieldName)
    leftFieldNames += !fieldName
  end
  let @comparison comparison
  select
    $=$
    comparison = .equal
  or
    $!=$
    comparison = .notEqual
  or
    $<=$
    comparison = .lowerOrEqual
  or
    $<$
    comparison = .lowerThan
  or
    $>=$
    comparison = .greaterOrEqual
  or
    $>$
    comparison = .greaterThan
  end
  select
    $integer$( ?let constant)
    outExpression = @comparisonWithConstantInExpression.new (!varName !leftFieldNames !comparison !constant)
  or
    $identifier$( ?let rightVarName)
    var @lstringlist rightFieldNames = {}
    repeat
    while
      $.$
      $identifier$( ?let fieldName)
      rightFieldNames += !fieldName
    end
    outExpression = @variableComparisonInExpression.new (!varName !leftFieldNames !comparison !rightVarName !rightFieldNames)
  end
  $}$
}

#·······················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    ANALYZE EXPRESSION                                                                                                 
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @expression computeExpression(
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap)
  -> @binaryset

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @varInExpression computeExpression(
  ?let @domainMap unused inDomainMap
  ?let @varMap inVarMap
  ?let @uint unused inTotalBitCount
  ?let @computedFormulaMap unused inComputedFormulaMap)
  -> @binaryset outResult
{
  [inVarMap searchKey !self.mVarName ?let idx ?let bitCount ?let subdomainMap]
  if [subdomainMap count] > 0 then
    error self.mVarName : "variable is a record; use dot notation"
  elsif bitCount != 1 then
    error self.mVarName : "variable is not boolean; use {...} or dot notation"
  end
  outResult = @binaryset.binarySetWithBit (!idx)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @varBitInExpression computeExpression(
  ?let @domainMap unused inDomainMap
  ?let @varMap inVarMap
  ?let @uint unused inTotalBitCount
  ?let @computedFormulaMap unused inComputedFormulaMap)
  -> @binaryset outResult
{
  [inVarMap searchKey !self.mVarName ?let idx ?let bitCount ?let subdomainMap]
  if [subdomainMap count] > 0 then
    error self.mVarName : "variable is a record; use dot notation"
  elsif bitCount <= self.mVarBit.uint then
    error self.mVarBit : "bit index should be < " + bitCount
  end
  outResult = @binaryset.binarySetWithBit (!idx + self.mVarBit.uint)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @andExpression computeExpression(
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap)
  -> @binaryset outResult
{
  let left  = [self.mLeftExpression  computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  let right = [self.mRightExpression computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  outResult = left & right
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @orExpression computeExpression(
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap)
  -> @binaryset outResult
{
  let left  = [self.mLeftExpression  computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  let right = [self.mRightExpression computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  outResult = left | right
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @xorExpression computeExpression(
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap)
  -> @binaryset outResult
{
  let left  = [self.mLeftExpression  computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  let right = [self.mRightExpression computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  outResult = left ^ right
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @impliesExpression computeExpression(
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap)
  -> @binaryset outResult
{
  let left  = [self.mLeftExpression  computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  let right = [self.mRightExpression computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  outResult = [left implies !right]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @equalExpression computeExpression(
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap)
  -> @binaryset outResult
{
  let left  = [self.mLeftExpression  computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  let right = [self.mRightExpression computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  outResult = ~(left ^ right)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @notEqualExpression computeExpression(
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap)
  -> @binaryset outResult
{
  let left  = [self.mLeftExpression  computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  let right = [self.mRightExpression computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  outResult = left ^ right
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @complementExpression computeExpression(
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap)
  -> @binaryset outResult
{
  outResult = ~ [self.mExpression computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @trueExpression computeExpression(
  ?let @domainMap unused inDomainMap
  ?let @varMap unused inVarMap
  ?let @uint unused inTotalBitCount
  ?let @computedFormulaMap unused inComputedFormulaMap)
  -> @binaryset outResult
{
  outResult = @binaryset.fullBinarySet
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @falseExpression computeExpression(
  ?let @domainMap unused inDomainMap
  ?let @varMap unused inVarMap
  ?let @uint unused inTotalBitCount
  ?let @computedFormulaMap unused inComputedFormulaMap)
  -> @binaryset outResult
{
  outResult = @binaryset.emptyBinarySet
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @formulaInExpression computeExpression(
  ?let @domainMap unused inDomainMap
  ?let @varMap inVarMap
  ?let @uint unused inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap)
  -> @binaryset outResult
{
#--- Read formula
  [inComputedFormulaMap searchKey !self.mFormulaName ?let varList ?let unused totalBitCount ?let formulaValue]
#--- Check parameter list
  if [self.mParameterList length] != [varList length] then
    error self.mFormulaName : "the $" + self.mFormulaName + " names "
      + [varList length] + " variable" + if [varList length] > 1 then "s" else "" end
      + ", but this call names "
      + [self.mParameterList length] + " variable" + if [self.mParameterList length] > 1 then "s" else "" end
    : outResult
  else
    var @uintlist transformationList = {}
    for > (formalName * formalBitCount) in varList, > (parameterName fieldNameList) in self.mParameterList do
      [inVarMap searchKey !parameterName ?@uint parameterIndex ?@uint parameterBitCount ?@recordDomainMap subdomainMap]
      for (fieldName) in fieldNameList do
        [subdomainMap searchKey !fieldName ?let fieldRelativeBitIndex ?parameterBitCount ?let fieldSubdomainMap]
        parameterIndex = parameterIndex + fieldRelativeBitIndex
        subdomainMap = fieldSubdomainMap
      end
      if formalBitCount != parameterBitCount then
        error parameterName : "this parameter is declared with a size of "
          + parameterBitCount + " bit" + if parameterBitCount > 1 then "s" else "" end
          + ", but corresponding formal argument '" + formalName + "' is declared with a size of "
          + formalBitCount + " bit" + if formalBitCount > 1 then "s" else "" end
      end
      for i in 0 ..< parameterBitCount do
        transformationList += !parameterIndex + i
      end
    end
    outResult = [formulaValue transformedBy !transformationList]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @existInExpression computeExpression(
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap)
  -> @binaryset outResult
{
  var @varMap varMap = inVarMap
  var @uint totalBitCount = inTotalBitCount 
  [self.mArgumentList analyze !inDomainMap !?varMap !?* !?totalBitCount]
  let r = [self.mExpression computeExpression !inDomainMap !varMap !totalBitCount !inComputedFormulaMap]
  outResult = [r existOnBitIndexAndBeyond !inTotalBitCount]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @forAllInExpression computeExpression(
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap)
  -> @binaryset outResult
{
  var @varMap varMap = inVarMap
  var @uint totalBitCount = inTotalBitCount 
  [self.mArgumentList analyze !inDomainMap !?varMap !?* !?totalBitCount]
  let r = [self.mExpression computeExpression !inDomainMap !varMap !totalBitCount !inComputedFormulaMap]
  outResult = [r forAllOnBitIndexAndBeyond !inTotalBitCount]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @comparisonWithConstantInExpression computeExpression(
  ?let @domainMap unused inDomainMap
  ?let @varMap inVarMap
  ?let @uint unused inTotalBitCount
  ?let @computedFormulaMap unused inComputedFormulaMap)
  -> @binaryset outResult
{
  [inVarMap searchKey !self.mVarName ?@uint idx ?@uint bitCount ?@recordDomainMap subDomainMap]
  for (fieldName) in self.mFieldNames do
    [subDomainMap searchKey !fieldName ?let fieldRelativeBitIndex ?bitCount ?let fieldSubdomainMap]
    idx = idx + fieldRelativeBitIndex
    subDomainMap = fieldSubdomainMap
  end
  if [subDomainMap count] > 0 then
    error self.mVarName : "variable is a record; use dot notation" : outResult
  elsif [self.mConstant.uint significantBitCount] > bitCount then
    error self.mConstant : "Constant too large (should be < 2**" + bitCount : outResult
  else
    switch self.mComparison
    case equal :
      outResult = @binaryset.binarySetWithEqualToConstant (!idx !bitCount ![self.mConstant.uint uint64])
    case notEqual :
      outResult = @binaryset.binarySetWithNotEqualToConstant (!idx !bitCount ![self.mConstant.uint uint64])
    case lowerOrEqual :
      outResult = @binaryset.binarySetWithLowerOrEqualToConstant (!idx !bitCount ![self.mConstant.uint uint64])
    case lowerThan :
      outResult = @binaryset.binarySetWithStrictLowerThanConstant (!idx !bitCount ![self.mConstant.uint uint64])
    case greaterOrEqual :
      outResult = @binaryset.binarySetWithGreaterOrEqualToConstant (!idx !bitCount ![self.mConstant.uint uint64])
    case greaterThan :
      outResult = @binaryset.binarySetWithStrictGreaterThanConstant (!idx !bitCount ![self.mConstant.uint uint64])
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @variableComparisonInExpression computeExpression(
  ?let @domainMap unused inDomainMap
  ?let @varMap inVarMap
  ?let @uint unused inTotalBitCount
  ?let @computedFormulaMap unused inComputedFormulaMap)
  -> @binaryset outResult
{
  [inVarMap searchKey !self.mLeftVarName  ?@uint  leftIdx ?@uint  leftBitCount ?@recordDomainMap  leftSubDomainMap]
  for (fieldName) in self.mLeftFieldNames do
    [leftSubDomainMap searchKey !fieldName ?let fieldRelativeBitIndex ?leftBitCount ?let fieldSubdomainMap]
    leftIdx = leftIdx + fieldRelativeBitIndex
    leftSubDomainMap = fieldSubdomainMap
  end
  [inVarMap searchKey !self.mRightVarName ?@uint rightIdx ?@uint rightBitCount ?@recordDomainMap rightSubDomainMap]
  for (fieldName) in self.mRightFieldNames do
    [rightSubDomainMap searchKey !fieldName ?let fieldRelativeBitIndex ?rightBitCount ?let fieldSubdomainMap]
    rightIdx = rightIdx + fieldRelativeBitIndex
    rightSubDomainMap = fieldSubdomainMap
  end
  if [leftSubDomainMap count] > 0 then
    error self.mLeftVarName : "variable is a record; use dot notation" : outResult
  elsif [rightSubDomainMap count] > 0 then
    error self.mRightVarName : "variable is a record; use dot notation" : outResult
  elsif leftBitCount != rightBitCount then
    error self.mRightVarName : "'" + self.mLeftVarName + "' variable uses "
      + leftBitCount + " bit" + if leftBitCount > 1 then "s" else "" end
      + ", but this variable uses "
      + rightBitCount + " bit" + if rightBitCount > 1 then "s" else "" end
    : outResult
  else
    switch self.mComparison
    case equal :
      outResult = @binaryset.binarySetWithEqualComparison (!leftIdx !leftBitCount !rightIdx)
    case notEqual :
      outResult = @binaryset.binarySetWithNotEqualComparison (!leftIdx !leftBitCount !rightIdx)
    case lowerOrEqual :
      outResult = @binaryset.binarySetWithLowerOrEqualComparison (!leftIdx !leftBitCount !rightIdx)
    case lowerThan :
      outResult = @binaryset.binarySetWithStrictLowerComparison (!leftIdx !leftBitCount !rightIdx)
    case greaterOrEqual :
      outResult = @binaryset.binarySetWithGreaterOrEqualComparison (!leftIdx !leftBitCount !rightIdx)
    case greaterThan :
      outResult = @binaryset.binarySetWithStrictGreaterComparison (!leftIdx !leftBitCount !rightIdx)
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
