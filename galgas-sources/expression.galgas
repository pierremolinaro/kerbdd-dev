#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    AST                                                                                                                
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract class @expression {
}

#·······················································································································

class @varInExpression : @expression {
  @lstring mVarName
}

#·······················································································································

class @varBitInExpression : @expression {
  @lstring mVarName
  @luint mVarBit
}

#·······················································································································

class @andExpression, @orExpression, @xorExpression, @equalExpression, @notEqualExpression, @impliesExpression : @expression {
  @expression mLeftExpression
  @expression mRightExpression
}

#·······················································································································

class @complementExpression : @expression {
  @expression mExpression
}

#·······················································································································

class @trueExpression, @falseExpression : @expression {
}

#·······················································································································

class @formulaInExpression : @expression {
  @lstring mFormulaName
  @lstringlist mParameterList
}

#·······················································································································

class @existInExpression, @forAllInExpression : @expression {
  @domainFieldList mArgumentList
  @expression mExpression
}

#·······················································································································

enum @comparison {
  case equal
  case notEqual
}

#·······················································································································

class @comparisonWithConstantInExpression : @expression {
  @lstring mVarName
  @comparison mComparison
  @luint mConstant
}

#·······················································································································

class @variableComparisonInExpression : @expression {
  @lstring mLeftVarName
  @comparison mComparison
  @lstring mRightVarName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    SYNTAX                                                                                                             
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension kerbdd_syntax {

#·······················································································································

rule <expression> !@expression outExpression {
  <comparison> ?outExpression
  select
  or
    $=$
    <comparison> ?let @expression rightExpression
    outExpression = @equalExpression.new {!outExpression !rightExpression}
  or
    $!=$
    <comparison> ?let @expression rightExpression
    outExpression = @notEqualExpression.new {!outExpression !rightExpression}
  end
}

#·······················································································································

rule <comparison> !@expression outExpression {
  <term> ?outExpression
  repeat
  while
    $|$
    <term> ?let @expression rightExpression
    outExpression = @orExpression.new {!outExpression !rightExpression}
  while
    $^$
    <term> ?let @expression rightExpression
    outExpression = @xorExpression.new {!outExpression !rightExpression}
  end
}

#·······················································································································

rule <term> !@expression outExpression {
  <factor> ?outExpression
  repeat
  while
    $&$
    <factor> ?let @expression rightExpression
    outExpression = @andExpression.new {!outExpression !rightExpression}
  while
    $->$
    <factor> ?let @expression rightExpression
    outExpression = @impliesExpression.new {!outExpression !rightExpression}
  end
}

#·······················································································································

rule <factor> !@expression outExpression {
  $identifier$ ?let varName
  select
    outExpression = @varInExpression.new {!varName}
  or
    $.$
    $integer$ ?let varBit
    outExpression = @varBitInExpression.new {!varName !varBit}
  end
}

#·······················································································································

rule <factor> !@expression outExpression {
  $($
  <expression> ?outExpression
  $)$
}

#·······················································································································

rule <factor> !@expression outExpression {
  $~$
  <factor> ?let expression
  outExpression = @complementExpression.new {!expression}
}

#·······················································································································

rule <factor> !@expression outExpression {
  $true$
  outExpression = @trueExpression.new
}

#·······················································································································

rule <factor> !@expression outExpression {
  $false$
  outExpression = @falseExpression.new
}

#·······················································································································

rule <factor> !@expression outExpression {
  $formula$ ?let formulaName
  @lstringlist parameterList = {}
  $($
  repeat
    $identifier$ ?let parameterName
    parameterList += !parameterName
  while
    $,$
  end
  $)$
  outExpression = @formulaInExpression.new {!formulaName !parameterList}
}

#·······················································································································

rule <factor> !@expression outExpression {
  $?$
  <recordFields> ?let @domainFieldList domainFieldList
  $($
  <expression> ?let expression
  $)$
  outExpression = @existInExpression.new {!domainFieldList !expression}
}

#·······················································································································

rule <factor> !@expression outExpression {
  $!$
  <recordFields> ?let @domainFieldList domainFieldList
  $($
  <expression> ?let expression
  $)$
  outExpression = @forAllInExpression.new {!domainFieldList !expression}
}
#·······················································································································

rule <factor> !@expression outExpression {
  ${$
  $identifier$ ?let varName
  @comparison comparison
  select
    $=$
    comparison = .equal
  or
    $!=$
    comparison = .notEqual
  end
  select
    $integer$ ?let constant
    outExpression = @comparisonWithConstantInExpression.new {!varName !comparison !constant}
  or
    $identifier$ ?let rightVarName
    outExpression = @variableComparisonInExpression.new {!varName !comparison !rightVarName}
  end
  $}$
}

#·······················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    ANALYZE EXPRESSION                                                                                                 
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @expression computeExpression
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap
  -> @binaryset outResult

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @varInExpression computeExpression
  ?let @domainMap unused inDomainMap
  ?let @varMap inVarMap
  ?let @uint unused inTotalBitCount
  ?let @computedFormulaMap unused inComputedFormulaMap
  -> @binaryset outResult
{
  [inVarMap searchKey !mVarName ?let idx ?let bitCount]
  if bitCount != 1 then
    error mVarName : "variable is not boolean; use {...} or dot notation"
  end
  outResult = @binaryset.binarySetWithBit {!idx}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @varBitInExpression computeExpression
  ?let @domainMap unused inDomainMap
  ?let @varMap inVarMap
  ?let @uint unused inTotalBitCount
  ?let @computedFormulaMap unused inComputedFormulaMap
  -> @binaryset outResult
{
  [inVarMap searchKey !mVarName ?let idx ?let bitCount]
  if bitCount <= mVarBit.uint then
    error mVarBit : "bit index should be < " + bitCount
  end
  outResult = @binaryset.binarySetWithBit {!idx + mVarBit.uint}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @andExpression computeExpression
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap
  -> @binaryset outResult
{
  let left  = [mLeftExpression  computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  let right = [mRightExpression computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  outResult = left & right
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @orExpression computeExpression
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap
  -> @binaryset outResult
{
  let left  = [mLeftExpression  computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  let right = [mRightExpression computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  outResult = left | right
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @xorExpression computeExpression
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap
  -> @binaryset outResult
{
  let left  = [mLeftExpression  computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  let right = [mRightExpression computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  outResult = left ^ right
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @impliesExpression computeExpression
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap
  -> @binaryset outResult
{
  let left  = [mLeftExpression  computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  let right = [mRightExpression computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  outResult = [left implies !right]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @equalExpression computeExpression
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap
  -> @binaryset outResult
{
  let left  = [mLeftExpression  computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  let right = [mRightExpression computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  outResult = ~(left ^ right)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @notEqualExpression computeExpression
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap
  -> @binaryset outResult
{
  let left  = [mLeftExpression  computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  let right = [mRightExpression computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
  outResult = left ^ right
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @complementExpression computeExpression
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap
  -> @binaryset outResult
{
  outResult = ~ [mExpression computeExpression !inDomainMap !inVarMap !inTotalBitCount !inComputedFormulaMap]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @trueExpression computeExpression
  ?let @domainMap unused inDomainMap
  ?let @varMap unused inVarMap
  ?let @uint unused inTotalBitCount
  ?let @computedFormulaMap unused inComputedFormulaMap
  -> @binaryset outResult
{
  outResult = @binaryset.fullBinarySet
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @falseExpression computeExpression
  ?let @domainMap unused inDomainMap
  ?let @varMap unused inVarMap
  ?let @uint unused inTotalBitCount
  ?let @computedFormulaMap unused inComputedFormulaMap
  -> @binaryset outResult
{
  outResult = @binaryset.emptyBinarySet
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @formulaInExpression computeExpression
  ?let @domainMap unused inDomainMap
  ?let @varMap inVarMap
  ?let @uint unused inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap
  -> @binaryset outResult
{
#--- Read formula
  [inComputedFormulaMap searchKey !mFormulaName ?let varList ?let unused totalBitCount ?let formulaValue]
#--- Check parameter list
  if [mParameterList length] != [varList length] then
    error mFormulaName : "the $" + mFormulaName + " names "
      + [varList length] + " variable" + if [varList length] > 1 then "s" else "" end
      + ", but this call names "
      + [mParameterList length] + " variable" + if [mParameterList length] > 1 then "s" else "" end
    : outResult
  else
    @uintlist transformationList = {}
    for (formalName formalBitIndex formalBitCount) in varList, > (parameterName) in mParameterList do
      [inVarMap searchKey !parameterName ?let parameterIndex ?let parameterBitCount]
      if formalBitCount != parameterBitCount then
        error parameterName : "this parameter is declared with a size of "
          + parameterBitCount + " bit" + if parameterBitCount > 1 then "s" else "" end
          + ", but corresponding formal argument '" + formalName + "' is declared with a size of "
          + formalBitCount + " bit" + if formalBitCount > 1 then "s" else "" end
      end
      for i in 0 ..< parameterBitCount do
        transformationList += !parameterIndex + i
      end
    end
    outResult = [formulaValue transformedBy !transformationList]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @existInExpression computeExpression
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap
  -> @binaryset outResult
{
  @varMap varMap = inVarMap
  @uint totalBitCount = inTotalBitCount 
  [mArgumentList analyze !inDomainMap !?varMap !?* !?totalBitCount]
  let r = [mExpression computeExpression !inDomainMap !varMap !totalBitCount !inComputedFormulaMap]
  outResult = [r existOnBitIndexAndBeyond !inTotalBitCount]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @forAllInExpression computeExpression
  ?let @domainMap inDomainMap
  ?let @varMap inVarMap
  ?let @uint inTotalBitCount
  ?let @computedFormulaMap inComputedFormulaMap
  -> @binaryset outResult
{
  @varMap varMap = inVarMap
  @uint totalBitCount = inTotalBitCount 
  [mArgumentList analyze !inDomainMap !?varMap !?* !?totalBitCount]
  let r = [mExpression computeExpression !inDomainMap !varMap !totalBitCount !inComputedFormulaMap]
  outResult = [r forAllOnBitIndexAndBeyond !inTotalBitCount]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @comparisonWithConstantInExpression computeExpression
  ?let @domainMap unused inDomainMap
  ?let @varMap inVarMap
  ?let @uint unused inTotalBitCount
  ?let @computedFormulaMap unused inComputedFormulaMap
  -> @binaryset outResult
{
  [inVarMap searchKey !mVarName ?let idx ?let bitCount]
  if [mConstant.uint significantBitCount] > bitCount then
    error mConstant : "Constant too large (should be < 2**" + bitCount : outResult
  else
    switch mComparison
    case equal :
      outResult = @binaryset.binarySetWithEqualToConstant {!idx !bitCount ![mConstant.uint uint64]}
    case notEqual :
      outResult = @binaryset.binarySetWithNotEqualToConstant {!idx !bitCount ![mConstant.uint uint64]}
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @variableComparisonInExpression computeExpression
  ?let @domainMap unused inDomainMap
  ?let @varMap inVarMap
  ?let @uint unused inTotalBitCount
  ?let @computedFormulaMap unused inComputedFormulaMap
  -> @binaryset outResult
{
  [inVarMap searchKey !mLeftVarName  ?let  leftIdx ?let  leftBitCount]
  [inVarMap searchKey !mRightVarName ?let rightIdx ?let rightBitCount]
  if leftBitCount != rightBitCount then
    error mRightVarName : "'" + mLeftVarName + "' variable uses "
      + leftBitCount + " bit" + if leftBitCount > 1 then "s" else "" end
      + ", but this variable uses "
      + rightBitCount + " bit" + if rightBitCount > 1 then "s" else "" end
    : outResult
  else
    switch mComparison
    case equal :
      outResult = @binaryset.binarySetWithEqualComparison {!leftIdx !leftBitCount !rightIdx}
    case notEqual :
      outResult = @binaryset.binarySetWithNotEqualComparison {!leftIdx !leftBitCount !rightIdx}
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
