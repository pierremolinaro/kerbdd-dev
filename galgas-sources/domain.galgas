#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    AST                                                                                                                
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @bddType {
  case bool
  case boolArray (@uint size)
  case namedType (@lstring typeName)
}

#·······················································································································

list @domainFieldList {
  @lstring mVarName
  @bddType mType
}

#·······················································································································

enum @domainDeclarationType {
  case type (@bddType type)
  case record (@domainFieldList fieldList)
}

#·······················································································································

list @domainDeclarationList {
  @lstring mDomainName
  @domainDeclarationType mType
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    SYNTAX                                                                                                             
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension kerbdd_syntax {

#·······················································································································

rule <topLevelDeClaration> ?!@ast ioAST {
  $domain$
  $identifier$ ?let domainName
  $:$
  @domainDeclarationType domainDeclarationType
  select
    <type> ?let @bddType type
    domainDeclarationType = .type {!type:type}
  or
    $($
    <recordFields> ?let @domainFieldList fieldList
    domainDeclarationType = .record {!fieldList:fieldList}
    $)$
  end
  $;$
  ioAST.mDomainList += !domainName !domainDeclarationType
}

#·······················································································································

rule <recordFields> !@domainFieldList outFormulaArgumentList {
  outFormulaArgumentList = {}
  repeat
    $identifier$ ?let varName
    $:$
    <type> ?let @bddType type
    outFormulaArgumentList += !varName !type
  while
    $,$
  end
}

#·······················································································································

rule <type> !@bddType outType {
  select
    $identifier$ ?let typeName
    outType = .namedType {!typeName:typeName}
  or
    $bool$
    select
      outType = .bool
    or
      $[$
      $integer$ ?let bitCount
      $]$
      if bitCount.uint == 0 then
        error bitCount : "size should be > 0"
      end
      outType = .boolArray {!size:bitCount.uint}
    end
  end
}

#·······················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    ANALYZE DOMAIN                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @domainMap {
  @uint mBitCount
  insert insertKey error message "the '%K' domain is already declared in %L"
  search searchKey error message "there is no '%K' domain"
}

#·······················································································································

method @domainDeclarationList analyze !@domainMap outDomainMap {
  outDomainMap = {}
  for (name typeDefinition) in self while @uint.errorCount == 0 do
    switch typeDefinition
    case type (@bddType type) :
      switch type
      case bool :
        [!?outDomainMap insertKey !name !1]
      case boolArray (@uint size) :
        [!?outDomainMap insertKey !name !size]
      case namedType (@lstring typeName) :
        [outDomainMap searchKey !typeName ?let size] ;
        [!?outDomainMap insertKey !name !size]
      end
    case record (@domainFieldList fieldList) :
      for > () in fieldList while @uint.errorCount == 0 do
      
      end
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    ANALYZE DOMAIN FIELDS                                                                                              
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @varList {
  @string mVarName
  @uint mBitIndex
  @uint mBitCount
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @varMap {
  @uint mIndex
  @uint mBitCount
  insert insertKey error message "the '%K' variable is already declared in %L"
  search searchKey error message "there is no '%K' variable"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @domainFieldList analyze
  ?let @domainMap inDomainMap
  ?!@varMap ioVarMap
  ?!@varList ioVarList
  ?!@uint ioTotalBitCount
{
#--- Build variable map
  for > (idf type) in self do
    switch type
    case bool :
      [!?ioVarMap insertKey !idf !ioTotalBitCount !1]
      [!?ioVarList insertAtIndex !idf.string !ioTotalBitCount !1 !0]
      ioTotalBitCount ++
    case boolArray (@uint size) :
      [!?ioVarMap insertKey !idf !ioTotalBitCount !size]
      [!?ioVarList insertAtIndex !idf.string !ioTotalBitCount !size !0]
      ioTotalBitCount = ioTotalBitCount + size
    case namedType (@lstring typeName) :
      [inDomainMap searchKey !typeName ?let size] ;
      [!?ioVarMap insertKey !idf !ioTotalBitCount !size]
      [!?ioVarList insertAtIndex !idf.string !ioTotalBitCount !size !0]
      ioTotalBitCount = ioTotalBitCount + size
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
