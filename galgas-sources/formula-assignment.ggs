#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    AST                                                                                                                
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @formulaKind {
  case assignment
  case fixedPoint (@binaryset startValue)
}

#·······················································································································

class @assignmentFormula : @abstractFormula {
  public var @lstring mFormulaName
  public var @domainFieldList mFormulaArgumentList
  public var @formulaKind mKind
  public var @expression mExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    SYNTAX                                                                                                             
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension kerbdd_syntax {

#·······················································································································

rule <topLevelDeClaration>( ?!@ast ioAST) {
  $identifier$( ?let formulaName)
  let @domainFieldList domainFieldList
  $($
  select
    domainFieldList = []
  or
    <recordFields>( ?domainFieldList)
  end
  $)$
  let @formulaKind kind
  select
    $:=$
    kind = .assignment
  or
    $+=$
    kind = .fixedPoint (!startValue:.emptyBinarySet)
  or
    $-=$
    kind = .fixedPoint (!startValue:.fullBinarySet)
  end
  <expression>( ?let @expression expression)
  $;$
  ioAST.mFormulaList += !@assignmentFormula.new (!formulaName, !domainFieldList, !kind, !expression)
}

#·······················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#    ANALYZE FORMULA                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @computedFormulaMap {
  public var @varList mVarList
  public var @uint mBitCount
  public var @binaryset mValue
  insert insertKey error message "the '%K' formula is already declared in %L"
  search searchKey error message "there is no '%K' formula"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override proc @assignmentFormula. analyzeFormula( 
  ?let @string unused inSourceFilePath,
  ?let @domainMap inDomainMap,
  ?!@computedFormulaMap ioComputedFormulaMap)
{
#--- Build variable map
  var @uint totalBitCount = 0
  var @varList varList = []
  var @varMap varMap = []
  self.mFormulaArgumentList.analyze (!inDomainMap, !?varMap, !?varList, !?totalBitCount)
#--- Compute expression
  switch self.mKind
  case assignment :
#    print (self.mFormulaName.string + "...")
    let timer = @timer.start
    let result = self.mExpression.computeExpression (!inDomainMap, !varMap, !totalBitCount, !ioComputedFormulaMap)
    !?ioComputedFormulaMap.insertKey (!self.mFormulaName, !varList, !totalBitCount, !result)
    let @uint64 valueCount = result.valueCount (totalBitCount)
#    let @bigint bigValueCount = [result bigValueCount !totalBitCount]
    let @uint64 nodeCount = result.nodeCount ()
    print (" "
      + valueCount + " value" + if valueCount > 1 then "s" else "" end
      + ", " + nodeCount + " node" + if nodeCount > 1 then "s" else "" end
      + " (" + timer + ")")
  case fixedPoint (@binaryset startValue) :
#    message self.mFormulaName.string + "..."
    let timer = @timer.start
    var @binaryset result = startValue
    !?ioComputedFormulaMap.insertKey (!self.mFormulaName, !varList, !totalBitCount, !result)
    var iterate = true ;
    var iterationCount = 0
    loop (@uint.max) while iterate do
      iterationCount += 1
      let r = self.mExpression.computeExpression (!inDomainMap, !varMap, !totalBitCount, !ioComputedFormulaMap)
      if result == r then
        iterate = false
      else
        result = r
        !?ioComputedFormulaMap.setMValueForKey (!result, !self.mFormulaName.string)
      end
    end
    let @uint64 valueCount = result.valueCount (totalBitCount)
    let @uint64 nodeCount = result.nodeCount ()
    print (" "
      + iterationCount + " iteration" + if iterationCount > 1 then "s" else "" end
      + ", " + valueCount + " value" + if valueCount > 1 then "s" else "" end
      + ", " + nodeCount + " node" + if nodeCount > 1 then "s" else "" end
      + " (" + timer + ")")
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
