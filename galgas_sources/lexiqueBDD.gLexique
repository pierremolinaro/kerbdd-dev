lexique lexiqueBDD :

#-----------------------------------------------------------------*

style identifier -> "Identifiers" ;
style keyWords -> "Key words" ;
style stringStyle -> "String constants" ;
style delimitors -> "Delimitors" ;
style integer_csts -> "Integer constants" ;

@string att_idf ;
@string att_token ;
@uint  att_valeur ;

$nombre$ ! att_valeur error message "a decimal integer" style integer_csts ;
$id$ ! att_token error message "an identifier" style identifier ;
$string$ ! att_token error message "a character string (between \" and \")" style stringStyle ;
$comp$ ! att_valeur error message "the '=', '<>', '<=', '<', '>' or '>' delimitor" style delimitors  ;

list delimiteursKerBDD error message "the '%K' delimiter" style delimitors :
  "(",
  ")",
  "{",
  "}",
  "[",
  "]",
  ":=",
  ":",
  "." ,
  "..",
  "+=",
  "-=",
  "->",
  "&",
  "|",
  "~",
  ",",
  "?",
  "!",
  ";",
  "#" ;

#-----------------------------------------------------------------*

list motsReservesKerBDD error message "the '%K' keyword" style keyWords :
 "ite_cache", "and_cache",
 "use_and", "use_ite", "use_and_ite",
 "map",
 "bdd",      "domain",
 "bool",     "record",
 "true",     "false",
 "display",  "include",
 "dump",     "verify",
 "end",      "if",
 "then",     "else" ;

#-----------------------------------------------------------------*

message nombre_dec_trop_grand : "number too large" ;
message car_non_chiffre : "the character is not a decimal digit" ;
message fin_chaine_incorrecte : "the character string does not end with \"" ;

# -------------------------- identificateur or mot reserve --------------------
# les mots reserves peuvent etre ecrits en majuscules or minuscules
# pour les identificateurs, majuscules et minuscules sont distinguees
rule 'a'->'z' | 'A'->'Z' :
  repeat
    enterCharacterIntoString !?att_idf !toLower (!*) ;
    enterCharacterIntoString !?att_token !* ;
  while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
  end repeat ;
  send search att_idf in motsReservesKerBDD default $id$ ;
end rule ;

# ------------------------------- Chaine de caracteres -------------------------------
rule '"' :
  repeat
  while ' ' | '!' | '#'-> '\u007E' :
    enterCharacterIntoString !?att_token !* ;
  end repeat ;
  select
  when '"' :
    send $string$ ;
  default
    error fin_chaine_incorrecte ;
  end select ;
end rule ;

# ------------------------------- nombre decimal -------------------------------
rule '0'->'9' :
  enterDigitIntoUInt !* !?att_valeur error nombre_dec_trop_grand, car_non_chiffre ;
  repeat
  while '0'->'9' :
    enterDigitIntoUInt !* !?att_valeur error nombre_dec_trop_grand, car_non_chiffre ;
  while '_' :
  end repeat ;
  send $nombre$ ;
end rule ;

# ----------------------------- delimiteurs ---------------------------------------
rule list delimiteursKerBDD ;

rule '=' :
  formerCompEgal !?att_valeur ;
  send $comp$ ;
end rule ;

rule '<' :
  select
  when '>' :
    formerCompNonEgal !?att_valeur ;
    send $comp$ ;
  when '=' :
    formerCompInfEgal !?att_valeur ;
    send $comp$ ;
  default
    formerCompInf !?att_valeur ;
    send $comp$ ;
  end select ;
end rule ;

rule '>' :
  select
  when '=' :
    formerCompSupEgal !?att_valeur ;
    send $comp$ ;
  default
    formerCompSup !?att_valeur ;
    send $comp$ ;
  end select ;
end rule ;

# ------------------------------------ commentaire ----------------------------
rule '$' :
  repeat
  while '\u0001' ->'\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\uFFFD' :
  end repeat ;
end rule ;

  # --------------------- separateurs (ignores) ---------------------------------
rule '\u0001' -> ' ' :
end rule ;

end lexique ;
