//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'syntaxeBDD.cpp'                            *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 11th, 2009, at 21h29'47"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "syntaxeBDD.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "syntaxeBDD.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "grammaireBDD.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'axiomeBDD'                *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_axiomeBDD_syntaxeBDD_119_16_ (lexiqueBDD & inLexique,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeListeCalculs  &var_cas_listeCalculs,
                                GGS_typeDomainMap  &var_cas_ioDomainMap) {
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_syntaxeBDD_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_domain) COMMA_HERE) ;
          GGS_lstring  var_cas_domainName ;
          inLexique.assignFromAttribute_att_token (var_cas_domainName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_id) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__3A_) COMMA_HERE) ;
          GGS_typeDomain  var_cas_d ;
          nt_domainDefinition_ (inLexique, var_cas_ioDomainMap, var_cas_d) ;
          var_cas_ioDomainMap.modifier_insertKey (inLexique, var_cas_domainName, var_cas_d COMMA_SOURCE_FILE_AT_LINE (132)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__3B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_include) COMMA_HERE) ;
          GGS_lstring  var_cas_nomFichierInclusion ;
          inLexique.assignFromAttribute_att_token (var_cas_nomFichierInclusion) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__3B_) COMMA_HERE) ;
          const GGS_string _depExtension = GGS_string ("") ;
          const GGS_string _depPath = GGS_string ("") ;
          if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
            grammaireBDD::_performSourceFileParsing_ (inLexique,
                                          _depExtension.string (),
                                          _depPath.string (),
                                          NULL,
                                          var_cas_nomFichierInclusion,
                                          var_cas_tableFormules,
                                          var_cas_listeCalculs,
                                          var_cas_ioDomainMap
                                          COMMA_SOURCE_FILE_AT_LINE (139)) ;
          }
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_use_5F_and) COMMA_HERE) ;
          GGS_typeCalcul  var_cas_calcul ;
          var_cas_calcul = GGS_typeUse_AND ::constructor_new (inLexique COMMA_HERE) ;
          var_cas_listeCalculs._addAssign_operation (var_cas_calcul) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__3B_) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_use_5F_ite) COMMA_HERE) ;
          GGS_typeCalcul  var_cas_calcul ;
          var_cas_calcul = GGS_typeUse_ITE ::constructor_new (inLexique COMMA_HERE) ;
          var_cas_listeCalculs._addAssign_operation (var_cas_calcul) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__3B_) COMMA_HERE) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_use_5F_and_5F_ite) COMMA_HERE) ;
          GGS_typeCalcul  var_cas_calcul ;
          var_cas_calcul = GGS_typeUse_AND_ITE ::constructor_new (inLexique COMMA_HERE) ;
          var_cas_listeCalculs._addAssign_operation (var_cas_calcul) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__3B_) COMMA_HERE) ;
          } break ;
        case 7 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_and_5F_cache) COMMA_HERE) ;
          GGS_luint  var_cas_dimensionCache ;
          inLexique.assignFromAttribute_att_valeur (var_cas_dimensionCache) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_nombre) COMMA_HERE) ;
          GGS_typeCalcul  var_cas_calcul ;
          var_cas_calcul = GGS_typeDimensionnerANDCache ::constructor_new (inLexique, var_cas_dimensionCache COMMA_HERE) ;
          var_cas_listeCalculs._addAssign_operation (var_cas_calcul) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__3B_) COMMA_HERE) ;
          } break ;
        case 8 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_ite_5F_cache) COMMA_HERE) ;
          GGS_luint  var_cas_dimensionCache ;
          inLexique.assignFromAttribute_att_valeur (var_cas_dimensionCache) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_nombre) COMMA_HERE) ;
          GGS_typeCalcul  var_cas_calcul ;
          var_cas_calcul = GGS_typeDimensionnerITECache ::constructor_new (inLexique, var_cas_dimensionCache COMMA_HERE) ;
          var_cas_listeCalculs._addAssign_operation (var_cas_calcul) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__3B_) COMMA_HERE) ;
          } break ;
        case 9 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_map) COMMA_HERE) ;
          GGS_luint  var_cas_dimensionTable ;
          inLexique.assignFromAttribute_att_valeur (var_cas_dimensionTable) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_nombre) COMMA_HERE) ;
          GGS_typeCalcul  var_cas_calcul ;
          var_cas_calcul = GGS_typeDimensionnerTable ::constructor_new (inLexique, var_cas_dimensionTable COMMA_HERE) ;
          var_cas_listeCalculs._addAssign_operation (var_cas_calcul) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__3B_) COMMA_HERE) ;
          } break ;
        case 10 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_bdd) COMMA_HERE) ;
          GGS_typeCalcul  var_cas_calcul ;
          var_cas_calcul = GGS_typeAfficherBilan ::constructor_new (inLexique COMMA_HERE) ;
          var_cas_listeCalculs._addAssign_operation (var_cas_calcul) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__3B_) COMMA_HERE) ;
          } break ;
        case 11 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_display) COMMA_HERE) ;
          GGS_luint  var_cas_afficherBDD ;
          var_cas_afficherBDD = GGS_luint ::constructor_new (inLexique, GGS_uint (1U), GGS_location (inLexique) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__23_) COMMA_HERE) ;
          nt_analyserFormule_ (inLexique, var_cas_tableFormules, var_cas_ioDomainMap, var_cas_listeCalculs, var_cas_afficherBDD) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__3B_) COMMA_HERE) ;
          } break ;
        case 12 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_dump) COMMA_HERE) ;
          GGS_luint  var_cas_afficherBDD ;
          var_cas_afficherBDD = GGS_luint ::constructor_new (inLexique, GGS_uint (2U), GGS_location (inLexique) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__23_) COMMA_HERE) ;
          nt_analyserFormule_ (inLexique, var_cas_tableFormules, var_cas_ioDomainMap, var_cas_listeCalculs, var_cas_afficherBDD) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__3B_) COMMA_HERE) ;
          } break ;
        case 13 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_verify) COMMA_HERE) ;
          GGS_luint  var_cas_afficherBDD ;
          var_cas_afficherBDD = GGS_luint ::constructor_new (inLexique, GGS_uint (3U), GGS_location (inLexique) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__23_) COMMA_HERE) ;
          nt_analyserFormule_ (inLexique, var_cas_tableFormules, var_cas_ioDomainMap, var_cas_listeCalculs, var_cas_afficherBDD) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__3B_) COMMA_HERE) ;
          } break ;
        case 14 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__23_) COMMA_HERE) ;
          GGS_luint  var_cas_afficherBDD ;
          var_cas_afficherBDD = GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_HERE) ;
          nt_analyserFormule_ (inLexique, var_cas_tableFormules, var_cas_ioDomainMap, var_cas_listeCalculs, var_cas_afficherBDD) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_end) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'domainDefinition'            *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_domainDefinition_syntaxeBDD_222_23_ (lexiqueBDD & inLexique,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeDomain  &var_cas_outDomain) {
  switch (select_syntaxeBDD_1 (inLexique)) {
    case 1 : {
      GGS_luint  var_cas_lowBound ;
      GGS_luint  var_cas_highBound ;
      switch (select_syntaxeBDD_2 (inLexique)) {
        case 1 : {
          inLexique.assignFromAttribute_att_valeur (var_cas_lowBound) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_nombre) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__2E__2E_) COMMA_HERE) ;
          inLexique.assignFromAttribute_att_valeur (var_cas_highBound) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_nombre) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_bool) COMMA_HERE) ;
          var_cas_lowBound = GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_HERE) ;
          switch (select_syntaxeBDD_3 (inLexique)) {
            case 1 : {
              var_cas_highBound = GGS_luint ::constructor_new (inLexique, GGS_uint (1U), GGS_location (inLexique) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__5B_) COMMA_HERE) ;
              GGS_luint  var_cas_dim ;
              inLexique.assignFromAttribute_att_valeur (var_cas_dim) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_nombre) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__5D_) COMMA_HERE) ;
              if (var_cas_dim.isBuilt ()) {
                ::routine_getHighBound (inLexique,  var_cas_dim,  var_cas_highBound COMMA_SOURCE_FILE_AT_LINE (243)) ;
              }
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          break ;
      }
      GGS_luint  var_cas_dimension ;
      if (var_cas_lowBound.isBuilt () &&
          var_cas_highBound.isBuilt ()) {
        ::routine_verifyBoundsAndComputeDimension (inLexique,  var_cas_lowBound,  var_cas_highBound,  var_cas_dimension COMMA_SOURCE_FILE_AT_LINE (247)) ;
      }
      var_cas_outDomain = GGS_typeDirectDomain ::constructor_new (inLexique, var_cas_lowBound, var_cas_highBound, var_cas_dimension COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_record) COMMA_HERE) ;
      GGS_typeDomainMap  var_cas_recordDomainMap ;
      var_cas_recordDomainMap = GGS_typeDomainMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      { bool syntaxRepeat_4 = true ;
        while (syntaxRepeat_4) {
            GGS_lstring  var_cas_fieldName ;
            inLexique.assignFromAttribute_att_token (var_cas_fieldName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_id) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__3A_) COMMA_HERE) ;
            GGS_typeDomain  var_cas_d ;
            nt_domainDefinition_ (inLexique, var_cas_ioDomainMap, var_cas_d) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__3B_) COMMA_HERE) ;
            var_cas_recordDomainMap.modifier_insertKey (inLexique, var_cas_fieldName, var_cas_d COMMA_SOURCE_FILE_AT_LINE (259)) ;
          switch (select_repeat_syntaxeBDD_4 (inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_4 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_end) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_record) COMMA_HERE) ;
      var_cas_outDomain = GGS_typeRecordDomain ::constructor_new (inLexique, var_cas_recordDomainMap COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_lstring  var_cas_domainName ;
      inLexique.assignFromAttribute_att_token (var_cas_domainName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_id) COMMA_HERE) ;
      const GGS_typeDomainMap  _temp_6537 = var_cas_ioDomainMap ;
      if (_temp_6537.isBuilt ()) {
        _temp_6537 (HERE)->method_searchKey (inLexique, var_cas_domainName, var_cas_outDomain COMMA_SOURCE_FILE_AT_LINE (268)) ;
      }
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'analyserFormule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_analyserFormule_syntaxeBDD_276_22_ (lexiqueBDD & inLexique,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeListeCalculs  &var_cas_listeCalculs,
                                GGS_luint  var_cas_afficherBDD) {
  GGS_lstring  var_cas_nomFormule ;
  inLexique.assignFromAttribute_att_token (var_cas_nomFormule) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_id) COMMA_HERE) ;
  GGS_typeTableVariablesBool  var_cas_tableVariables ;
  GGS_uint  var_cas_bddSlot ;
  GGS_typeFormalArgumentsList  var_cas_listeArgFormelsBool ;
  nt_argsFormelsFormule_ (inLexique, var_cas_tableVariables, var_cas_bddSlot, var_cas_ioDomainMap, var_cas_listeArgFormelsBool) ;
  GGS_typeCalcul  var_cas_calcul ;
  nt_type_formule_ (inLexique, var_cas_tableVariables, var_cas_bddSlot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_nomFormule, var_cas_listeArgFormelsBool, var_cas_afficherBDD, var_cas_calcul) ;
  var_cas_listeCalculs._addAssign_operation (var_cas_calcul) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'argsFormelsFormule'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_argsFormelsFormule_syntaxeBDD_311_25_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  &var_cas_tableVariables,
                                GGS_uint  &var_cas_outBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeFormalArgumentsList  &var_cas_listeArgFormelsBool) {
  var_cas_tableVariables = GGS_typeTableVariablesBool ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outBDDslot = GGS_uint (0U) ;
  switch (select_syntaxeBDD_5 (inLexique)) {
    case 1 : {
      var_cas_listeArgFormelsBool = GGS_typeFormalArgumentsList ::constructor_emptyList () ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__5B_) COMMA_HERE) ;
      nt_declarations_ (inLexique, var_cas_tableVariables, var_cas_outBDDslot, var_cas_ioDomainMap, var_cas_listeArgFormelsBool) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__5D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "exploreRecordDomain"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_exploreRecordDomain (C_Compiler & inLexique,
                                const GGS_typeDomainMap   var_cas_inRecordMap,
                                GGS_typeTableVariablesBool  & var_cas_outMap,
                                GGS_uint  & var_cas_ioBDDslot,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_exploreRecordDomain at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_typeTableVariablesBool ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_typeDomainMap::cEnumerator enumerator_8446 (var_cas_inRecordMap, true) ;
    const GGS_typeDomainMap::cElement * operand_8446 = NULL ;
    while (((operand_8446 = enumerator_8446.nextObject ()))) {
      macroValidPointer (operand_8446) ;
      { const GGS_typeDomain _var_9309 = operand_8446->mInfo.mDomain ; // CAST instruction
        if (_var_9309.getPtr () != NULL) {
          macroValidPointer (_var_9309.getPtr ()) ;
          if (dynamic_cast <cPtr_typeDirectDomain *> (_var_9309.getPtr ()) != NULL) {
            const GGS_typeDirectDomain var_cas_dd (_var_9309.getPtr ()) ;
            GGS_luint  var_cas_slot ;
            var_cas_slot = GGS_luint ::constructor_new (inLexique, var_cas_ioBDDslot, GGS_location (inLexique) COMMA_HERE) ;
            GGS_typeVariableDescriptor  var_cas_v ;
            var_cas_v = GGS_typeDirectVariable ::constructor_new (inLexique, var_cas_slot, var_cas_dd.reader_mBitsCount (inLexique COMMA_SOURCE_FILE_AT_LINE (347)), var_cas_dd.reader_mLowBound (inLexique COMMA_SOURCE_FILE_AT_LINE (347)), var_cas_dd.reader_mHighBound (inLexique COMMA_SOURCE_FILE_AT_LINE (347)) COMMA_HERE) ;
            var_cas_outMap.modifier_insertKey (inLexique, operand_8446->mKey, var_cas_v COMMA_SOURCE_FILE_AT_LINE (348)) ;
            var_cas_ioBDDslot = var_cas_ioBDDslot.add_operation (inLexique, var_cas_dd.reader_mBitsCount (inLexique COMMA_SOURCE_FILE_AT_LINE (349)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (349)) COMMA_SOURCE_FILE_AT_LINE (349)) ;
          }else if (dynamic_cast <cPtr_typeRecordDomain *> (_var_9309.getPtr ()) != NULL) {
            const GGS_typeRecordDomain var_cas_rd (_var_9309.getPtr ()) ;
            GGS_typeTableVariablesBool  var_cas_localMap ;
            ::routine_exploreRecordDomain (inLexique,  var_cas_rd.reader_mRecordMap (inLexique COMMA_SOURCE_FILE_AT_LINE (352)),  var_cas_localMap,  var_cas_ioBDDslot,  var_cas_inErrorLocation COMMA_SOURCE_FILE_AT_LINE (352)) ;
            GGS_typeVariableDescriptor  var_cas_v ;
            var_cas_v = GGS_typeRecordVariable ::constructor_new (inLexique, var_cas_localMap COMMA_HERE) ;
            var_cas_outMap.modifier_insertKey (inLexique, operand_8446->mKey, var_cas_v COMMA_SOURCE_FILE_AT_LINE (354)) ;
          }else{
            var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("a aDomain was expected here ; I found ")).operator_concat (operand_8446->mInfo.mDomain.reader_messageDomainType (inLexique COMMA_SOURCE_FILE_AT_LINE (356))) COMMA_SOURCE_FILE_AT_LINE (357)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_exploreRecordDomain\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'declarations'              *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_declarations_syntaxeBDD_363_19_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  &var_cas_tableVariables,
                                GGS_uint  &var_cas_ioBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeFormalArgumentsList  &var_cas_listeArgFormelsBool) {
  var_cas_listeArgFormelsBool = GGS_typeFormalArgumentsList ::constructor_emptyList () ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
        GGS_lstring  var_cas_nom ;
        inLexique.assignFromAttribute_att_token (var_cas_nom) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_id) COMMA_HERE) ;
        GGS_typeDomain  var_cas_aDomain ;
        nt_dimension_ (inLexique, var_cas_ioDomainMap, var_cas_aDomain) ;
        { const GGS_typeDomain _var_11822 = var_cas_aDomain ; // CAST instruction
          if (_var_11822.getPtr () != NULL) {
            macroValidPointer (_var_11822.getPtr ()) ;
            if (dynamic_cast <cPtr_typeDirectDomain *> (_var_11822.getPtr ()) != NULL) {
              const GGS_typeDirectDomain var_cas_dd (_var_11822.getPtr ()) ;
              GGS_luint  var_cas_slot ;
              var_cas_slot = GGS_luint ::constructor_new (inLexique, var_cas_ioBDDslot, GGS_location (inLexique) COMMA_HERE) ;
              GGS_typeVariableDescriptor  var_cas_v ;
              var_cas_v = GGS_typeDirectVariable ::constructor_new (inLexique, var_cas_slot, var_cas_dd.reader_mBitsCount (inLexique COMMA_SOURCE_FILE_AT_LINE (378)), var_cas_dd.reader_mLowBound (inLexique COMMA_SOURCE_FILE_AT_LINE (378)), var_cas_dd.reader_mHighBound (inLexique COMMA_SOURCE_FILE_AT_LINE (378)) COMMA_HERE) ;
              var_cas_tableVariables.modifier_insertKey (inLexique, var_cas_nom, var_cas_v COMMA_SOURCE_FILE_AT_LINE (379)) ;
              var_cas_ioBDDslot = var_cas_ioBDDslot.add_operation (inLexique, var_cas_dd.reader_mBitsCount (inLexique COMMA_SOURCE_FILE_AT_LINE (380)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (380)) COMMA_SOURCE_FILE_AT_LINE (380)) ;
              { const GGS_typeVariableDescriptor _var_10351 = var_cas_v ; // CAST instruction
                if (_var_10351.getPtr () != NULL) {
                  macroValidPointer (_var_10351.getPtr ()) ;
                  if (dynamic_cast <cPtr_typeDirectVariable *> (_var_10351.getPtr ()) != NULL) {
                    const GGS_typeDirectVariable var_cas_dv (_var_10351.getPtr ()) ;
                    var_cas_listeArgFormelsBool._addAssign_operation (var_cas_dv.reader_mIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (383)), var_cas_dd.reader_mBitsCount (inLexique COMMA_SOURCE_FILE_AT_LINE (383)), var_cas_dd.reader_mLowBound (inLexique COMMA_SOURCE_FILE_AT_LINE (383)), var_cas_dd.reader_mHighBound (inLexique COMMA_SOURCE_FILE_AT_LINE (383))) ;
                  }else{
                  const castBranchDescriptorType _castBranchDescriptor [1] = {
                    {& typeid (cPtr_typeDirectVariable), true}
                  } ;
                  var_cas_nom._castDefaultErrorMessage (inLexique, _castBranchDescriptor, 1, & typeid (* (_var_10351.getPtr ())) COMMA_SOURCE_FILE_AT_LINE (385)) ;
                  }
                }
              }
            }else if (dynamic_cast <cPtr_typeRecordDomain *> (_var_11822.getPtr ()) != NULL) {
              const GGS_typeRecordDomain var_cas_rd (_var_11822.getPtr ()) ;
              GGS_typeTableVariablesBool  var_cas_recordMap ;
              GGS_location  var_cas_errorLocation ;
              var_cas_errorLocation = GGS_location (inLexique) ;
              ::routine_exploreRecordDomain (inLexique,  var_cas_rd.reader_mRecordMap (inLexique COMMA_SOURCE_FILE_AT_LINE (389)),  var_cas_recordMap,  var_cas_ioBDDslot,  var_cas_errorLocation COMMA_SOURCE_FILE_AT_LINE (389)) ;
              GGS_typeVariableDescriptor  var_cas_v ;
              var_cas_v = GGS_typeRecordVariable ::constructor_new (inLexique, var_cas_recordMap COMMA_HERE) ;
              var_cas_tableVariables.modifier_insertKey (inLexique, var_cas_nom, var_cas_v COMMA_SOURCE_FILE_AT_LINE (391)) ;
              ::routine_buildFormalArgsList (inLexique,  var_cas_v,  var_cas_listeArgFormelsBool,  var_cas_errorLocation COMMA_SOURCE_FILE_AT_LINE (392)) ;
            }else{
              var_cas_nom.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("a aDomain was expected here ; I found ")).operator_concat (var_cas_aDomain.reader_messageDomainType (inLexique COMMA_SOURCE_FILE_AT_LINE (410))) COMMA_SOURCE_FILE_AT_LINE (411)) ;
            }
          }
        }
      switch (select_repeat_syntaxeBDD_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'dimension'                *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_dimension_syntaxeBDD_421_16_ (lexiqueBDD & inLexique,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeDomain  &var_cas_outDomain) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__3A_) COMMA_HERE) ;
  switch (select_syntaxeBDD_7 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_bool) COMMA_HERE) ;
      GGS_luint  var_cas_lowBound ;
      var_cas_lowBound = GGS_luint ::constructor_new (inLexique, GGS_uint (0U), GGS_location (inLexique) COMMA_HERE) ;
      GGS_luint  var_cas_highBound ;
      GGS_luint  var_cas_dim ;
      switch (select_syntaxeBDD_8 (inLexique)) {
        case 1 : {
          var_cas_highBound = GGS_luint ::constructor_new (inLexique, GGS_uint (1U), GGS_location (inLexique) COMMA_HERE) ;
          var_cas_dim = GGS_luint ::constructor_new (inLexique, GGS_uint (1U), GGS_location (inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__5B_) COMMA_HERE) ;
          inLexique.assignFromAttribute_att_valeur (var_cas_dim) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_nombre) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__5D_) COMMA_HERE) ;
          if (var_cas_dim.isBuilt ()) {
            ::routine_getHighBound (inLexique,  var_cas_dim,  var_cas_highBound COMMA_SOURCE_FILE_AT_LINE (438)) ;
          }
          } break ;
        default :
          break ;
      }
      var_cas_outDomain = GGS_typeDirectDomain ::constructor_new (inLexique, var_cas_lowBound, var_cas_highBound, var_cas_dim COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_domainName ;
      inLexique.assignFromAttribute_att_token (var_cas_domainName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_id) COMMA_HERE) ;
      const GGS_typeDomainMap  _temp_12627 = var_cas_ioDomainMap ;
      if (_temp_12627.isBuilt ()) {
        _temp_12627 (HERE)->method_searchKey (inLexique, var_cas_domainName, var_cas_outDomain COMMA_SOURCE_FILE_AT_LINE (444)) ;
      }
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'type_formule'              *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_type_formule_syntaxeBDD_452_19_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_lstring  var_cas_nomFormule,
                                GGS_typeFormalArgumentsList  var_cas_listeArgFormelsBool,
                                GGS_luint  var_cas_afficherBDD,
                                GGS_typeCalcul  &var_cas_calcul) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__3A__3D_) COMMA_HERE) ;
  GGS_luint  var_cas_numero ;
  GGS_typeFormule  var_cas_f ;
  GGS_typeTableVariablesBool  var_cas_tableVariablesLocales ;
  var_cas_tableVariablesLocales = var_cas_tableVariables ;
  nt_formule_ (inLexique, var_cas_tableVariablesLocales, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_f) ;
  GGS_extern_bdd var_cas_unusedBDD ;
  var_cas_unusedBDD = GGS_extern_bdd::constructor_empty (inLexique COMMA_HERE) ;
  var_cas_tableFormules.modifier_insertKeyGetIndex (inLexique, var_cas_nomFormule, var_cas_numero, var_cas_listeArgFormelsBool, var_cas_unusedBDD COMMA_SOURCE_FILE_AT_LINE (474)) ;
  var_cas_calcul = GGS_typeCalculSimple ::constructor_new (inLexique, var_cas_numero, var_cas_f, var_cas_nomFormule, var_cas_tableVariables, var_cas_afficherBDD COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'type_formule'              *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_type_formule_syntaxeBDD_480_19_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_lstring  var_cas_nomFormule,
                                GGS_typeFormalArgumentsList  var_cas_listeArgFormelsBool,
                                GGS_luint  var_cas_afficherBDD,
                                GGS_typeCalcul  &var_cas_calcul) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__2B__3D_) COMMA_HERE) ;
  GGS_lbool  var_cas_signe ;
  var_cas_signe = GGS_lbool ::constructor_new (inLexique, GGS_bool (true), GGS_location (inLexique) COMMA_HERE) ;
  GGS_luint  var_cas_numero ;
  GGS_extern_bdd var_cas_unusedBDD ;
  var_cas_unusedBDD = GGS_extern_bdd::constructor_empty (inLexique COMMA_HERE) ;
  var_cas_tableFormules.modifier_insertKeyGetIndex (inLexique, var_cas_nomFormule, var_cas_numero, var_cas_listeArgFormelsBool, var_cas_unusedBDD COMMA_SOURCE_FILE_AT_LINE (494)) ;
  GGS_typeFormule  var_cas_f ;
  GGS_typeTableVariablesBool  var_cas_tableVariablesLocales ;
  var_cas_tableVariablesLocales = var_cas_tableVariables ;
  nt_formule_ (inLexique, var_cas_tableVariablesLocales, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_f) ;
  var_cas_calcul = GGS_typeCalculIteratif ::constructor_new (inLexique, var_cas_numero, var_cas_f, var_cas_nomFormule, var_cas_tableVariables, var_cas_signe, var_cas_afficherBDD COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'type_formule'              *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_type_formule_syntaxeBDD_509_19_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_lstring  var_cas_nomFormule,
                                GGS_typeFormalArgumentsList  var_cas_listeArgFormelsBool,
                                GGS_luint  var_cas_afficherBDD,
                                GGS_typeCalcul  &var_cas_calcul) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__2D__3D_) COMMA_HERE) ;
  GGS_lbool  var_cas_signe ;
  var_cas_signe = GGS_lbool ::constructor_new (inLexique, GGS_bool (false), GGS_location (inLexique) COMMA_HERE) ;
  GGS_luint  var_cas_numero ;
  GGS_extern_bdd var_cas_unusedBDD ;
  var_cas_unusedBDD = GGS_extern_bdd::constructor_empty (inLexique COMMA_HERE) ;
  var_cas_tableFormules.modifier_insertKeyGetIndex (inLexique, var_cas_nomFormule, var_cas_numero, var_cas_listeArgFormelsBool, var_cas_unusedBDD COMMA_SOURCE_FILE_AT_LINE (523)) ;
  GGS_typeFormule  var_cas_f ;
  GGS_typeTableVariablesBool  var_cas_tableVariablesLocales ;
  var_cas_tableVariablesLocales = var_cas_tableVariables ;
  nt_formule_ (inLexique, var_cas_tableVariablesLocales, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_f) ;
  var_cas_calcul = GGS_typeCalculIteratif ::constructor_new (inLexique, var_cas_numero, var_cas_f, var_cas_nomFormule, var_cas_tableVariables, var_cas_signe, var_cas_afficherBDD COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'formule'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_formule_syntaxeBDD_541_14_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  nt_egalite_formule_ (inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_formule) ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
      switch (select_repeat_syntaxeBDD_9 (inLexique)) {
        case 2 : {
          GGS_luint  var_cas_comparaison ;
          inLexique.assignFromAttribute_att_valeur (var_cas_comparaison) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_comp) COMMA_HERE) ;
          GGS_typeFormule  var_cas_g ;
          GGS_typeFormule  var_cas_h ;
          var_cas_h = var_cas_formule ;
          nt_egalite_formule_ (inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_g) ;
          var_cas_formule = GGS_typeComparaisonFormules ::constructor_new (inLexique, var_cas_comparaison, var_cas_h, var_cas_g COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__2D__3E_) COMMA_HERE) ;
          GGS_typeFormule  var_cas_g ;
          GGS_typeFormule  var_cas_h ;
          var_cas_h = var_cas_formule ;
          nt_egalite_formule_ (inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_g) ;
          var_cas_formule = GGS_typeFormuleImplique ::constructor_new (inLexique, var_cas_h, var_cas_g COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'egalite_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_egalite_formule_syntaxeBDD_588_22_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  nt_terme_formule_ (inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_formule) ;
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
      switch (select_repeat_syntaxeBDD_10 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__7C_) COMMA_HERE) ;
          GGS_typeFormule  var_cas_g ;
          GGS_typeFormule  var_cas_h ;
          var_cas_h = var_cas_formule ;
          nt_terme_formule_ (inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_g) ;
          var_cas_formule = GGS_typeFormuleOu ::constructor_new (inLexique, var_cas_h, var_cas_g COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'terme_formule'              *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_terme_formule_syntaxeBDD_622_20_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  nt_facteur_formule_ (inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_formule) ;
  { bool syntaxRepeat_11 = true ;
    while (syntaxRepeat_11) {
      switch (select_repeat_syntaxeBDD_11 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__26_) COMMA_HERE) ;
          GGS_typeFormule  var_cas_g ;
          GGS_typeFormule  var_cas_h ;
          var_cas_h = var_cas_formule ;
          nt_facteur_formule_ (inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_g) ;
          var_cas_formule = GGS_typeFormuleEt ::constructor_new (inLexique, var_cas_h, var_cas_g COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_11 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_655_22_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__28_) COMMA_HERE) ;
  nt_formule_ (inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_formule) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_675_22_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  /* var_cas_tableVariables */,
                                GGS_uint  /* var_cas_inBDDslot */,
                                GGS_typeDomainMap  &/* var_cas_ioDomainMap */,
                                GGS_typeTableFormules  &/* var_cas_tableFormules */,
                                GGS_typeFormule  &var_cas_formule) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_true) COMMA_HERE) ;
  var_cas_formule = GGS_typeFormuleTrue ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_688_22_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  /* var_cas_inBDDslot */,
                                GGS_typeDomainMap  &/* var_cas_ioDomainMap */,
                                GGS_typeTableFormules  &/* var_cas_tableFormules */,
                                GGS_typeFormule  &var_cas_formule) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__7B_) COMMA_HERE) ;
  GGS_luint  var_cas_varIndex ;
  GGS_luint  var_cas_bitSize ;
  GGS_luint  var_cas_lowBound ;
  GGS_luint  var_cas_highBound ;
  GGS_location  var_cas_errorLocation ;
  nt_parse_scalar_argument_ (inLexique, var_cas_tableVariables, var_cas_varIndex, var_cas_bitSize, var_cas_lowBound, var_cas_highBound, var_cas_errorLocation) ;
  GGS_luint  var_cas_comparaison ;
  inLexique.assignFromAttribute_att_valeur (var_cas_comparaison) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_comp) COMMA_HERE) ;
  nt_comparaisonVariable_ (inLexique, var_cas_tableVariables, var_cas_varIndex, var_cas_bitSize, var_cas_lowBound, var_cas_highBound, var_cas_comparaison, var_cas_formule) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'comparaisonVariable'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_comparaisonVariable_syntaxeBDD_714_26_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  /* var_cas_tableVariables */,
                                GGS_luint  var_cas_numero,
                                GGS_luint  var_cas_dim,
                                GGS_luint  var_cas_lowBound,
                                GGS_luint  var_cas_highBound,
                                GGS_luint  var_cas_comparaison,
                                GGS_typeFormule  &var_cas_formule) {
  GGS_luint  var_cas_valeur ;
  inLexique.assignFromAttribute_att_valeur (var_cas_valeur) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_nombre) COMMA_HERE) ;
  if (var_cas_dim.isBuilt () &&
      var_cas_valeur.isBuilt ()) {
    ::routine_verifierDimensionValeurCorrecte (inLexique,  var_cas_dim,  var_cas_valeur COMMA_SOURCE_FILE_AT_LINE (725)) ;
  }
  var_cas_formule = GGS_typeFormuleComparaisonValeur ::constructor_new (inLexique, var_cas_numero, var_cas_dim, var_cas_lowBound, var_cas_highBound, var_cas_comparaison, var_cas_valeur COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'comparaisonVariable'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_comparaisonVariable_syntaxeBDD_731_26_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_luint  var_cas_inLeftVarIndex,
                                GGS_luint  var_cas_inLeftBitSize,
                                GGS_luint  var_cas_inLeftLowBound,
                                GGS_luint  var_cas_inLeftHighBound,
                                GGS_luint  var_cas_comparaison,
                                GGS_typeFormule  &var_cas_formule) {
  GGS_luint  var_cas_rightVarIndex ;
  GGS_luint  var_cas_rightBitSize ;
  GGS_luint  var_cas_rightLowBound ;
  GGS_luint  var_cas_rightHighBound ;
  GGS_location  var_cas_errorLocation ;
  nt_parse_scalar_argument_ (inLexique, var_cas_tableVariables, var_cas_rightVarIndex, var_cas_rightBitSize, var_cas_rightLowBound, var_cas_rightHighBound, var_cas_errorLocation) ;
  if (var_cas_inLeftBitSize.isBuilt () &&
      var_cas_rightBitSize.isBuilt ()) {
    ::routine_verifierMemesDimensions (inLexique,  var_cas_inLeftBitSize,  var_cas_rightBitSize COMMA_SOURCE_FILE_AT_LINE (746)) ;
  }
  var_cas_formule = GGS_typeFormuleComparaisonVariable ::constructor_new (inLexique, var_cas_inLeftVarIndex, var_cas_inLeftBitSize, var_cas_inLeftLowBound, var_cas_inLeftHighBound, var_cas_comparaison, var_cas_rightVarIndex, var_cas_rightLowBound, var_cas_rightHighBound COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_754_22_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  /* var_cas_tableVariables */,
                                GGS_uint  /* var_cas_inBDDslot */,
                                GGS_typeDomainMap  &/* var_cas_ioDomainMap */,
                                GGS_typeTableFormules  &/* var_cas_tableFormules */,
                                GGS_typeFormule  &var_cas_formule) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_false) COMMA_HERE) ;
  var_cas_formule = GGS_typeFormuleFalse ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_767_22_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__7E_) COMMA_HERE) ;
  GGS_typeFormule  var_cas_f ;
  nt_facteur_formule_ (inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_f) ;
  var_cas_formule = GGS_typeFormuleNon ::constructor_new (inLexique, var_cas_f COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_788_22_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_if) COMMA_HERE) ;
  GGS_typeFormule  var_cas_operande1 ;
  nt_formule_ (inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_operande1) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_then) COMMA_HERE) ;
  GGS_typeFormule  var_cas_operande2 ;
  nt_formule_ (inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_operande2) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_else) COMMA_HERE) ;
  GGS_typeFormule  var_cas_operande3 ;
  nt_formule_ (inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_operande3) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_end) COMMA_HERE) ;
  var_cas_formule = GGS_typeFormuleIte ::constructor_new (inLexique, var_cas_operande1, var_cas_operande2, var_cas_operande3 COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_828_22_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__21_) COMMA_HERE) ;
  GGS_typeFormalArgumentsList  var_cas_listeNumVarsBool ;
  GGS_typeTableVariablesBool  var_cas_tableLocaleVariables ;
  var_cas_tableLocaleVariables = var_cas_tableVariables ;
  GGS_uint  var_cas_bddSlot ;
  var_cas_bddSlot = var_cas_inBDDslot ;
  nt_declarations_ (inLexique, var_cas_tableLocaleVariables, var_cas_bddSlot, var_cas_ioDomainMap, var_cas_listeNumVarsBool) ;
  GGS_typeFormule  var_cas_f ;
  nt_facteur_formule_ (inLexique, var_cas_tableLocaleVariables, var_cas_bddSlot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_f) ;
  GGS_typeFormule  var_cas_not_f ;
  var_cas_not_f = GGS_typeFormuleNon ::constructor_new (inLexique, var_cas_f COMMA_HERE) ;
  GGS_extern_bdd var_cas_unusedBDD ;
  var_cas_unusedBDD = GGS_extern_bdd::constructor_empty (inLexique COMMA_HERE) ;
  GGS_typeFormule  var_cas_exist_not_f ;
  var_cas_exist_not_f = GGS_typeFormuleExist ::constructor_new (inLexique, var_cas_listeNumVarsBool, var_cas_not_f, var_cas_unusedBDD COMMA_HERE) ;
  var_cas_formule = GGS_typeFormuleNon ::constructor_new (inLexique, var_cas_exist_not_f COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_862_22_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__3F_) COMMA_HERE) ;
  GGS_typeFormalArgumentsList  var_cas_listeNumVarsBool ;
  GGS_typeTableVariablesBool  var_cas_tableLocaleVariables ;
  var_cas_tableLocaleVariables = var_cas_tableVariables ;
  GGS_uint  var_cas_bddSlot ;
  var_cas_bddSlot = var_cas_inBDDslot ;
  nt_declarations_ (inLexique, var_cas_tableLocaleVariables, var_cas_bddSlot, var_cas_ioDomainMap, var_cas_listeNumVarsBool) ;
  GGS_typeFormule  var_cas_f ;
  nt_facteur_formule_ (inLexique, var_cas_tableLocaleVariables, var_cas_bddSlot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_f) ;
  GGS_extern_bdd var_cas_unusedBDD ;
  var_cas_unusedBDD = GGS_extern_bdd::constructor_empty (inLexique COMMA_HERE) ;
  var_cas_formule = GGS_typeFormuleExist ::constructor_new (inLexique, var_cas_listeNumVarsBool, var_cas_f, var_cas_unusedBDD COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_893_22_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  /* var_cas_inBDDslot */,
                                GGS_typeDomainMap  &/* var_cas_ioDomainMap */,
                                GGS_typeTableFormules  &/* var_cas_tableFormules */,
                                GGS_typeFormule  &var_cas_formule) {
  GGS_luint  var_cas_varIndex ;
  GGS_luint  var_cas_bitSize ;
  GGS_luint  var_cas_lowBound ;
  GGS_luint  var_cas_highBound ;
  GGS_location  var_cas_errorLocation ;
  nt_parse_scalar_argument_ (inLexique, var_cas_tableVariables, var_cas_varIndex, var_cas_bitSize, var_cas_lowBound, var_cas_highBound, var_cas_errorLocation) ;
  if (var_cas_bitSize.isBuilt () &&
      var_cas_errorLocation.isBuilt ()) {
    ::routine_verifierDimensionUn (inLexique,  var_cas_bitSize,  var_cas_errorLocation COMMA_SOURCE_FILE_AT_LINE (906)) ;
  }
  var_cas_formule = GGS_typeFormuleVar ::constructor_new (inLexique, var_cas_varIndex, var_cas_lowBound, var_cas_highBound COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_912_22_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  /* var_cas_inBDDslot */,
                                GGS_typeDomainMap  &/* var_cas_ioDomainMap */,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__23_) COMMA_HERE) ;
  GGS_lstring  var_cas_nom ;
  GGS_luint  var_cas_numero ;
  inLexique.assignFromAttribute_att_token (var_cas_nom) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_id) COMMA_HERE) ;
  GGS_typeFormalArgumentsList  var_cas_listeArgsFormelsBool ;
  GGS_extern_bdd automatic_var_0 ;
  const GGS_typeTableFormules  _temp_25014 = var_cas_tableFormules ;
  if (_temp_25014.isBuilt ()) {
    _temp_25014 (HERE)->method_searchKeyGetIndex (inLexique, var_cas_nom, var_cas_numero, var_cas_listeArgsFormelsBool, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (924)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__5B_) COMMA_HERE) ;
  GGS_typeActualArgumentsList  var_cas_listeArgsEffectifsBool ;
  var_cas_listeArgsEffectifsBool = GGS_typeActualArgumentsList ::constructor_emptyList () ;
  { bool syntaxRepeat_12 = true ;
    while (syntaxRepeat_12) {
        GGS_typeVariableDescriptor  var_cas_varDescriptor ;
        GGS_location  var_cas_errorLocation ;
        nt_parse_argument_ (inLexique, var_cas_tableVariables, var_cas_varDescriptor, var_cas_errorLocation) ;
        { const GGS_typeVariableDescriptor _var_25845 = var_cas_varDescriptor ; // CAST instruction
          if (_var_25845.getPtr () != NULL) {
            macroValidPointer (_var_25845.getPtr ()) ;
            if (dynamic_cast <cPtr_typeDirectVariable *> (_var_25845.getPtr ()) != NULL) {
              const GGS_typeDirectVariable var_cas_dv (_var_25845.getPtr ()) ;
              var_cas_listeArgsEffectifsBool._addAssign_operation (var_cas_dv.reader_mIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (933)), var_cas_dv.reader_mBitSize (inLexique COMMA_SOURCE_FILE_AT_LINE (933)), var_cas_dv.reader_mLowBound (inLexique COMMA_SOURCE_FILE_AT_LINE (933)), var_cas_dv.reader_mHighBound (inLexique COMMA_SOURCE_FILE_AT_LINE (933)), var_cas_errorLocation) ;
            }else if (dynamic_cast <cPtr_typeRecordVariable *> (_var_25845.getPtr ()) != NULL) {
              const GGS_typeRecordVariable var_cas_rv (_var_25845.getPtr ()) ;
              ::routine_buildActualArgsList (inLexique,  var_cas_rv.reader_mMap (inLexique COMMA_SOURCE_FILE_AT_LINE (935)),  var_cas_listeArgsEffectifsBool,  var_cas_errorLocation COMMA_SOURCE_FILE_AT_LINE (935)) ;
            }else{
              var_cas_errorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("a variable was expected here ; I found ")).operator_concat (var_cas_varDescriptor.reader_variableDescriptorErrorMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (938))) COMMA_SOURCE_FILE_AT_LINE (939)) ;
            }
          }
        }
      switch (select_repeat_syntaxeBDD_12 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_12 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__5D_) COMMA_HERE) ;
  GGS_location  var_cas_positionFinListe ;
  var_cas_positionFinListe = GGS_location (inLexique) ;
  ::routine_verifierNombreArgumentsBool (inLexique,  var_cas_listeArgsFormelsBool,  var_cas_listeArgsEffectifsBool,  var_cas_positionFinListe COMMA_SOURCE_FILE_AT_LINE (946)) ;
  GGS_extern_bdd var_cas_unusedBDD ;
  var_cas_unusedBDD = GGS_extern_bdd::constructor_empty (inLexique COMMA_HERE) ;
  GGS_lbool  var_cas_unusedBool ;
  var_cas_unusedBool = GGS_lbool ::constructor_new (inLexique, GGS_bool (false), GGS_location (inLexique) COMMA_HERE) ;
  var_cas_formule = GGS_typeFormuleFor ::constructor_new (inLexique, var_cas_numero, var_cas_listeArgsEffectifsBool, var_cas_unusedBDD, var_cas_unusedBool COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'parse_argument'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_parse_argument_syntaxeBDD_954_21_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  &var_cas_ioVarMap,
                                GGS_typeVariableDescriptor  &var_cas_outVarDescriptor,
                                GGS_location  &var_cas_outErrorLocation) {
  GGS_lstring  var_cas_varName ;
  inLexique.assignFromAttribute_att_token (var_cas_varName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_id) COMMA_HERE) ;
  var_cas_outErrorLocation = var_cas_varName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (961)) ;
  const GGS_typeTableVariablesBool  _temp_26568 = var_cas_ioVarMap ;
  if (_temp_26568.isBuilt ()) {
    _temp_26568 (HERE)->method_searchKey (inLexique, var_cas_varName, var_cas_outVarDescriptor COMMA_SOURCE_FILE_AT_LINE (962)) ;
  }
  { bool syntaxRepeat_13 = true ;
    while (syntaxRepeat_13) {
      switch (select_repeat_syntaxeBDD_13 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1__2E_) COMMA_HERE) ;
          GGS_typeRecordVariable  var_cas_rv ;
          var_cas_rv = GGS_typeRecordVariable::castFrom (inLexique, var_cas_outVarDescriptor.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (969)) ;
          GGS_typeTableVariablesBool  var_cas_fieldMap ;
          var_cas_fieldMap = var_cas_rv.reader_mMap (inLexique COMMA_SOURCE_FILE_AT_LINE (970)) ;
          GGS_lstring  var_cas_fieldName ;
          inLexique.assignFromAttribute_att_token (var_cas_fieldName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (lexiqueBDD::lexiqueBDD_1_id) COMMA_HERE) ;
          var_cas_outErrorLocation = var_cas_fieldName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (973)) ;
          const GGS_typeTableVariablesBool  _temp_27051 = var_cas_fieldMap ;
          if (_temp_27051.isBuilt ()) {
            _temp_27051 (HERE)->method_searchKey (inLexique, var_cas_fieldName, var_cas_outVarDescriptor COMMA_SOURCE_FILE_AT_LINE (974)) ;
          }
          } break ;
        default :
          syntaxRepeat_13 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'parse_scalar_argument'          *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_parse_scalar_argument_syntaxeBDD_980_28_ (lexiqueBDD & inLexique,
                                GGS_typeTableVariablesBool  &var_cas_ioVarMap,
                                GGS_luint  &var_cas_outVarIndex,
                                GGS_luint  &var_cas_outBitSize,
                                GGS_luint  &var_cas_outLowBound,
                                GGS_luint  &var_cas_outHighBound,
                                GGS_location  &var_cas_outErrorLocation) {
  GGS_typeVariableDescriptor  var_cas_v ;
  nt_parse_argument_ (inLexique, var_cas_ioVarMap, var_cas_v, var_cas_outErrorLocation) ;
  GGS_typeDirectVariable  var_cas_variable ;
  var_cas_variable = GGS_typeDirectVariable::castFrom (inLexique, var_cas_v.getPtr (), false, var_cas_outErrorLocation COMMA_SOURCE_FILE_AT_LINE (992)) ;
  var_cas_outVarIndex = var_cas_variable.reader_mIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (993)) ;
  var_cas_outBitSize = var_cas_variable.reader_mBitSize (inLexique COMMA_SOURCE_FILE_AT_LINE (994)) ;
  var_cas_outLowBound = var_cas_variable.reader_mLowBound (inLexique COMMA_SOURCE_FILE_AT_LINE (995)) ;
  var_cas_outHighBound = var_cas_variable.reader_mHighBound (inLexique COMMA_SOURCE_FILE_AT_LINE (996)) ;
}

//---------------------------------------------------------------------------*

