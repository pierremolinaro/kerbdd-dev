//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'syntaxeBDD.cpp'                            *
//               Generated by version 0.14.0 (LL(1) grammar)                 *
//                     january 20th, 2005, at 12h4'35"                       *
//                                                                           *
// This program is free software; you can redistribute it and/or modify it   *
// under the terms of the GNU General Public License as published by the     *
// Free Software Foundation.                                                 *
//                                                                           *
// This program is distributed in the hope it will be useful, but WITHOUT    *
// ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or     *
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for  *
// more details.                                                             *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "files/C_text_file_write.h"
#include "syntaxeBDD.h"

//---------------------------------------------------------------------------*
//                                                                           *
//               Include directives generated by extern types                *
//                                                                           *
//---------------------------------------------------------------------------*

#include "grammaireBDD.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'axiomeBDD'                *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_axiomeBDD_syntaxeBDD_129_17_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeListeCalculs  &var_cas_listeCalculs,
                                GGS_typeDomainMap  &var_cas_ioDomainMap) {
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_syntaxeBDD_0 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_domain) ;
          GGS_lstring  var_cas_domainName ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_id) ;
          var_cas_domainName.defineAttribute (lexique_var_.att_token, lexique_var_) ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3A) ;
          GGS_typeDomain  var_cas_d ;
          nt_domainDefinition_ (lexique_var_, var_cas_ioDomainMap, var_cas_d) ;
          insertKey_typeDomainMap (lexique_var_,
                                          var_cas_ioDomainMap,
                                          var_cas_domainName,
                                          var_cas_d,
                                          NULL) ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        case 3 : {
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_dimension) ;
          GGS_lstring  var_cas_nomDimension ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_id) ;
          var_cas_nomDimension.defineAttribute (lexique_var_.att_token, lexique_var_) ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3A) ;
          GGS_luint  var_cas_dimension ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
          var_cas_dimension.defineAttribute (lexique_var_.att_valeur, lexique_var_) ;
            var_cas_dimension.reader_location ().signalGGSSemanticWarning (lexique_var_, GGS_string (true, "old style declaration : now use domain declaration")) ;
          GGS_luint  var_cas_lowBound ;
          var_cas_lowBound = GGS_luint::constructor_new (GGS_uint (true, 0UL), GGS_location (lexique_var_)) ;
          GGS_luint  var_cas_highBound ;
          if (var_cas_dimension.isBuilt ()) {
            ::getHighBound (lexique_var_,  var_cas_dimension,  var_cas_highBound) ;
          }
          GGS_typeDomain  var_cas_d ;
          var_cas_d = GGS_typeDirectDomain::constructor_new (var_cas_lowBound, var_cas_highBound, var_cas_dimension) ;
          insertKey_typeDomainMap (lexique_var_,
                                          var_cas_ioDomainMap,
                                          var_cas_nomDimension,
                                          var_cas_d,
                                          NULL) ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        case 4 : {
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_include) ;
          GGS_lstring  var_cas_nomFichierInclusion ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_string) ;
          var_cas_nomFichierInclusion.defineAttribute (lexique_var_.att_token, lexique_var_) ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          { lexiqueBDD scanner_ (lexique_var_.getGalgasIOptr ()) ;
            grammaireBDD grammar_ ;
            C_string sourceFileName ;
            if ((var_cas_nomFichierInclusion.getLength () > 0) && (var_cas_nomFichierInclusion (0 COMMA_HERE) != '/')) {
              sourceFileName << lexique_var_.getSourceFile ().getPath () << '/' ;
            }
            sourceFileName << var_cas_nomFichierInclusion ;
            try{
              scanner_.resetAndLoadSourceFromFile (sourceFileName) ;
              grammar_.startParsing_ (scanner_,
                                          var_cas_tableFormules,
                                          var_cas_listeCalculs,
                                          var_cas_ioDomainMap) ;
            }catch (const C_TextReadException & inFileReadError) {
              var_cas_nomFichierInclusion.signalSemanticError (lexique_var_, inFileReadError.what ()) ;
            }
          }
          } break ;
        case 5 : {
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_cache) ;
          GGS_luint  var_cas_dimensionCache ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
          var_cas_dimensionCache.defineAttribute (lexique_var_.att_valeur, lexique_var_) ;
          GGS_typeCalcul  var_cas_calcul ;
          var_cas_calcul = GGS_typeDimensionnerCache::constructor_new (var_cas_dimensionCache) ;
          var_cas_listeCalculs.addAssign_operation (var_cas_calcul) ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        case 6 : {
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_map) ;
          GGS_luint  var_cas_dimensionTable ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
          var_cas_dimensionTable.defineAttribute (lexique_var_.att_valeur, lexique_var_) ;
          GGS_typeCalcul  var_cas_calcul ;
          var_cas_calcul = GGS_typeDimensionnerTable::constructor_new (var_cas_dimensionTable) ;
          var_cas_listeCalculs.addAssign_operation (var_cas_calcul) ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        case 7 : {
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_bdd) ;
          GGS_typeCalcul  var_cas_calcul ;
          var_cas_calcul = GGS_typeAfficherBilan::constructor_new () ;
          var_cas_listeCalculs.addAssign_operation (var_cas_calcul) ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        case 8 : {
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_display) ;
          GGS_luint  var_cas_afficherBDD ;
          var_cas_afficherBDD = GGS_luint::constructor_new (GGS_uint (true, 1UL), GGS_location (lexique_var_)) ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__23) ;
          nt_analyserFormule_ (lexique_var_, var_cas_tableFormules, var_cas_ioDomainMap, var_cas_listeCalculs, var_cas_afficherBDD) ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        case 9 : {
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_dump) ;
          GGS_luint  var_cas_afficherBDD ;
          var_cas_afficherBDD = GGS_luint::constructor_new (GGS_uint (true, 2UL), GGS_location (lexique_var_)) ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__23) ;
          nt_analyserFormule_ (lexique_var_, var_cas_tableFormules, var_cas_ioDomainMap, var_cas_listeCalculs, var_cas_afficherBDD) ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        case 10 : {
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_verify) ;
          GGS_luint  var_cas_afficherBDD ;
          var_cas_afficherBDD = GGS_luint::constructor_new (GGS_uint (true, 3UL), GGS_location (lexique_var_)) ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__23) ;
          nt_analyserFormule_ (lexique_var_, var_cas_tableFormules, var_cas_ioDomainMap, var_cas_listeCalculs, var_cas_afficherBDD) ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        case 11 : {
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__23) ;
          GGS_luint  var_cas_afficherBDD ;
          var_cas_afficherBDD = GGS_luint::constructor_new (GGS_uint (true, 0UL), GGS_location (lexique_var_)) ;
          nt_analyserFormule_ (lexique_var_, var_cas_tableFormules, var_cas_ioDomainMap, var_cas_listeCalculs, var_cas_afficherBDD) ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_end) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'domainDefinition'            *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_domainDefinition_syntaxeBDD_223_24_ (lexiqueBDD & lexique_var_,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeDomain  &var_cas_outDomain) {
  switch (select_syntaxeBDD_1 (lexique_var_)) {
    case 1 : {
      GGS_luint  var_cas_lowBound ;
      GGS_luint  var_cas_highBound ;
      switch (select_syntaxeBDD_2 (lexique_var_)) {
        case 1 : {
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
          var_cas_lowBound.defineAttribute (lexique_var_.att_valeur, lexique_var_) ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__2E_2E) ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
          var_cas_highBound.defineAttribute (lexique_var_.att_valeur, lexique_var_) ;
          } break ;
        case 2 : {
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_bool) ;
          var_cas_lowBound = GGS_luint::constructor_new (GGS_uint (true, 0UL), GGS_location (lexique_var_)) ;
          switch (select_syntaxeBDD_3 (lexique_var_)) {
            case 1 : {
              var_cas_highBound = GGS_luint::constructor_new (GGS_uint (true, 1UL), GGS_location (lexique_var_)) ;
              } break ;
            case 2 : {
              lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__5B) ;
              GGS_luint  var_cas_dim ;
              lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
              var_cas_dim.defineAttribute (lexique_var_.att_valeur, lexique_var_) ;
              lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__5D) ;
              if (var_cas_dim.isBuilt ()) {
                ::getHighBound (lexique_var_,  var_cas_dim,  var_cas_highBound) ;
              }
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          break ;
      }
      GGS_luint  var_cas_dimension ;
      if (var_cas_lowBound.isBuilt () &&
          var_cas_highBound.isBuilt ()) {
        ::verifyBoundsAndComputeDimension (lexique_var_,  var_cas_lowBound,  var_cas_highBound,  var_cas_dimension) ;
      }
      var_cas_outDomain = GGS_typeDirectDomain::constructor_new (var_cas_lowBound, var_cas_highBound, var_cas_dimension) ;
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_record) ;
      GGS_typeDomainMap  var_cas_recordDomainMap ;
      var_cas_recordDomainMap = GGS_typeDomainMap::constructor_empty () ;
      { bool syntaxRepeat = true ;
        while (syntaxRepeat) {
            GGS_lstring  var_cas_fieldName ;
            lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_id) ;
            var_cas_fieldName.defineAttribute (lexique_var_.att_token, lexique_var_) ;
            lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3A) ;
            GGS_typeDomain  var_cas_d ;
            nt_domainDefinition_ (lexique_var_, var_cas_ioDomainMap, var_cas_d) ;
            lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
            insertKey_typeDomainMap (lexique_var_,
                                            var_cas_recordDomainMap,
                                            var_cas_fieldName,
                                            var_cas_d,
                                            NULL) ;
          switch (select_repeat_syntaxeBDD_4 (lexique_var_)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat = false ;
              break ;
          }
        }
      }
      lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_end) ;
      lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_record) ;
      var_cas_outDomain = GGS_typeRecordDomain::constructor_new (var_cas_recordDomainMap) ;
      } break ;
    case 3 : {
      GGS_lstring  var_cas_domainName ;
      lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_id) ;
      var_cas_domainName.defineAttribute (lexique_var_.att_token, lexique_var_) ;
      searchKey_typeDomainMap (lexique_var_,
                                      var_cas_ioDomainMap,
                                      var_cas_domainName,
                                      & var_cas_outDomain,
                                      NULL) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'analyserFormule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_analyserFormule_syntaxeBDD_277_23_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeListeCalculs  &var_cas_listeCalculs,
                                GGS_luint  var_cas_afficherBDD) {
  GGS_lstring  var_cas_nomFormule ;
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_id) ;
  var_cas_nomFormule.defineAttribute (lexique_var_.att_token, lexique_var_) ;
  GGS_typeTableVariablesBool  var_cas_tableVariables ;
  var_cas_tableVariables = GGS_typeTableVariablesBool::constructor_empty () ;
  GGS_typeFormalArgumentsList  var_cas_listeArgFormelsBool ;
  nt_argsFormelsFormule_ (lexique_var_, var_cas_tableVariables, var_cas_ioDomainMap, var_cas_listeArgFormelsBool) ;
  GGS_typeCalcul  var_cas_calcul ;
  nt_type_formule_ (lexique_var_, var_cas_tableVariables, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_nomFormule, var_cas_listeArgFormelsBool, var_cas_afficherBDD, var_cas_calcul) ;
  var_cas_listeCalculs.addAssign_operation (var_cas_calcul) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'argsFormelsFormule'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_argsFormelsFormule_syntaxeBDD_298_26_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  &var_cas_tableVariables,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeFormalArgumentsList  &var_cas_listeArgFormelsBool) {
  switch (select_syntaxeBDD_5 (lexique_var_)) {
    case 1 : {
      var_cas_listeArgFormelsBool = GGS_typeFormalArgumentsList::constructor_empty () ;
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__5B) ;
      nt_declarations_ (lexique_var_, var_cas_tableVariables, var_cas_ioDomainMap, var_cas_listeArgFormelsBool) ;
      lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__5D) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "exploreRecordDomain"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_exploreRecordDomain (C_lexique & lexique_var_,
                                const GGS_typeDomainMap  & var_cas_inRecordMap,
                                GGS_typeTableVariablesBool  & var_cas_outMap,
                                const GGS_location  & var_cas_inErrorLocation) {
  var_cas_outMap = GGS_typeTableVariablesBool::constructor_empty () ;
  GGS_typeDomainMap::element_type * operand_8854 = var_cas_inRecordMap.getFirstItem () ;
  while (operand_8854 != NULL) {
    macroValidPointer (operand_8854) ;
    if (operand_8854->mInfo.mDomain.isBuilt ()) {
      if (dynamic_cast <cPtr_typeDirectDomain *> (operand_8854->mInfo.mDomain.getPtr ()) != NULL) {
        cPtr_typeDirectDomain * operand_8927 = dynamic_cast <cPtr_typeDirectDomain *> (operand_8854->mInfo.mDomain.getPtr ()) ;
        macroValidPointer (operand_8927) ; 
        GGS_luint  var_cas_num ;
        var_cas_num = GGS_luint::constructor_new (GGS_uint (true, 0UL), GGS_location (lexique_var_)) ;
        GGS_typeVariableDescriptor  var_cas_v ;
        var_cas_v = GGS_typeDirectVariable::constructor_new (var_cas_num, operand_8927->mBitsCount, operand_8927->mLowBound, operand_8927->mHighBound) ;
        insertKey_typeTableVariablesBool (lexique_var_,
                                        var_cas_outMap,
                                        operand_8854->mKey,
                                        var_cas_v,
                                        NULL) ;
      }else if (dynamic_cast <cPtr_typeRecordDomain *> (operand_8854->mInfo.mDomain.getPtr ()) != NULL) {
        cPtr_typeRecordDomain * operand_9210 = dynamic_cast <cPtr_typeRecordDomain *> (operand_8854->mInfo.mDomain.getPtr ()) ;
        macroValidPointer (operand_9210) ; 
        GGS_typeTableVariablesBool  var_cas_localMap ;
        ::routine_exploreRecordDomain (lexique_var_,  operand_9210->mRecordMap,  var_cas_localMap,  var_cas_inErrorLocation) ;
        GGS_typeVariableDescriptor  var_cas_v ;
        var_cas_v = GGS_typeRecordVariable::constructor_new (var_cas_localMap) ;
        insertKey_typeTableVariablesBool (lexique_var_,
                                        var_cas_outMap,
                                        operand_8854->mKey,
                                        var_cas_v,
                                        NULL) ;
      }else{ // Else part
          var_cas_inErrorLocation.reader_location ().signalGGSSemanticError (lexique_var_, ((GGS_string (true, "a domain was expected here ; I found ")) + (operand_8854->mInfo.mDomain.reader_messageDomainType ()))) ;
      }
    }
    operand_8854 = operand_8854->getNextItem () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "buildFormalArgsList"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildFormalArgsList (C_lexique & lexique_var_,
                                const GGS_typeVariableDescriptor  & var_cas_inVariableDescriptor,
                                GGS_typeFormalArgumentsList  & var_cas_ioFormalArgsList,
                                const GGS_location  & var_cas_inErrorLocation) {
  if (var_cas_inVariableDescriptor.isBuilt ()) {
    if (dynamic_cast <cPtr_typeDirectVariable *> (var_cas_inVariableDescriptor.getPtr ()) != NULL) {
      cPtr_typeDirectVariable * operand_10182 = dynamic_cast <cPtr_typeDirectVariable *> (var_cas_inVariableDescriptor.getPtr ()) ;
      macroValidPointer (operand_10182) ; 
      var_cas_ioFormalArgsList.addAssign_operation (operand_10182->mIndex, operand_10182->mBitSize, operand_10182->mLowBound, operand_10182->mHighBound) ;
    }else if (dynamic_cast <cPtr_typeRecordVariable *> (var_cas_inVariableDescriptor.getPtr ()) != NULL) {
      cPtr_typeRecordVariable * operand_10368 = dynamic_cast <cPtr_typeRecordVariable *> (var_cas_inVariableDescriptor.getPtr ()) ;
      macroValidPointer (operand_10368) ; 
      GGS_typeTableVariablesBool::element_type * operand_10472 = operand_10368->mMap.getFirstItem () ;
      while (operand_10472 != NULL) {
        macroValidPointer (operand_10472) ;
        ::routine_buildFormalArgsList (lexique_var_,  operand_10472->mInfo.mVariableDescriptor,  var_cas_ioFormalArgsList,  var_cas_inErrorLocation) ;
        operand_10472 = operand_10472->getNextItem () ;
      }
    }else{ // Else part
        var_cas_inErrorLocation.reader_location ().signalGGSSemanticError (lexique_var_, ((GGS_string (true, "a variable was expected here ; I found ")) + (var_cas_inVariableDescriptor.reader_variableDescriptorErrorMessage ()))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'declarations'              *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_declarations_syntaxeBDD_363_20_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  &var_cas_tableVariables,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeFormalArgumentsList  &var_cas_listeArgFormelsBool) {
  var_cas_listeArgFormelsBool = GGS_typeFormalArgumentsList::constructor_empty () ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_lstring  var_cas_nom ;
        lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_id) ;
        var_cas_nom.defineAttribute (lexique_var_.att_token, lexique_var_) ;
        GGS_typeDomain  var_cas_domain ;
        nt_dimension_ (lexique_var_, var_cas_ioDomainMap, var_cas_domain) ;
        if (var_cas_domain.isBuilt ()) {
          if (dynamic_cast <cPtr_typeDirectDomain *> (var_cas_domain.getPtr ()) != NULL) {
            cPtr_typeDirectDomain * operand_11219 = dynamic_cast <cPtr_typeDirectDomain *> (var_cas_domain.getPtr ()) ;
            macroValidPointer (operand_11219) ; 
            GGS_luint  var_cas_num ;
            GGS_luint  var_cas_pipo ;
            var_cas_pipo = GGS_luint::constructor_new (GGS_uint (true, 0UL), GGS_location (lexique_var_)) ;
            GGS_typeVariableDescriptor  var_cas_v ;
            var_cas_v = GGS_typeDirectVariable::constructor_new (var_cas_pipo, operand_11219->mBitsCount, operand_11219->mLowBound, operand_11219->mHighBound) ;
            insertKey_typeTableVariablesBool (lexique_var_,
                                            var_cas_tableVariables,
                                            var_cas_nom,
                                            var_cas_v,
                                            NULL) ;
            searchKey_typeTableVariablesBool (lexique_var_,
                                            var_cas_tableVariables,
                                            var_cas_nom,
                                            & var_cas_v,
                                            NULL) ;
            { cPtr_typeDirectVariable * ptrExtraire_ = dynamic_cast <cPtr_typeDirectVariable *> (var_cas_v.getPtr ()) ;
              if (ptrExtraire_ == NULL) {
                var_cas_num.drop_operation () ;
                if (var_cas_v.getPtr () != NULL) {
                  TC_unique_dyn_array <C_string> message1_ (1 COMMA_HERE) ;
                  C_string message2_ ;
                  message1_ (0 COMMA_HERE) << cPtr_typeDirectVariable::static_string_message_variableDescriptorErrorMessage () ;
                  message2_ << var_cas_v ()->message_variableDescriptorErrorMessage () ;
                  var_cas_nom.signalExtractError (lexique_var_, message1_, message2_) ;
                }
              }else{
                macroValidPointer (ptrExtraire_) ;
                var_cas_num = ptrExtraire_->mIndex ;
              }
            }
            var_cas_listeArgFormelsBool.addAssign_operation (var_cas_num, operand_11219->mBitsCount, operand_11219->mLowBound, operand_11219->mHighBound) ;
          }else if (dynamic_cast <cPtr_typeRecordDomain *> (var_cas_domain.getPtr ()) != NULL) {
            cPtr_typeRecordDomain * operand_11737 = dynamic_cast <cPtr_typeRecordDomain *> (var_cas_domain.getPtr ()) ;
            macroValidPointer (operand_11737) ; 
            GGS_typeTableVariablesBool  var_cas_recordMap ;
            GGS_location  var_cas_errorLocation ;
            var_cas_errorLocation = GGS_location (lexique_var_) ;
            ::routine_exploreRecordDomain (lexique_var_,  operand_11737->mRecordMap,  var_cas_recordMap,  var_cas_errorLocation) ;
            GGS_typeVariableDescriptor  var_cas_v ;
            var_cas_v = GGS_typeRecordVariable::constructor_new (var_cas_recordMap) ;
            insertKey_typeTableVariablesBool (lexique_var_,
                                            var_cas_tableVariables,
                                            var_cas_nom,
                                            var_cas_v,
                                            NULL) ;
            searchKey_typeTableVariablesBool (lexique_var_,
                                            var_cas_tableVariables,
                                            var_cas_nom,
                                            & var_cas_v,
                                            NULL) ;
            ::routine_buildFormalArgsList (lexique_var_,  var_cas_v,  var_cas_listeArgFormelsBool,  var_cas_errorLocation) ;
          }else{ // Else part
              var_cas_nom.reader_location ().signalGGSSemanticError (lexique_var_, ((GGS_string (true, "a domain was expected here ; I found ")) + (var_cas_domain.reader_messageDomainType ()))) ;
          }
        }
      switch (select_repeat_syntaxeBDD_6 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__2C) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'dimension'                *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_dimension_syntaxeBDD_403_17_ (lexiqueBDD & lexique_var_,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeDomain  &var_cas_outDomain) {
  switch (select_syntaxeBDD_7 (lexique_var_)) {
    case 1 : {
      GGS_luint  var_cas_lowBound ;
      var_cas_lowBound = GGS_luint::constructor_new (GGS_uint (true, 0UL), GGS_location (lexique_var_)) ;
      GGS_luint  var_cas_highBound ;
      var_cas_highBound = GGS_luint::constructor_new (GGS_uint (true, 1UL), GGS_location (lexique_var_)) ;
      GGS_luint  var_cas_dim ;
      var_cas_dim = GGS_luint::constructor_new (GGS_uint (true, 1UL), GGS_location (lexique_var_)) ;
      var_cas_outDomain = GGS_typeDirectDomain::constructor_new (var_cas_lowBound, var_cas_highBound, var_cas_dim) ;
        var_cas_dim.reader_location ().signalGGSSemanticWarning (lexique_var_, GGS_string (true, "old style implicit boolean declaration : now use bool keyword")) ;
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3A) ;
      switch (select_syntaxeBDD_8 (lexique_var_)) {
        case 1 : {
          GGS_luint  var_cas_dim ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
          var_cas_dim.defineAttribute (lexique_var_.att_valeur, lexique_var_) ;
            var_cas_dim.reader_location ().signalGGSSemanticWarning (lexique_var_, GGS_string (true, "old style definition : now use bool [...]")) ;
          GGS_luint  var_cas_lowBound ;
          var_cas_lowBound = GGS_luint::constructor_new (GGS_uint (true, 0UL), GGS_location (lexique_var_)) ;
          GGS_luint  var_cas_highBound ;
          if (var_cas_dim.isBuilt ()) {
            ::getHighBound (lexique_var_,  var_cas_dim,  var_cas_highBound) ;
          }
          var_cas_outDomain = GGS_typeDirectDomain::constructor_new (var_cas_lowBound, var_cas_highBound, var_cas_dim) ;
          } break ;
        case 2 : {
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_bool) ;
          GGS_luint  var_cas_lowBound ;
          var_cas_lowBound = GGS_luint::constructor_new (GGS_uint (true, 0UL), GGS_location (lexique_var_)) ;
          GGS_luint  var_cas_highBound ;
          GGS_luint  var_cas_dim ;
          switch (select_syntaxeBDD_9 (lexique_var_)) {
            case 1 : {
              var_cas_highBound = GGS_luint::constructor_new (GGS_uint (true, 1UL), GGS_location (lexique_var_)) ;
              var_cas_dim = GGS_luint::constructor_new (GGS_uint (true, 1UL), GGS_location (lexique_var_)) ;
              } break ;
            case 2 : {
              lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__5B) ;
              lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
              var_cas_dim.defineAttribute (lexique_var_.att_valeur, lexique_var_) ;
              lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__5D) ;
              if (var_cas_dim.isBuilt ()) {
                ::getHighBound (lexique_var_,  var_cas_dim,  var_cas_highBound) ;
              }
              } break ;
            default :
              break ;
          }
          var_cas_outDomain = GGS_typeDirectDomain::constructor_new (var_cas_lowBound, var_cas_highBound, var_cas_dim) ;
          } break ;
        case 3 : {
          GGS_lstring  var_cas_domainName ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_id) ;
          var_cas_domainName.defineAttribute (lexique_var_.att_token, lexique_var_) ;
          searchKey_typeDomainMap (lexique_var_,
                                          var_cas_ioDomainMap,
                                          var_cas_domainName,
                                          & var_cas_outDomain,
                                          NULL) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'type_formule'              *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_type_formule_syntaxeBDD_450_20_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_lstring  var_cas_nomFormule,
                                GGS_typeFormalArgumentsList  var_cas_listeArgFormelsBool,
                                GGS_luint  var_cas_afficherBDD,
                                GGS_typeCalcul  &var_cas_calcul) {
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3A_3D) ;
  GGS_luint  var_cas_numero ;
  GGS_typeFormule  var_cas_f ;
  GGS_typeTableVariablesBool  var_cas_tableVariablesLocales ;
  var_cas_tableVariablesLocales = var_cas_tableVariables ;
  nt_formule_ (lexique_var_, var_cas_tableVariablesLocales, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_f) ;
  GGS_bdd var_cas_unusedBDD ;
  var_cas_unusedBDD = GGS_bdd::constructor_empty () ;
  insertKey_typeTableFormules (lexique_var_,
                                  var_cas_tableFormules,
                                  var_cas_nomFormule,
                                  var_cas_listeArgFormelsBool,
                                  var_cas_unusedBDD,
                                  & var_cas_numero) ;
  var_cas_calcul = GGS_typeCalculSimple::constructor_new (var_cas_numero, var_cas_f, var_cas_nomFormule, var_cas_tableVariables, var_cas_afficherBDD) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'type_formule'              *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_type_formule_syntaxeBDD_471_20_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_lstring  var_cas_nomFormule,
                                GGS_typeFormalArgumentsList  var_cas_listeArgFormelsBool,
                                GGS_luint  var_cas_afficherBDD,
                                GGS_typeCalcul  &var_cas_calcul) {
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__2B_3D) ;
  GGS_lbool  var_cas_signe ;
  var_cas_signe = GGS_lbool::constructor_new (GGS_bool (true, true), GGS_location (lexique_var_)) ;
  GGS_luint  var_cas_numero ;
  GGS_bdd var_cas_unusedBDD ;
  var_cas_unusedBDD = GGS_bdd::constructor_empty () ;
  insertKey_typeTableFormules (lexique_var_,
                                  var_cas_tableFormules,
                                  var_cas_nomFormule,
                                  var_cas_listeArgFormelsBool,
                                  var_cas_unusedBDD,
                                  & var_cas_numero) ;
  GGS_typeFormule  var_cas_f ;
  GGS_typeTableVariablesBool  var_cas_tableVariablesLocales ;
  var_cas_tableVariablesLocales = var_cas_tableVariables ;
  nt_formule_ (lexique_var_, var_cas_tableVariablesLocales, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_f) ;
  var_cas_calcul = GGS_typeCalculIteratif::constructor_new (var_cas_numero, var_cas_f, var_cas_nomFormule, var_cas_tableVariables, var_cas_signe, var_cas_afficherBDD) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'type_formule'              *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_type_formule_syntaxeBDD_493_20_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_lstring  var_cas_nomFormule,
                                GGS_typeFormalArgumentsList  var_cas_listeArgFormelsBool,
                                GGS_luint  var_cas_afficherBDD,
                                GGS_typeCalcul  &var_cas_calcul) {
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__2D_3D) ;
  GGS_lbool  var_cas_signe ;
  var_cas_signe = GGS_lbool::constructor_new (GGS_bool (true, false), GGS_location (lexique_var_)) ;
  GGS_luint  var_cas_numero ;
  GGS_bdd var_cas_unusedBDD ;
  var_cas_unusedBDD = GGS_bdd::constructor_empty () ;
  insertKey_typeTableFormules (lexique_var_,
                                  var_cas_tableFormules,
                                  var_cas_nomFormule,
                                  var_cas_listeArgFormelsBool,
                                  var_cas_unusedBDD,
                                  & var_cas_numero) ;
  GGS_typeFormule  var_cas_f ;
  GGS_typeTableVariablesBool  var_cas_tableVariablesLocales ;
  var_cas_tableVariablesLocales = var_cas_tableVariables ;
  nt_formule_ (lexique_var_, var_cas_tableVariablesLocales, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_f) ;
  var_cas_calcul = GGS_typeCalculIteratif::constructor_new (var_cas_numero, var_cas_f, var_cas_nomFormule, var_cas_tableVariables, var_cas_signe, var_cas_afficherBDD) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'formule'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_formule_syntaxeBDD_518_15_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  nt_egalite_formule_ (lexique_var_, var_cas_tableVariables, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_formule) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_syntaxeBDD_10 (lexique_var_)) {
        case 2 : {
          GGS_luint  var_cas_comparaison ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_comp) ;
          var_cas_comparaison.defineAttribute (lexique_var_.att_valeur, lexique_var_) ;
          GGS_typeFormule  var_cas_g ;
          GGS_typeFormule  var_cas_h ;
          var_cas_h = var_cas_formule ;
          nt_egalite_formule_ (lexique_var_, var_cas_tableVariables, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_g) ;
          var_cas_formule = GGS_typeComparaisonFormules::constructor_new (var_cas_comparaison, var_cas_h, var_cas_g) ;
          } break ;
        case 3 : {
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__2D_3E) ;
          GGS_typeFormule  var_cas_g ;
          GGS_typeFormule  var_cas_h ;
          var_cas_h = var_cas_formule ;
          nt_egalite_formule_ (lexique_var_, var_cas_tableVariables, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_g) ;
          var_cas_formule = GGS_typeFormuleImplique::constructor_new (var_cas_h, var_cas_g) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'egalite_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_egalite_formule_syntaxeBDD_546_23_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  nt_terme_formule_ (lexique_var_, var_cas_tableVariables, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_formule) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_syntaxeBDD_11 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__7C) ;
          GGS_typeFormule  var_cas_g ;
          GGS_typeFormule  var_cas_h ;
          var_cas_h = var_cas_formule ;
          nt_terme_formule_ (lexique_var_, var_cas_tableVariables, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_g) ;
          var_cas_formule = GGS_typeFormuleOu::constructor_new (var_cas_h, var_cas_g) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'terme_formule'              *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_terme_formule_syntaxeBDD_567_21_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  nt_facteur_formule_ (lexique_var_, var_cas_tableVariables, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_formule) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_syntaxeBDD_12 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__26) ;
          GGS_typeFormule  var_cas_g ;
          GGS_typeFormule  var_cas_h ;
          var_cas_h = var_cas_formule ;
          nt_facteur_formule_ (lexique_var_, var_cas_tableVariables, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_g) ;
          var_cas_formule = GGS_typeFormuleEt::constructor_new (var_cas_h, var_cas_g) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_588_23_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__28) ;
  nt_formule_ (lexique_var_, var_cas_tableVariables, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_formule) ;
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__29) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_601_23_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  /* var_cas_tableVariables */,
                                GGS_typeDomainMap  &/* var_cas_ioDomainMap */,
                                GGS_typeTableFormules  &/* var_cas_tableFormules */,
                                GGS_typeFormule  &var_cas_formule) {
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_true) ;
  var_cas_formule = GGS_typeFormuleTrue::constructor_new () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_613_23_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_typeDomainMap  &/* var_cas_ioDomainMap */,
                                GGS_typeTableFormules  &/* var_cas_tableFormules */,
                                GGS_typeFormule  &var_cas_formule) {
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__7B) ;
  GGS_luint  var_cas_varIndex ;
  GGS_luint  var_cas_bitSize ;
  GGS_luint  var_cas_lowBound ;
  GGS_luint  var_cas_highBound ;
  GGS_location  var_cas_errorLocation ;
  nt_parse_scalar_argument_ (lexique_var_, var_cas_tableVariables, var_cas_varIndex, var_cas_bitSize, var_cas_lowBound, var_cas_highBound, var_cas_errorLocation) ;
  GGS_luint  var_cas_comparaison ;
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_comp) ;
  var_cas_comparaison.defineAttribute (lexique_var_.att_valeur, lexique_var_) ;
  nt_comparaisonVariable_ (lexique_var_, var_cas_tableVariables, var_cas_varIndex, var_cas_bitSize, var_cas_lowBound, var_cas_highBound, var_cas_comparaison, var_cas_formule) ;
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__7D) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'comparaisonVariable'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_comparaisonVariable_syntaxeBDD_634_27_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  /* var_cas_tableVariables */,
                                GGS_luint  var_cas_numero,
                                GGS_luint  var_cas_dim,
                                GGS_luint  var_cas_lowBound,
                                GGS_luint  var_cas_highBound,
                                GGS_luint  var_cas_comparaison,
                                GGS_typeFormule  &var_cas_formule) {
  GGS_luint  var_cas_valeur ;
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
  var_cas_valeur.defineAttribute (lexique_var_.att_valeur, lexique_var_) ;
  if (var_cas_dim.isBuilt () &&
      var_cas_valeur.isBuilt ()) {
    ::verifierDimensionValeurCorrecte (lexique_var_,  var_cas_dim,  var_cas_valeur) ;
  }
  var_cas_formule = GGS_typeFormuleComparaisonValeur::constructor_new (var_cas_numero, var_cas_dim, var_cas_lowBound, var_cas_highBound, var_cas_comparaison, var_cas_valeur) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'comparaisonVariable'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_comparaisonVariable_syntaxeBDD_651_27_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_luint  var_cas_inLeftVarIndex,
                                GGS_luint  var_cas_inLeftBitSize,
                                GGS_luint  var_cas_inLeftLowBound,
                                GGS_luint  var_cas_inLeftHighBound,
                                GGS_luint  var_cas_comparaison,
                                GGS_typeFormule  &var_cas_formule) {
  GGS_luint  var_cas_rightVarIndex ;
  GGS_luint  var_cas_rightBitSize ;
  GGS_luint  var_cas_rightLowBound ;
  GGS_luint  var_cas_rightHighBound ;
  GGS_location  var_cas_errorLocation ;
  nt_parse_scalar_argument_ (lexique_var_, var_cas_tableVariables, var_cas_rightVarIndex, var_cas_rightBitSize, var_cas_rightLowBound, var_cas_rightHighBound, var_cas_errorLocation) ;
  if (var_cas_inLeftBitSize.isBuilt () &&
      var_cas_rightBitSize.isBuilt ()) {
    ::verifierMemesDimensions (lexique_var_,  var_cas_inLeftBitSize,  var_cas_rightBitSize) ;
  }
  var_cas_formule = GGS_typeFormuleComparaisonVariable::constructor_new (var_cas_inLeftVarIndex, var_cas_inLeftBitSize, var_cas_inLeftLowBound, var_cas_inLeftHighBound, var_cas_comparaison, var_cas_rightVarIndex, var_cas_rightLowBound, var_cas_rightHighBound) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_674_23_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  /* var_cas_tableVariables */,
                                GGS_typeDomainMap  &/* var_cas_ioDomainMap */,
                                GGS_typeTableFormules  &/* var_cas_tableFormules */,
                                GGS_typeFormule  &var_cas_formule) {
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_false) ;
  var_cas_formule = GGS_typeFormuleFalse::constructor_new () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_686_23_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__7E) ;
  GGS_typeFormule  var_cas_f ;
  nt_facteur_formule_ (lexique_var_, var_cas_tableVariables, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_f) ;
  var_cas_formule = GGS_typeFormuleNon::constructor_new (var_cas_f) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_700_23_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_if) ;
  GGS_typeFormule  var_cas_operande1 ;
  nt_formule_ (lexique_var_, var_cas_tableVariables, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_operande1) ;
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_then) ;
  GGS_typeFormule  var_cas_operande2 ;
  nt_formule_ (lexique_var_, var_cas_tableVariables, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_operande2) ;
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_else) ;
  GGS_typeFormule  var_cas_operande3 ;
  nt_formule_ (lexique_var_, var_cas_tableVariables, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_operande3) ;
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_end) ;
  var_cas_formule = GGS_typeFormuleIte::constructor_new (var_cas_operande1, var_cas_operande2, var_cas_operande3) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_721_23_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__21) ;
  GGS_typeFormalArgumentsList  var_cas_listeNumVarsBool ;
  GGS_typeTableVariablesBool  var_cas_tableLocaleVariables ;
  var_cas_tableLocaleVariables = var_cas_tableVariables ;
  nt_declarations_ (lexique_var_, var_cas_tableLocaleVariables, var_cas_ioDomainMap, var_cas_listeNumVarsBool) ;
  GGS_typeFormule  var_cas_f ;
  nt_facteur_formule_ (lexique_var_, var_cas_tableLocaleVariables, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_f) ;
  GGS_bdd var_cas_unusedBDD ;
  var_cas_unusedBDD = GGS_bdd::constructor_empty () ;
  var_cas_formule = GGS_typeFormuleQuelqueSoit::constructor_new (var_cas_listeNumVarsBool, var_cas_f, var_cas_unusedBDD) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_740_23_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3F) ;
  GGS_typeFormalArgumentsList  var_cas_listeNumVarsBool ;
  GGS_typeTableVariablesBool  var_cas_tableLocaleVariables ;
  var_cas_tableLocaleVariables = var_cas_tableVariables ;
  nt_declarations_ (lexique_var_, var_cas_tableLocaleVariables, var_cas_ioDomainMap, var_cas_listeNumVarsBool) ;
  GGS_typeFormule  var_cas_f ;
  nt_facteur_formule_ (lexique_var_, var_cas_tableLocaleVariables, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_f) ;
  GGS_bdd var_cas_unusedBDD ;
  var_cas_unusedBDD = GGS_bdd::constructor_empty () ;
  var_cas_formule = GGS_typeFormuleExist::constructor_new (var_cas_listeNumVarsBool, var_cas_f, var_cas_unusedBDD) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_759_23_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_typeDomainMap  &/* var_cas_ioDomainMap */,
                                GGS_typeTableFormules  &/* var_cas_tableFormules */,
                                GGS_typeFormule  &var_cas_formule) {
  GGS_luint  var_cas_varIndex ;
  GGS_luint  var_cas_bitSize ;
  GGS_luint  var_cas_lowBound ;
  GGS_luint  var_cas_highBound ;
  GGS_location  var_cas_errorLocation ;
  nt_parse_scalar_argument_ (lexique_var_, var_cas_tableVariables, var_cas_varIndex, var_cas_bitSize, var_cas_lowBound, var_cas_highBound, var_cas_errorLocation) ;
  if (var_cas_bitSize.isBuilt () &&
      var_cas_errorLocation.isBuilt ()) {
    ::verifierDimensionUn (lexique_var_,  var_cas_bitSize,  var_cas_errorLocation) ;
  }
  var_cas_formule = GGS_typeFormuleVar::constructor_new (var_cas_varIndex, var_cas_lowBound, var_cas_highBound) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "buildActualArgsList"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildActualArgsList (C_lexique & lexique_var_,
                                const GGS_typeTableVariablesBool  & var_cas_inDomainMap,
                                GGS_typeActualArgumentsList  & var_cas_ioActualArgsList,
                                const GGS_location  & var_cas_inErrorLocation) {
  GGS_typeTableVariablesBool::element_type * operand_25000 = var_cas_inDomainMap.getFirstItem () ;
  while (operand_25000 != NULL) {
    macroValidPointer (operand_25000) ;
    if (operand_25000->mInfo.mVariableDescriptor.isBuilt ()) {
      if (dynamic_cast <cPtr_typeDirectVariable *> (operand_25000->mInfo.mVariableDescriptor.getPtr ()) != NULL) {
        cPtr_typeDirectVariable * operand_25106 = dynamic_cast <cPtr_typeDirectVariable *> (operand_25000->mInfo.mVariableDescriptor.getPtr ()) ;
        macroValidPointer (operand_25106) ; 
        var_cas_ioActualArgsList.addAssign_operation (operand_25106->mIndex, operand_25106->mBitSize, operand_25106->mLowBound, operand_25106->mHighBound, var_cas_inErrorLocation) ;
      }else if (dynamic_cast <cPtr_typeRecordVariable *> (operand_25000->mInfo.mVariableDescriptor.getPtr ()) != NULL) {
        cPtr_typeRecordVariable * operand_25313 = dynamic_cast <cPtr_typeRecordVariable *> (operand_25000->mInfo.mVariableDescriptor.getPtr ()) ;
        macroValidPointer (operand_25313) ; 
        ::routine_buildActualArgsList (lexique_var_,  operand_25313->mMap,  var_cas_ioActualArgsList,  var_cas_inErrorLocation) ;
      }else{ // Else part
          var_cas_inErrorLocation.reader_location ().signalGGSSemanticError (lexique_var_, ((GGS_string (true, "a variable was expected here ; I found ")) + (operand_25000->mInfo.mVariableDescriptor.reader_variableDescriptorErrorMessage ()))) ;
      }
    }
    operand_25000 = operand_25000->getNextItem () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_facteur_formule_syntaxeBDD_799_23_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_typeDomainMap  &/* var_cas_ioDomainMap */,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__23) ;
  GGS_lstring  var_cas_nom ;
  GGS_luint  var_cas_numero ;
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_id) ;
  var_cas_nom.defineAttribute (lexique_var_.att_token, lexique_var_) ;
  GGS_typeFormalArgumentsList  var_cas_listeArgsFormelsBool ;
  searchKey_typeTableFormules (lexique_var_,
                                  var_cas_tableFormules,
                                  var_cas_nom,
                                  & var_cas_listeArgsFormelsBool,
                                  NULL,
                                  & var_cas_numero) ;
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__5B) ;
  GGS_typeActualArgumentsList  var_cas_listeArgsEffectifsBool ;
  var_cas_listeArgsEffectifsBool = GGS_typeActualArgumentsList::constructor_empty () ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_typeVariableDescriptor  var_cas_varDescriptor ;
        GGS_location  var_cas_errorLocation ;
        nt_parse_argument_ (lexique_var_, var_cas_tableVariables, var_cas_varDescriptor, var_cas_errorLocation) ;
        switch (select_syntaxeBDD_14 (lexique_var_)) {
          case 1 : {
            if (var_cas_varDescriptor.isBuilt ()) {
              if (dynamic_cast <cPtr_typeDirectVariable *> (var_cas_varDescriptor.getPtr ()) != NULL) {
                cPtr_typeDirectVariable * operand_26365 = dynamic_cast <cPtr_typeDirectVariable *> (var_cas_varDescriptor.getPtr ()) ;
                macroValidPointer (operand_26365) ; 
                var_cas_listeArgsEffectifsBool.addAssign_operation (operand_26365->mIndex, operand_26365->mBitSize, operand_26365->mLowBound, operand_26365->mHighBound, var_cas_errorLocation) ;
              }else if (dynamic_cast <cPtr_typeRecordVariable *> (var_cas_varDescriptor.getPtr ()) != NULL) {
                cPtr_typeRecordVariable * operand_26564 = dynamic_cast <cPtr_typeRecordVariable *> (var_cas_varDescriptor.getPtr ()) ;
                macroValidPointer (operand_26564) ; 
                ::routine_buildActualArgsList (lexique_var_,  operand_26564->mMap,  var_cas_listeArgsEffectifsBool,  var_cas_errorLocation) ;
              }else{ // Else part
                  var_cas_errorLocation.reader_location ().signalGGSSemanticError (lexique_var_, ((GGS_string (true, "a variable was expected here ; I found ")) + (var_cas_varDescriptor.reader_variableDescriptorErrorMessage ()))) ;
              }
            }
            } break ;
          case 2 : {
            GGS_luint  var_cas_explicitBitSize ;
            GGS_luint  var_cas_explicitVarIndex ;
            lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3A) ;
            lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
            var_cas_explicitBitSize.defineAttribute (lexique_var_.att_valeur, lexique_var_) ;
            lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3A_3A) ;
            lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
            var_cas_explicitVarIndex.defineAttribute (lexique_var_.att_valeur, lexique_var_) ;
            GGS_luint  var_cas_varIndex ;
            GGS_luint  var_cas_bitSize ;
            GGS_luint  var_cas_lowBound ;
            GGS_luint  var_cas_highBound ;
            { cPtr_typeDirectVariable * ptrExtraire_ = dynamic_cast <cPtr_typeDirectVariable *> (var_cas_varDescriptor.getPtr ()) ;
              if (ptrExtraire_ == NULL) {
                var_cas_varIndex.drop_operation () ;
                var_cas_bitSize.drop_operation () ;
                var_cas_lowBound.drop_operation () ;
                var_cas_highBound.drop_operation () ;
                if (var_cas_varDescriptor.getPtr () != NULL) {
                  TC_unique_dyn_array <C_string> message1_ (1 COMMA_HERE) ;
                  C_string message2_ ;
                  message1_ (0 COMMA_HERE) << cPtr_typeDirectVariable::static_string_message_variableDescriptorErrorMessage () ;
                  message2_ << var_cas_varDescriptor ()->message_variableDescriptorErrorMessage () ;
                  var_cas_errorLocation.signalExtractError (lexique_var_, message1_, message2_) ;
                }
              }else{
                macroValidPointer (ptrExtraire_) ;
                var_cas_varIndex = ptrExtraire_->mIndex ;
                var_cas_bitSize = ptrExtraire_->mBitSize ;
                var_cas_lowBound = ptrExtraire_->mLowBound ;
                var_cas_highBound = ptrExtraire_->mHighBound ;
              }
            }
            if (var_cas_explicitVarIndex.isBuilt () &&
                var_cas_explicitBitSize.isBuilt () &&
                var_cas_varIndex.isBuilt () &&
                var_cas_bitSize.isBuilt ()) {
              ::verifierDimensionExpliciteCorrecte (lexique_var_,  var_cas_explicitVarIndex,  var_cas_explicitBitSize,  var_cas_varIndex,  var_cas_bitSize) ;
            }
            var_cas_listeArgsEffectifsBool.addAssign_operation (var_cas_varIndex, var_cas_bitSize, var_cas_lowBound, var_cas_highBound, var_cas_errorLocation) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_syntaxeBDD_13 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__2C) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__5D) ;
  GGS_location  var_cas_positionFinListe ;
  var_cas_positionFinListe = GGS_location (lexique_var_) ;
  ::routine_verifierNombreArgumentsBool (lexique_var_,  var_cas_listeArgsFormelsBool,  var_cas_listeArgsEffectifsBool,  var_cas_positionFinListe) ;
  GGS_bdd var_cas_unusedBDD ;
  var_cas_unusedBDD = GGS_bdd::constructor_empty () ;
  GGS_lbool  var_cas_unusedBool ;
  var_cas_unusedBool = GGS_lbool::constructor_new (GGS_bool (true, false), GGS_location (lexique_var_)) ;
  var_cas_formule = GGS_typeFormuleFor::constructor_new (var_cas_numero, var_cas_listeArgsEffectifsBool, var_cas_unusedBDD, var_cas_unusedBool) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'parse_argument'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_parse_argument_syntaxeBDD_857_22_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  &var_cas_ioVarMap,
                                GGS_typeVariableDescriptor  &var_cas_outVarDescriptor,
                                GGS_location  &var_cas_outErrorLocation) {
  GGS_lstring  var_cas_varName ;
  lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_id) ;
  var_cas_varName.defineAttribute (lexique_var_.att_token, lexique_var_) ;
  var_cas_outErrorLocation = var_cas_varName.reader_location () ;
  searchKey_typeTableVariablesBool (lexique_var_,
                                  var_cas_ioVarMap,
                                  var_cas_varName,
                                  & var_cas_outVarDescriptor,
                                  NULL) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_syntaxeBDD_15 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__2E) ;
          GGS_location  var_cas_errorLoc ;
          var_cas_errorLoc = GGS_location (lexique_var_) ;
          GGS_typeTableVariablesBool  var_cas_fieldMap ;
          { cPtr_typeRecordVariable * ptrExtraire_ = dynamic_cast <cPtr_typeRecordVariable *> (var_cas_outVarDescriptor.getPtr ()) ;
            if (ptrExtraire_ == NULL) {
              var_cas_fieldMap.drop_operation () ;
              if (var_cas_outVarDescriptor.getPtr () != NULL) {
                TC_unique_dyn_array <C_string> message1_ (1 COMMA_HERE) ;
                C_string message2_ ;
                message1_ (0 COMMA_HERE) << cPtr_typeRecordVariable::static_string_message_variableDescriptorErrorMessage () ;
                message2_ << var_cas_outVarDescriptor ()->message_variableDescriptorErrorMessage () ;
                var_cas_errorLoc.signalExtractError (lexique_var_, message1_, message2_) ;
              }
            }else{
              macroValidPointer (ptrExtraire_) ;
              var_cas_fieldMap = ptrExtraire_->mMap ;
            }
          }
          GGS_lstring  var_cas_fieldName ;
          lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_id) ;
          var_cas_fieldName.defineAttribute (lexique_var_.att_token, lexique_var_) ;
          var_cas_outErrorLocation = var_cas_fieldName.reader_location () ;
          searchKey_typeTableVariablesBool (lexique_var_,
                                          var_cas_fieldMap,
                                          var_cas_fieldName,
                                          & var_cas_outVarDescriptor,
                                          NULL) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'parse_scalar_argument'          *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
pr_parse_scalar_argument_syntaxeBDD_882_29_ (lexiqueBDD & lexique_var_,
                                GGS_typeTableVariablesBool  &var_cas_ioVarMap,
                                GGS_luint  &var_cas_outVarIndex,
                                GGS_luint  &var_cas_outBitSize,
                                GGS_luint  &var_cas_outLowBound,
                                GGS_luint  &var_cas_outHighBound,
                                GGS_location  &var_cas_outErrorLocation) {
  GGS_typeVariableDescriptor  var_cas_v ;
  nt_parse_argument_ (lexique_var_, var_cas_ioVarMap, var_cas_v, var_cas_outErrorLocation) ;
  GGS_luint  var_cas_bitSize ;
  GGS_luint  var_cas_varIndex ;
  { cPtr_typeDirectVariable * ptrExtraire_ = dynamic_cast <cPtr_typeDirectVariable *> (var_cas_v.getPtr ()) ;
    if (ptrExtraire_ == NULL) {
      var_cas_varIndex.drop_operation () ;
      var_cas_bitSize.drop_operation () ;
      var_cas_outLowBound.drop_operation () ;
      var_cas_outHighBound.drop_operation () ;
      if (var_cas_v.getPtr () != NULL) {
        TC_unique_dyn_array <C_string> message1_ (1 COMMA_HERE) ;
        C_string message2_ ;
        message1_ (0 COMMA_HERE) << cPtr_typeDirectVariable::static_string_message_variableDescriptorErrorMessage () ;
        message2_ << var_cas_v ()->message_variableDescriptorErrorMessage () ;
        var_cas_outErrorLocation.signalExtractError (lexique_var_, message1_, message2_) ;
      }
    }else{
      macroValidPointer (ptrExtraire_) ;
      var_cas_varIndex = ptrExtraire_->mIndex ;
      var_cas_bitSize = ptrExtraire_->mBitSize ;
      var_cas_outLowBound = ptrExtraire_->mLowBound ;
      var_cas_outHighBound = ptrExtraire_->mHighBound ;
    }
  }
  switch (select_syntaxeBDD_16 (lexique_var_)) {
    case 1 : {
      var_cas_outVarIndex = var_cas_varIndex ;
      var_cas_outBitSize = var_cas_bitSize ;
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3A) ;
      lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
      var_cas_outBitSize.defineAttribute (lexique_var_.att_valeur, lexique_var_) ;
      lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3A_3A) ;
      lexique_var_.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
      var_cas_outVarIndex.defineAttribute (lexique_var_.att_valeur, lexique_var_) ;
      if (var_cas_varIndex.isBuilt () &&
          var_cas_bitSize.isBuilt () &&
          var_cas_outVarIndex.isBuilt () &&
          var_cas_outBitSize.isBuilt ()) {
        ::verifierDimensionExpliciteCorrecte (lexique_var_,  var_cas_varIndex,  var_cas_bitSize,  var_cas_outVarIndex,  var_cas_outBitSize) ;
      }
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

