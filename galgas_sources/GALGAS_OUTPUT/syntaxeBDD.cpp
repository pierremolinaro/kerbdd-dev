//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'syntaxeBDD.cpp'                            *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                     november 2nd, 2006, at 21h2'36"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "syntaxeBDD.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  static const char gGGSsourceFile [] = "syntaxeBDD.ggs" ;
  #define SOURCE_FILE_AT_LINE(line) , gGGSsourceFile, line
#else
  #define SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "grammaireBDD.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'axiomeBDD'                *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_axiomeBDD_syntaxeBDD_119_17_ (lexiqueBDD & _inLexique,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeListeCalculs  &var_cas_listeCalculs,
                                GGS_typeDomainMap  &var_cas_ioDomainMap) {
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_syntaxeBDD_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_domain) ;
          GGS_lstring  var_cas_domainName ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_id) ;
          var_cas_domainName.defineAttributeFromScanner (_inLexique.att_token, _inLexique) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3A) ;
          GGS_typeDomain  var_cas_d ;
          nt_domainDefinition_ (_inLexique, var_cas_ioDomainMap, var_cas_d) ;
          var_cas_ioDomainMap.method_insertKey (_inLexique, var_cas_domainName, var_cas_d SOURCE_FILE_AT_LINE (132)) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_include) ;
          GGS_lstring  var_cas_nomFichierInclusion ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_string) ;
          var_cas_nomFichierInclusion.defineAttributeFromScanner (_inLexique.att_token, _inLexique) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          { lexiqueBDD * scanner_ = NULL ;
            macroMyNew (scanner_, lexiqueBDD (_inLexique.galgas_IO_Ptr () COMMA_HERE)) ;
            scanner_->mPerformGeneration = _inLexique.mPerformGeneration ;
            grammaireBDD grammar_ ;
            const C_String sourceFileName = _inLexique.sourceFileName ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (var_cas_nomFichierInclusion) ;
            try{
              scanner_->resetAndLoadSourceFromFile (sourceFileName) ;
              grammar_.startParsing_ (*scanner_,
                                          var_cas_tableFormules,
                                          var_cas_listeCalculs,
                                          var_cas_ioDomainMap) ;
            }catch (const C_TextReadException & inFileReadError) {
              var_cas_nomFichierInclusion.signalSemanticError (_inLexique, inFileReadError.what () SOURCE_FILE_AT_LINE (139)) ;
            }
            macroMyDelete (scanner_, lexiqueBDD) ;
          }
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_use_5Fand) ;
          GGS_typeCalcul  var_cas_calcul ;
          var_cas_calcul = GGS_typeUse_AND::constructor_new (_inLexique COMMA_HERE) ;
          var_cas_listeCalculs._addAssign_operation (var_cas_calcul) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        case 5 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_use_5Fite) ;
          GGS_typeCalcul  var_cas_calcul ;
          var_cas_calcul = GGS_typeUse_ITE::constructor_new (_inLexique COMMA_HERE) ;
          var_cas_listeCalculs._addAssign_operation (var_cas_calcul) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        case 6 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_use_5Fand_5Fite) ;
          GGS_typeCalcul  var_cas_calcul ;
          var_cas_calcul = GGS_typeUse_AND_ITE::constructor_new (_inLexique COMMA_HERE) ;
          var_cas_listeCalculs._addAssign_operation (var_cas_calcul) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        case 7 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_and_5Fcache) ;
          GGS_luint  var_cas_dimensionCache ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
          var_cas_dimensionCache.defineAttributeFromScanner (_inLexique.att_valeur, _inLexique) ;
          GGS_typeCalcul  var_cas_calcul ;
          var_cas_calcul = GGS_typeDimensionnerANDCache::constructor_new (_inLexique, var_cas_dimensionCache COMMA_HERE) ;
          var_cas_listeCalculs._addAssign_operation (var_cas_calcul) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        case 8 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_ite_5Fcache) ;
          GGS_luint  var_cas_dimensionCache ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
          var_cas_dimensionCache.defineAttributeFromScanner (_inLexique.att_valeur, _inLexique) ;
          GGS_typeCalcul  var_cas_calcul ;
          var_cas_calcul = GGS_typeDimensionnerITECache::constructor_new (_inLexique, var_cas_dimensionCache COMMA_HERE) ;
          var_cas_listeCalculs._addAssign_operation (var_cas_calcul) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        case 9 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_map) ;
          GGS_luint  var_cas_dimensionTable ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
          var_cas_dimensionTable.defineAttributeFromScanner (_inLexique.att_valeur, _inLexique) ;
          GGS_typeCalcul  var_cas_calcul ;
          var_cas_calcul = GGS_typeDimensionnerTable::constructor_new (_inLexique, var_cas_dimensionTable COMMA_HERE) ;
          var_cas_listeCalculs._addAssign_operation (var_cas_calcul) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        case 10 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_bdd) ;
          GGS_typeCalcul  var_cas_calcul ;
          var_cas_calcul = GGS_typeAfficherBilan::constructor_new (_inLexique COMMA_HERE) ;
          var_cas_listeCalculs._addAssign_operation (var_cas_calcul) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        case 11 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_display) ;
          GGS_luint  var_cas_afficherBDD ;
          var_cas_afficherBDD = GGS_luint::constructor_new (_inLexique, GGS_uint (true, 1U), GGS_location (_inLexique) COMMA_HERE) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__23) ;
          nt_analyserFormule_ (_inLexique, var_cas_tableFormules, var_cas_ioDomainMap, var_cas_listeCalculs, var_cas_afficherBDD) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        case 12 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_dump) ;
          GGS_luint  var_cas_afficherBDD ;
          var_cas_afficherBDD = GGS_luint::constructor_new (_inLexique, GGS_uint (true, 2U), GGS_location (_inLexique) COMMA_HERE) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__23) ;
          nt_analyserFormule_ (_inLexique, var_cas_tableFormules, var_cas_ioDomainMap, var_cas_listeCalculs, var_cas_afficherBDD) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        case 13 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_verify) ;
          GGS_luint  var_cas_afficherBDD ;
          var_cas_afficherBDD = GGS_luint::constructor_new (_inLexique, GGS_uint (true, 3U), GGS_location (_inLexique) COMMA_HERE) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__23) ;
          nt_analyserFormule_ (_inLexique, var_cas_tableFormules, var_cas_ioDomainMap, var_cas_listeCalculs, var_cas_afficherBDD) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        case 14 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__23) ;
          GGS_luint  var_cas_afficherBDD ;
          var_cas_afficherBDD = GGS_luint::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) ;
          nt_analyserFormule_ (_inLexique, var_cas_tableFormules, var_cas_ioDomainMap, var_cas_listeCalculs, var_cas_afficherBDD) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_end) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'domainDefinition'            *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_domainDefinition_syntaxeBDD_222_24_ (lexiqueBDD & _inLexique,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeDomain  &var_cas_outDomain) {
  switch (select_syntaxeBDD_1 (_inLexique)) {
    case 1 : {
      GGS_luint  var_cas_lowBound ;
      GGS_luint  var_cas_highBound ;
      switch (select_syntaxeBDD_2 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
          var_cas_lowBound.defineAttributeFromScanner (_inLexique.att_valeur, _inLexique) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__2E_2E) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
          var_cas_highBound.defineAttributeFromScanner (_inLexique.att_valeur, _inLexique) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_bool) ;
          var_cas_lowBound = GGS_luint::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) ;
          switch (select_syntaxeBDD_3 (_inLexique)) {
            case 1 : {
              var_cas_highBound = GGS_luint::constructor_new (_inLexique, GGS_uint (true, 1U), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__5B) ;
              GGS_luint  var_cas_dim ;
              _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
              var_cas_dim.defineAttributeFromScanner (_inLexique.att_valeur, _inLexique) ;
              _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__5D) ;
              if (var_cas_dim._isBuilt ()) {
                ::routine_getHighBound (_inLexique,  var_cas_dim,  var_cas_highBound SOURCE_FILE_AT_LINE (243)) ;
              }
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          break ;
      }
      GGS_luint  var_cas_dimension ;
      if (var_cas_lowBound._isBuilt () &&
          var_cas_highBound._isBuilt ()) {
        ::routine_verifyBoundsAndComputeDimension (_inLexique,  var_cas_lowBound,  var_cas_highBound,  var_cas_dimension SOURCE_FILE_AT_LINE (247)) ;
      }
      var_cas_outDomain = GGS_typeDirectDomain::constructor_new (_inLexique, var_cas_lowBound, var_cas_highBound, var_cas_dimension COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_record) ;
      GGS_typeDomainMap  var_cas_recordDomainMap ;
      var_cas_recordDomainMap = GGS_typeDomainMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
      { bool syntaxRepeat = true ;
        while (syntaxRepeat) {
            GGS_lstring  var_cas_fieldName ;
            _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_id) ;
            var_cas_fieldName.defineAttributeFromScanner (_inLexique.att_token, _inLexique) ;
            _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3A) ;
            GGS_typeDomain  var_cas_d ;
            nt_domainDefinition_ (_inLexique, var_cas_ioDomainMap, var_cas_d) ;
            _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3B) ;
            var_cas_recordDomainMap.method_insertKey (_inLexique, var_cas_fieldName, var_cas_d SOURCE_FILE_AT_LINE (259)) ;
          switch (select_repeat_syntaxeBDD_4 (_inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat = false ;
              break ;
          }
        }
      }
      _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_end) ;
      _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_record) ;
      var_cas_outDomain = GGS_typeRecordDomain::constructor_new (_inLexique, var_cas_recordDomainMap COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_lstring  var_cas_domainName ;
      _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_id) ;
      var_cas_domainName.defineAttributeFromScanner (_inLexique.att_token, _inLexique) ;
      if (var_cas_ioDomainMap._isBuilt ()) {
        var_cas_ioDomainMap (HERE)->method_searchKey (_inLexique, var_cas_domainName, var_cas_outDomain SOURCE_FILE_AT_LINE (268)) ;
      }
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'analyserFormule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_analyserFormule_syntaxeBDD_276_23_ (lexiqueBDD & _inLexique,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeListeCalculs  &var_cas_listeCalculs,
                                GGS_luint  var_cas_afficherBDD) {
  GGS_lstring  var_cas_nomFormule ;
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_id) ;
  var_cas_nomFormule.defineAttributeFromScanner (_inLexique.att_token, _inLexique) ;
  GGS_typeTableVariablesBool  var_cas_tableVariables ;
  GGS_uint  var_cas_bddSlot ;
  GGS_typeFormalArgumentsList  var_cas_listeArgFormelsBool ;
  nt_argsFormelsFormule_ (_inLexique, var_cas_tableVariables, var_cas_bddSlot, var_cas_ioDomainMap, var_cas_listeArgFormelsBool) ;
  GGS_typeCalcul  var_cas_calcul ;
  nt_type_formule_ (_inLexique, var_cas_tableVariables, var_cas_bddSlot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_nomFormule, var_cas_listeArgFormelsBool, var_cas_afficherBDD, var_cas_calcul) ;
  var_cas_listeCalculs._addAssign_operation (var_cas_calcul) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'argsFormelsFormule'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_argsFormelsFormule_syntaxeBDD_311_26_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  &var_cas_tableVariables,
                                GGS_uint  &var_cas_outBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeFormalArgumentsList  &var_cas_listeArgFormelsBool) {
  var_cas_tableVariables = GGS_typeTableVariablesBool::constructor_emptyMap (_inLexique COMMA_HERE) ;
  var_cas_outBDDslot = GGS_uint (true, 0U) ;
  switch (select_syntaxeBDD_5 (_inLexique)) {
    case 1 : {
      var_cas_listeArgFormelsBool = GGS_typeFormalArgumentsList::constructor_emptyList (_inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__5B) ;
      nt_declarations_ (_inLexique, var_cas_tableVariables, var_cas_outBDDslot, var_cas_ioDomainMap, var_cas_listeArgFormelsBool) ;
      _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__5D) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "exploreRecordDomain"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_exploreRecordDomain (C_Lexique & _inLexique,
                                const GGS_typeDomainMap  & var_cas_inRecordMap,
                                GGS_typeTableVariablesBool  & var_cas_outMap,
                                GGS_uint  & var_cas_ioBDDslot,
                                const GGS_location  & var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  var_cas_outMap = GGS_typeTableVariablesBool::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeDomainMap::element_type * operand_8363 = var_cas_inRecordMap.firstObject () ;
  while ((operand_8363 != NULL)) {
    macroValidPointer (operand_8363) ;
    if (operand_8363->mInfo.mDomain._isBuilt ()) {
      if (dynamic_cast <cPtr_typeDirectDomain *> (operand_8363->mInfo.mDomain.getPtr ()) != NULL) {
        cPtr_typeDirectDomain * operand_8435 = dynamic_cast <cPtr_typeDirectDomain *> (operand_8363->mInfo.mDomain.getPtr ()) ;
        macroValidPointer (operand_8435) ; 
        GGS_luint  var_cas_slot ;
        var_cas_slot = GGS_luint::constructor_new (_inLexique, var_cas_ioBDDslot, GGS_location (_inLexique) COMMA_HERE) ;
        GGS_typeVariableDescriptor  var_cas_v ;
        var_cas_v = GGS_typeDirectVariable::constructor_new (_inLexique, var_cas_slot, operand_8435->mBitsCount, operand_8435->mLowBound, operand_8435->mHighBound COMMA_HERE) ;
        var_cas_outMap.method_insertKey (_inLexique, operand_8363->mKey, var_cas_v SOURCE_FILE_AT_LINE (348)) ;
        var_cas_ioBDDslot = var_cas_ioBDDslot._add_operation (_inLexique, operand_8435->mBitsCount.reader_uint (_inLexique SOURCE_FILE_AT_LINE (349)) SOURCE_FILE_AT_LINE (349)) ;
      }else if (dynamic_cast <cPtr_typeRecordDomain *> (operand_8363->mInfo.mDomain.getPtr ()) != NULL) {
        cPtr_typeRecordDomain * operand_8768 = dynamic_cast <cPtr_typeRecordDomain *> (operand_8363->mInfo.mDomain.getPtr ()) ;
        macroValidPointer (operand_8768) ; 
        GGS_typeTableVariablesBool  var_cas_localMap ;
        ::routine_exploreRecordDomain (_inLexique,  operand_8768->mRecordMap,  var_cas_localMap,  var_cas_ioBDDslot,  var_cas_inErrorLocation SOURCE_FILE_AT_LINE (352)) ;
        GGS_typeVariableDescriptor  var_cas_v ;
        var_cas_v = GGS_typeRecordVariable::constructor_new (_inLexique, var_cas_localMap COMMA_HERE) ;
        var_cas_outMap.method_insertKey (_inLexique, operand_8363->mKey, var_cas_v SOURCE_FILE_AT_LINE (354)) ;
      }else{ // Else part
        var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "a domain was expected here ; I found ")) + (operand_8363->mInfo.mDomain.reader_messageDomainType (_inLexique SOURCE_FILE_AT_LINE (356)))) SOURCE_FILE_AT_LINE (357)) ;
      }
    }
    operand_8363 = operand_8363->nextObject () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'declarations'              *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_declarations_syntaxeBDD_363_20_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  &var_cas_tableVariables,
                                GGS_uint  &var_cas_ioBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeFormalArgumentsList  &var_cas_listeArgFormelsBool) {
  var_cas_listeArgFormelsBool = GGS_typeFormalArgumentsList::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_lstring  var_cas_nom ;
        _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_id) ;
        var_cas_nom.defineAttributeFromScanner (_inLexique.att_token, _inLexique) ;
        GGS_typeDomain  var_cas_domain ;
        nt_dimension_ (_inLexique, var_cas_ioDomainMap, var_cas_domain) ;
        if (var_cas_domain._isBuilt ()) {
          if (dynamic_cast <cPtr_typeDirectDomain *> (var_cas_domain.getPtr ()) != NULL) {
            cPtr_typeDirectDomain * operand_9661 = dynamic_cast <cPtr_typeDirectDomain *> (var_cas_domain.getPtr ()) ;
            macroValidPointer (operand_9661) ; 
            GGS_luint  var_cas_slot ;
            var_cas_slot = GGS_luint::constructor_new (_inLexique, var_cas_ioBDDslot, GGS_location (_inLexique) COMMA_HERE) ;
            GGS_typeVariableDescriptor  var_cas_v ;
            var_cas_v = GGS_typeDirectVariable::constructor_new (_inLexique, var_cas_slot, operand_9661->mBitsCount, operand_9661->mLowBound, operand_9661->mHighBound COMMA_HERE) ;
            var_cas_tableVariables.method_insertKey (_inLexique, var_cas_nom, var_cas_v SOURCE_FILE_AT_LINE (379)) ;
            var_cas_ioBDDslot = var_cas_ioBDDslot._add_operation (_inLexique, operand_9661->mBitsCount.reader_uint (_inLexique SOURCE_FILE_AT_LINE (380)) SOURCE_FILE_AT_LINE (380)) ;
            GGS_luint  var_cas_num ;
            { cPtr_typeDirectVariable * ptrExtraire_ = dynamic_cast <cPtr_typeDirectVariable *> (var_cas_v.getPtr ()) ;
              if (ptrExtraire_ == NULL) {
                var_cas_num._drop_operation () ;
                if (var_cas_v.getPtr () != NULL) {
                  TC_UniqueArray <C_String> message1_ (1, "" COMMA_HERE) ;
                  C_String message2_ ;
                  message1_ (0 COMMA_HERE) << cPtr_typeDirectVariable::static_string_message_variableDescriptorErrorMessage () ;
                  message2_ << var_cas_v (HERE)->message_variableDescriptorErrorMessage () ;
                  var_cas_nom.signalExtractError (_inLexique, message1_, message2_ SOURCE_FILE_AT_LINE (382)) ;
                }
              }else{
                macroValidPointer (ptrExtraire_) ;
                var_cas_num = ptrExtraire_->mIndex ;
              }
            }
            var_cas_listeArgFormelsBool._addAssign_operation (var_cas_num, operand_9661->mBitsCount, operand_9661->mLowBound, operand_9661->mHighBound) ;
          }else if (dynamic_cast <cPtr_typeRecordDomain *> (var_cas_domain.getPtr ()) != NULL) {
            cPtr_typeRecordDomain * operand_10164 = dynamic_cast <cPtr_typeRecordDomain *> (var_cas_domain.getPtr ()) ;
            macroValidPointer (operand_10164) ; 
            GGS_typeTableVariablesBool  var_cas_recordMap ;
            GGS_location  var_cas_errorLocation ;
            var_cas_errorLocation = GGS_location (_inLexique) ;
            ::routine_exploreRecordDomain (_inLexique,  operand_10164->mRecordMap,  var_cas_recordMap,  var_cas_ioBDDslot,  var_cas_errorLocation SOURCE_FILE_AT_LINE (387)) ;
            GGS_typeVariableDescriptor  var_cas_v ;
            var_cas_v = GGS_typeRecordVariable::constructor_new (_inLexique, var_cas_recordMap COMMA_HERE) ;
            var_cas_tableVariables.method_insertKey (_inLexique, var_cas_nom, var_cas_v SOURCE_FILE_AT_LINE (389)) ;
            ::routine_buildFormalArgsList (_inLexique,  var_cas_v,  var_cas_listeArgFormelsBool,  var_cas_errorLocation SOURCE_FILE_AT_LINE (390)) ;
          }else{ // Else part
            var_cas_nom.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "a domain was expected here ; I found ")) + (var_cas_domain.reader_messageDomainType (_inLexique SOURCE_FILE_AT_LINE (392)))) SOURCE_FILE_AT_LINE (393)) ;
          }
        }
      switch (select_repeat_syntaxeBDD_6 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__2C) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'dimension'                *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_dimension_syntaxeBDD_403_17_ (lexiqueBDD & _inLexique,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeDomain  &var_cas_outDomain) {
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3A) ;
  switch (select_syntaxeBDD_7 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_bool) ;
      GGS_luint  var_cas_lowBound ;
      var_cas_lowBound = GGS_luint::constructor_new (_inLexique, GGS_uint (true, 0U), GGS_location (_inLexique) COMMA_HERE) ;
      GGS_luint  var_cas_highBound ;
      GGS_luint  var_cas_dim ;
      switch (select_syntaxeBDD_8 (_inLexique)) {
        case 1 : {
          var_cas_highBound = GGS_luint::constructor_new (_inLexique, GGS_uint (true, 1U), GGS_location (_inLexique) COMMA_HERE) ;
          var_cas_dim = GGS_luint::constructor_new (_inLexique, GGS_uint (true, 1U), GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__5B) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
          var_cas_dim.defineAttributeFromScanner (_inLexique.att_valeur, _inLexique) ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__5D) ;
          if (var_cas_dim._isBuilt ()) {
            ::routine_getHighBound (_inLexique,  var_cas_dim,  var_cas_highBound SOURCE_FILE_AT_LINE (420)) ;
          }
          } break ;
        default :
          break ;
      }
      var_cas_outDomain = GGS_typeDirectDomain::constructor_new (_inLexique, var_cas_lowBound, var_cas_highBound, var_cas_dim COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_domainName ;
      _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_id) ;
      var_cas_domainName.defineAttributeFromScanner (_inLexique.att_token, _inLexique) ;
      if (var_cas_ioDomainMap._isBuilt ()) {
        var_cas_ioDomainMap (HERE)->method_searchKey (_inLexique, var_cas_domainName, var_cas_outDomain SOURCE_FILE_AT_LINE (426)) ;
      }
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'type_formule'              *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_type_formule_syntaxeBDD_434_20_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_lstring  var_cas_nomFormule,
                                GGS_typeFormalArgumentsList  var_cas_listeArgFormelsBool,
                                GGS_luint  var_cas_afficherBDD,
                                GGS_typeCalcul  &var_cas_calcul) {
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3A_3D) ;
  GGS_luint  var_cas_numero ;
  GGS_typeFormule  var_cas_f ;
  GGS_typeTableVariablesBool  var_cas_tableVariablesLocales ;
  var_cas_tableVariablesLocales = var_cas_tableVariables ;
  nt_formule_ (_inLexique, var_cas_tableVariablesLocales, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_f) ;
  GGS_bdd var_cas_unusedBDD ;
  var_cas_unusedBDD = GGS_bdd::constructor_empty (_inLexique COMMA_HERE) ;
  var_cas_tableFormules.method_insertKeyGetIndex (_inLexique, var_cas_nomFormule, var_cas_numero, var_cas_listeArgFormelsBool, var_cas_unusedBDD SOURCE_FILE_AT_LINE (456)) ;
  var_cas_calcul = GGS_typeCalculSimple::constructor_new (_inLexique, var_cas_numero, var_cas_f, var_cas_nomFormule, var_cas_tableVariables, var_cas_afficherBDD COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'type_formule'              *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_type_formule_syntaxeBDD_462_20_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_lstring  var_cas_nomFormule,
                                GGS_typeFormalArgumentsList  var_cas_listeArgFormelsBool,
                                GGS_luint  var_cas_afficherBDD,
                                GGS_typeCalcul  &var_cas_calcul) {
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__2B_3D) ;
  GGS_lbool  var_cas_signe ;
  var_cas_signe = GGS_lbool::constructor_new (_inLexique, GGS_bool (true, true), GGS_location (_inLexique) COMMA_HERE) ;
  GGS_luint  var_cas_numero ;
  GGS_bdd var_cas_unusedBDD ;
  var_cas_unusedBDD = GGS_bdd::constructor_empty (_inLexique COMMA_HERE) ;
  var_cas_tableFormules.method_insertKeyGetIndex (_inLexique, var_cas_nomFormule, var_cas_numero, var_cas_listeArgFormelsBool, var_cas_unusedBDD SOURCE_FILE_AT_LINE (476)) ;
  GGS_typeFormule  var_cas_f ;
  GGS_typeTableVariablesBool  var_cas_tableVariablesLocales ;
  var_cas_tableVariablesLocales = var_cas_tableVariables ;
  nt_formule_ (_inLexique, var_cas_tableVariablesLocales, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_f) ;
  var_cas_calcul = GGS_typeCalculIteratif::constructor_new (_inLexique, var_cas_numero, var_cas_f, var_cas_nomFormule, var_cas_tableVariables, var_cas_signe, var_cas_afficherBDD COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'type_formule'              *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_type_formule_syntaxeBDD_491_20_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_lstring  var_cas_nomFormule,
                                GGS_typeFormalArgumentsList  var_cas_listeArgFormelsBool,
                                GGS_luint  var_cas_afficherBDD,
                                GGS_typeCalcul  &var_cas_calcul) {
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__2D_3D) ;
  GGS_lbool  var_cas_signe ;
  var_cas_signe = GGS_lbool::constructor_new (_inLexique, GGS_bool (true, false), GGS_location (_inLexique) COMMA_HERE) ;
  GGS_luint  var_cas_numero ;
  GGS_bdd var_cas_unusedBDD ;
  var_cas_unusedBDD = GGS_bdd::constructor_empty (_inLexique COMMA_HERE) ;
  var_cas_tableFormules.method_insertKeyGetIndex (_inLexique, var_cas_nomFormule, var_cas_numero, var_cas_listeArgFormelsBool, var_cas_unusedBDD SOURCE_FILE_AT_LINE (505)) ;
  GGS_typeFormule  var_cas_f ;
  GGS_typeTableVariablesBool  var_cas_tableVariablesLocales ;
  var_cas_tableVariablesLocales = var_cas_tableVariables ;
  nt_formule_ (_inLexique, var_cas_tableVariablesLocales, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_f) ;
  var_cas_calcul = GGS_typeCalculIteratif::constructor_new (_inLexique, var_cas_numero, var_cas_f, var_cas_nomFormule, var_cas_tableVariables, var_cas_signe, var_cas_afficherBDD COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'formule'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_formule_syntaxeBDD_523_15_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  nt_egalite_formule_ (_inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_formule) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_syntaxeBDD_9 (_inLexique)) {
        case 2 : {
          GGS_luint  var_cas_comparaison ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_comp) ;
          var_cas_comparaison.defineAttributeFromScanner (_inLexique.att_valeur, _inLexique) ;
          GGS_typeFormule  var_cas_g ;
          GGS_typeFormule  var_cas_h ;
          var_cas_h = var_cas_formule ;
          nt_egalite_formule_ (_inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_g) ;
          var_cas_formule = GGS_typeComparaisonFormules::constructor_new (_inLexique, var_cas_comparaison, var_cas_h, var_cas_g COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__2D_3E) ;
          GGS_typeFormule  var_cas_g ;
          GGS_typeFormule  var_cas_h ;
          var_cas_h = var_cas_formule ;
          nt_egalite_formule_ (_inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_g) ;
          var_cas_formule = GGS_typeFormuleImplique::constructor_new (_inLexique, var_cas_h, var_cas_g COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'egalite_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_egalite_formule_syntaxeBDD_570_23_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  nt_terme_formule_ (_inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_formule) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_syntaxeBDD_10 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__7C) ;
          GGS_typeFormule  var_cas_g ;
          GGS_typeFormule  var_cas_h ;
          var_cas_h = var_cas_formule ;
          nt_terme_formule_ (_inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_g) ;
          var_cas_formule = GGS_typeFormuleOu::constructor_new (_inLexique, var_cas_h, var_cas_g COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'terme_formule'              *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_terme_formule_syntaxeBDD_604_21_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  nt_facteur_formule_ (_inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_formule) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_syntaxeBDD_11 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__26) ;
          GGS_typeFormule  var_cas_g ;
          GGS_typeFormule  var_cas_h ;
          var_cas_h = var_cas_formule ;
          nt_facteur_formule_ (_inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_g) ;
          var_cas_formule = GGS_typeFormuleEt::constructor_new (_inLexique, var_cas_h, var_cas_g COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_facteur_formule_syntaxeBDD_637_23_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__28) ;
  nt_formule_ (_inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_formule) ;
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__29) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_facteur_formule_syntaxeBDD_657_23_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  /* var_cas_tableVariables */,
                                GGS_uint  /* var_cas_inBDDslot */,
                                GGS_typeDomainMap  &/* var_cas_ioDomainMap */,
                                GGS_typeTableFormules  &/* var_cas_tableFormules */,
                                GGS_typeFormule  &var_cas_formule) {
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_true) ;
  var_cas_formule = GGS_typeFormuleTrue::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_facteur_formule_syntaxeBDD_670_23_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  /* var_cas_inBDDslot */,
                                GGS_typeDomainMap  &/* var_cas_ioDomainMap */,
                                GGS_typeTableFormules  &/* var_cas_tableFormules */,
                                GGS_typeFormule  &var_cas_formule) {
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__7B) ;
  GGS_luint  var_cas_varIndex ;
  GGS_luint  var_cas_bitSize ;
  GGS_luint  var_cas_lowBound ;
  GGS_luint  var_cas_highBound ;
  GGS_location  var_cas_errorLocation ;
  nt_parse_scalar_argument_ (_inLexique, var_cas_tableVariables, var_cas_varIndex, var_cas_bitSize, var_cas_lowBound, var_cas_highBound, var_cas_errorLocation) ;
  GGS_luint  var_cas_comparaison ;
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_comp) ;
  var_cas_comparaison.defineAttributeFromScanner (_inLexique.att_valeur, _inLexique) ;
  nt_comparaisonVariable_ (_inLexique, var_cas_tableVariables, var_cas_varIndex, var_cas_bitSize, var_cas_lowBound, var_cas_highBound, var_cas_comparaison, var_cas_formule) ;
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__7D) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'comparaisonVariable'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_comparaisonVariable_syntaxeBDD_696_27_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  /* var_cas_tableVariables */,
                                GGS_luint  var_cas_numero,
                                GGS_luint  var_cas_dim,
                                GGS_luint  var_cas_lowBound,
                                GGS_luint  var_cas_highBound,
                                GGS_luint  var_cas_comparaison,
                                GGS_typeFormule  &var_cas_formule) {
  GGS_luint  var_cas_valeur ;
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_nombre) ;
  var_cas_valeur.defineAttributeFromScanner (_inLexique.att_valeur, _inLexique) ;
  if (var_cas_dim._isBuilt () &&
      var_cas_valeur._isBuilt ()) {
    ::routine_verifierDimensionValeurCorrecte (_inLexique,  var_cas_dim,  var_cas_valeur SOURCE_FILE_AT_LINE (707)) ;
  }
  var_cas_formule = GGS_typeFormuleComparaisonValeur::constructor_new (_inLexique, var_cas_numero, var_cas_dim, var_cas_lowBound, var_cas_highBound, var_cas_comparaison, var_cas_valeur COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'comparaisonVariable'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_comparaisonVariable_syntaxeBDD_713_27_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_luint  var_cas_inLeftVarIndex,
                                GGS_luint  var_cas_inLeftBitSize,
                                GGS_luint  var_cas_inLeftLowBound,
                                GGS_luint  var_cas_inLeftHighBound,
                                GGS_luint  var_cas_comparaison,
                                GGS_typeFormule  &var_cas_formule) {
  GGS_luint  var_cas_rightVarIndex ;
  GGS_luint  var_cas_rightBitSize ;
  GGS_luint  var_cas_rightLowBound ;
  GGS_luint  var_cas_rightHighBound ;
  GGS_location  var_cas_errorLocation ;
  nt_parse_scalar_argument_ (_inLexique, var_cas_tableVariables, var_cas_rightVarIndex, var_cas_rightBitSize, var_cas_rightLowBound, var_cas_rightHighBound, var_cas_errorLocation) ;
  if (var_cas_inLeftBitSize._isBuilt () &&
      var_cas_rightBitSize._isBuilt ()) {
    ::routine_verifierMemesDimensions (_inLexique,  var_cas_inLeftBitSize,  var_cas_rightBitSize SOURCE_FILE_AT_LINE (728)) ;
  }
  var_cas_formule = GGS_typeFormuleComparaisonVariable::constructor_new (_inLexique, var_cas_inLeftVarIndex, var_cas_inLeftBitSize, var_cas_inLeftLowBound, var_cas_inLeftHighBound, var_cas_comparaison, var_cas_rightVarIndex, var_cas_rightLowBound, var_cas_rightHighBound COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_facteur_formule_syntaxeBDD_736_23_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  /* var_cas_tableVariables */,
                                GGS_uint  /* var_cas_inBDDslot */,
                                GGS_typeDomainMap  &/* var_cas_ioDomainMap */,
                                GGS_typeTableFormules  &/* var_cas_tableFormules */,
                                GGS_typeFormule  &var_cas_formule) {
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_false) ;
  var_cas_formule = GGS_typeFormuleFalse::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_facteur_formule_syntaxeBDD_749_23_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__7E) ;
  GGS_typeFormule  var_cas_f ;
  nt_facteur_formule_ (_inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_f) ;
  var_cas_formule = GGS_typeFormuleNon::constructor_new (_inLexique, var_cas_f COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_facteur_formule_syntaxeBDD_770_23_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_if) ;
  GGS_typeFormule  var_cas_operande1 ;
  nt_formule_ (_inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_operande1) ;
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_then) ;
  GGS_typeFormule  var_cas_operande2 ;
  nt_formule_ (_inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_operande2) ;
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_else) ;
  GGS_typeFormule  var_cas_operande3 ;
  nt_formule_ (_inLexique, var_cas_tableVariables, var_cas_inBDDslot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_operande3) ;
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_end) ;
  var_cas_formule = GGS_typeFormuleIte::constructor_new (_inLexique, var_cas_operande1, var_cas_operande2, var_cas_operande3 COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_facteur_formule_syntaxeBDD_810_23_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__21) ;
  GGS_typeFormalArgumentsList  var_cas_listeNumVarsBool ;
  GGS_typeTableVariablesBool  var_cas_tableLocaleVariables ;
  var_cas_tableLocaleVariables = var_cas_tableVariables ;
  GGS_uint  var_cas_bddSlot ;
  var_cas_bddSlot = var_cas_inBDDslot ;
  nt_declarations_ (_inLexique, var_cas_tableLocaleVariables, var_cas_bddSlot, var_cas_ioDomainMap, var_cas_listeNumVarsBool) ;
  GGS_typeFormule  var_cas_f ;
  nt_facteur_formule_ (_inLexique, var_cas_tableLocaleVariables, var_cas_bddSlot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_f) ;
  GGS_typeFormule  var_cas_not_f ;
  var_cas_not_f = GGS_typeFormuleNon::constructor_new (_inLexique, var_cas_f COMMA_HERE) ;
  GGS_bdd var_cas_unusedBDD ;
  var_cas_unusedBDD = GGS_bdd::constructor_empty (_inLexique COMMA_HERE) ;
  GGS_typeFormule  var_cas_exist_not_f ;
  var_cas_exist_not_f = GGS_typeFormuleExist::constructor_new (_inLexique, var_cas_listeNumVarsBool, var_cas_not_f, var_cas_unusedBDD COMMA_HERE) ;
  var_cas_formule = GGS_typeFormuleNon::constructor_new (_inLexique, var_cas_exist_not_f COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_facteur_formule_syntaxeBDD_844_23_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  var_cas_inBDDslot,
                                GGS_typeDomainMap  &var_cas_ioDomainMap,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__3F) ;
  GGS_typeFormalArgumentsList  var_cas_listeNumVarsBool ;
  GGS_typeTableVariablesBool  var_cas_tableLocaleVariables ;
  var_cas_tableLocaleVariables = var_cas_tableVariables ;
  GGS_uint  var_cas_bddSlot ;
  var_cas_bddSlot = var_cas_inBDDslot ;
  nt_declarations_ (_inLexique, var_cas_tableLocaleVariables, var_cas_bddSlot, var_cas_ioDomainMap, var_cas_listeNumVarsBool) ;
  GGS_typeFormule  var_cas_f ;
  nt_facteur_formule_ (_inLexique, var_cas_tableLocaleVariables, var_cas_bddSlot, var_cas_ioDomainMap, var_cas_tableFormules, var_cas_f) ;
  GGS_bdd var_cas_unusedBDD ;
  var_cas_unusedBDD = GGS_bdd::constructor_empty (_inLexique COMMA_HERE) ;
  var_cas_formule = GGS_typeFormuleExist::constructor_new (_inLexique, var_cas_listeNumVarsBool, var_cas_f, var_cas_unusedBDD COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_facteur_formule_syntaxeBDD_875_23_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  /* var_cas_inBDDslot */,
                                GGS_typeDomainMap  &/* var_cas_ioDomainMap */,
                                GGS_typeTableFormules  &/* var_cas_tableFormules */,
                                GGS_typeFormule  &var_cas_formule) {
  GGS_luint  var_cas_varIndex ;
  GGS_luint  var_cas_bitSize ;
  GGS_luint  var_cas_lowBound ;
  GGS_luint  var_cas_highBound ;
  GGS_location  var_cas_errorLocation ;
  nt_parse_scalar_argument_ (_inLexique, var_cas_tableVariables, var_cas_varIndex, var_cas_bitSize, var_cas_lowBound, var_cas_highBound, var_cas_errorLocation) ;
  if (var_cas_bitSize._isBuilt () &&
      var_cas_errorLocation._isBuilt ()) {
    ::routine_verifierDimensionUn (_inLexique,  var_cas_bitSize,  var_cas_errorLocation SOURCE_FILE_AT_LINE (888)) ;
  }
  var_cas_formule = GGS_typeFormuleVar::constructor_new (_inLexique, var_cas_varIndex, var_cas_lowBound, var_cas_highBound COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'facteur_formule'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_facteur_formule_syntaxeBDD_894_23_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  var_cas_tableVariables,
                                GGS_uint  /* var_cas_inBDDslot */,
                                GGS_typeDomainMap  &/* var_cas_ioDomainMap */,
                                GGS_typeTableFormules  &var_cas_tableFormules,
                                GGS_typeFormule  &var_cas_formule) {
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__23) ;
  GGS_lstring  var_cas_nom ;
  GGS_luint  var_cas_numero ;
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_id) ;
  var_cas_nom.defineAttributeFromScanner (_inLexique.att_token, _inLexique) ;
  GGS_typeFormalArgumentsList  var_cas_listeArgsFormelsBool ;
  GGS_bdd var_cas_23894 ;
  if (var_cas_tableFormules._isBuilt ()) {
    var_cas_tableFormules (HERE)->method_searchKeyGetIndex (_inLexique, var_cas_nom, var_cas_numero, var_cas_listeArgsFormelsBool, var_cas_23894 SOURCE_FILE_AT_LINE (906)) ;
  }
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__5B) ;
  GGS_typeActualArgumentsList  var_cas_listeArgsEffectifsBool ;
  var_cas_listeArgsEffectifsBool = GGS_typeActualArgumentsList::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_typeVariableDescriptor  var_cas_varDescriptor ;
        GGS_location  var_cas_errorLocation ;
        nt_parse_argument_ (_inLexique, var_cas_tableVariables, var_cas_varDescriptor, var_cas_errorLocation) ;
        if (var_cas_varDescriptor._isBuilt ()) {
          if (dynamic_cast <cPtr_typeDirectVariable *> (var_cas_varDescriptor.getPtr ()) != NULL) {
            cPtr_typeDirectVariable * operand_24159 = dynamic_cast <cPtr_typeDirectVariable *> (var_cas_varDescriptor.getPtr ()) ;
            macroValidPointer (operand_24159) ; 
            var_cas_listeArgsEffectifsBool._addAssign_operation (operand_24159->mIndex, operand_24159->mBitSize, operand_24159->mLowBound, operand_24159->mHighBound, var_cas_errorLocation) ;
          }else if (dynamic_cast <cPtr_typeRecordVariable *> (var_cas_varDescriptor.getPtr ()) != NULL) {
            cPtr_typeRecordVariable * operand_24346 = dynamic_cast <cPtr_typeRecordVariable *> (var_cas_varDescriptor.getPtr ()) ;
            macroValidPointer (operand_24346) ; 
            ::routine_buildActualArgsList (_inLexique,  operand_24346->mMap,  var_cas_listeArgsEffectifsBool,  var_cas_errorLocation SOURCE_FILE_AT_LINE (917)) ;
          }else{ // Else part
            var_cas_errorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "a variable was expected here ; I found ")) + (var_cas_varDescriptor.reader_variableDescriptorErrorMessage (_inLexique SOURCE_FILE_AT_LINE (920)))) SOURCE_FILE_AT_LINE (921)) ;
          }
        }
      switch (select_repeat_syntaxeBDD_12 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__2C) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__5D) ;
  GGS_location  var_cas_positionFinListe ;
  var_cas_positionFinListe = GGS_location (_inLexique) ;
  ::routine_verifierNombreArgumentsBool (_inLexique,  var_cas_listeArgsFormelsBool,  var_cas_listeArgsEffectifsBool,  var_cas_positionFinListe SOURCE_FILE_AT_LINE (928)) ;
  GGS_bdd var_cas_unusedBDD ;
  var_cas_unusedBDD = GGS_bdd::constructor_empty (_inLexique COMMA_HERE) ;
  GGS_lbool  var_cas_unusedBool ;
  var_cas_unusedBool = GGS_lbool::constructor_new (_inLexique, GGS_bool (true, false), GGS_location (_inLexique) COMMA_HERE) ;
  var_cas_formule = GGS_typeFormuleFor::constructor_new (_inLexique, var_cas_numero, var_cas_listeArgsEffectifsBool, var_cas_unusedBDD, var_cas_unusedBool COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'parse_argument'             *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_parse_argument_syntaxeBDD_936_22_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  &var_cas_ioVarMap,
                                GGS_typeVariableDescriptor  &var_cas_outVarDescriptor,
                                GGS_location  &var_cas_outErrorLocation) {
  GGS_lstring  var_cas_varName ;
  _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_id) ;
  var_cas_varName.defineAttributeFromScanner (_inLexique.att_token, _inLexique) ;
  var_cas_outErrorLocation = var_cas_varName.reader_location (_inLexique SOURCE_FILE_AT_LINE (943)) ;
  if (var_cas_ioVarMap._isBuilt ()) {
    var_cas_ioVarMap (HERE)->method_searchKey (_inLexique, var_cas_varName, var_cas_outVarDescriptor SOURCE_FILE_AT_LINE (944)) ;
  }
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_syntaxeBDD_13 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1__2E) ;
          GGS_location  var_cas_errorLoc ;
          var_cas_errorLoc = GGS_location (_inLexique) ;
          GGS_typeTableVariablesBool  var_cas_fieldMap ;
          { cPtr_typeRecordVariable * ptrExtraire_ = dynamic_cast <cPtr_typeRecordVariable *> (var_cas_outVarDescriptor.getPtr ()) ;
            if (ptrExtraire_ == NULL) {
              var_cas_fieldMap._drop_operation () ;
              if (var_cas_outVarDescriptor.getPtr () != NULL) {
                TC_UniqueArray <C_String> message1_ (1, "" COMMA_HERE) ;
                C_String message2_ ;
                message1_ (0 COMMA_HERE) << cPtr_typeRecordVariable::static_string_message_variableDescriptorErrorMessage () ;
                message2_ << var_cas_outVarDescriptor (HERE)->message_variableDescriptorErrorMessage () ;
                var_cas_errorLoc.signalExtractError (_inLexique, message1_, message2_ SOURCE_FILE_AT_LINE (951)) ;
              }
            }else{
              macroValidPointer (ptrExtraire_) ;
              var_cas_fieldMap = ptrExtraire_->mMap ;
            }
          }
          GGS_lstring  var_cas_fieldName ;
          _inLexique.acceptTerminal (lexiqueBDD::lexiqueBDD_1_id) ;
          var_cas_fieldName.defineAttributeFromScanner (_inLexique.att_token, _inLexique) ;
          var_cas_outErrorLocation = var_cas_fieldName.reader_location (_inLexique SOURCE_FILE_AT_LINE (954)) ;
          if (var_cas_fieldMap._isBuilt ()) {
            var_cas_fieldMap (HERE)->method_searchKey (_inLexique, var_cas_fieldName, var_cas_outVarDescriptor SOURCE_FILE_AT_LINE (955)) ;
          }
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'parse_scalar_argument'          *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxeBDD::
syntaxeBDD::
pr_parse_scalar_argument_syntaxeBDD_961_29_ (lexiqueBDD & _inLexique,
                                GGS_typeTableVariablesBool  &var_cas_ioVarMap,
                                GGS_luint  &var_cas_outVarIndex,
                                GGS_luint  &var_cas_outBitSize,
                                GGS_luint  &var_cas_outLowBound,
                                GGS_luint  &var_cas_outHighBound,
                                GGS_location  &var_cas_outErrorLocation) {
  GGS_typeVariableDescriptor  var_cas_v ;
  nt_parse_argument_ (_inLexique, var_cas_ioVarMap, var_cas_v, var_cas_outErrorLocation) ;
  { cPtr_typeDirectVariable * ptrExtraire_ = dynamic_cast <cPtr_typeDirectVariable *> (var_cas_v.getPtr ()) ;
    if (ptrExtraire_ == NULL) {
      var_cas_outVarIndex._drop_operation () ;
      var_cas_outBitSize._drop_operation () ;
      var_cas_outLowBound._drop_operation () ;
      var_cas_outHighBound._drop_operation () ;
      if (var_cas_v.getPtr () != NULL) {
        TC_UniqueArray <C_String> message1_ (1, "" COMMA_HERE) ;
        C_String message2_ ;
        message1_ (0 COMMA_HERE) << cPtr_typeDirectVariable::static_string_message_variableDescriptorErrorMessage () ;
        message2_ << var_cas_v (HERE)->message_variableDescriptorErrorMessage () ;
        var_cas_outErrorLocation.signalExtractError (_inLexique, message1_, message2_ SOURCE_FILE_AT_LINE (972)) ;
      }
    }else{
      macroValidPointer (ptrExtraire_) ;
      var_cas_outVarIndex = ptrExtraire_->mIndex ;
      var_cas_outBitSize = ptrExtraire_->mBitSize ;
      var_cas_outLowBound = ptrExtraire_->mLowBound ;
      var_cas_outHighBound = ptrExtraire_->mHighBound ;
    }
  }
}

//---------------------------------------------------------------------------*

