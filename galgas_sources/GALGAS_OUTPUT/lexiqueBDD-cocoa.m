//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'lexiqueBDD-cocoa.m'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 11th, 2009, at 11h51'5"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1


//---------------------------------------------------------------------------*

#import "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#import "lexiqueBDD-cocoa.h"

//---------------------------------------------------------------------------*

@implementation OC_Lexique_lexiqueBDD

//---------------------------------------------------------------------------*

- (id) init {
  self = [super init] ;
  if (self) {
    mLexicalAttribute_att_idf = [[NSMutableString alloc] init] ;
    mLexicalAttribute_att_token = [[NSMutableString alloc] init] ;
    mLexicalAttribute_att_valeur = 0 ;
  }
  return self ;
}

//---------------------------------------------------------------------------*

- (void) dealloc {
  [mLexicalAttribute_att_idf release] ;
  [mLexicalAttribute_att_token release] ;
  [super dealloc] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           Template Delimiters                             *
//                                                                           *
//---------------------------------------------------------------------------*


//---------------------------------------------------------------------------*
//                                                                           *
//                           Template Replacments                            *
//                                                                           *
//---------------------------------------------------------------------------*



//---------------------------------------------------------------------------*
//                                                                           *
//            Terminal Symbols as end of script in template mark             *
//                                                                           *
//---------------------------------------------------------------------------*

static const BOOL kEndOfScriptInTemplateArray_lexiqueBDD [45] = {
  NO /* nombre */,
  NO /* id */,
  NO /* string */,
  NO /* comp */,
  NO /* ( */,
  NO /* ) */,
  NO /* { */,
  NO /* } */,
  NO /* [ */,
  NO /* ] */,
  NO /* := */,
  NO /* : */,
  NO /* . */,
  NO /* .. */,
  NO /* += */,
  NO /* -= */,
  NO /* -> */,
  NO /* & */,
  NO /* | */,
  NO /* ~ */,
  NO /* , */,
  NO /* ? */,
  NO /* ! */,
  NO /* ; */,
  NO /* # */,
  NO /* ite_cache */,
  NO /* and_cache */,
  NO /* use_and */,
  NO /* use_ite */,
  NO /* use_and_ite */,
  NO /* map */,
  NO /* bdd */,
  NO /* domain */,
  NO /* bool */,
  NO /* record */,
  NO /* true */,
  NO /* false */,
  NO /* display */,
  NO /* include */,
  NO /* dump */,
  NO /* verify */,
  NO /* end */,
  NO /* if */,
  NO /* then */,
  NO /* else */
} ;


//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'motsReservesKerBDD'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const C_cocoa_lexique_table_entry ktable_for_lexiqueBDD_motsReservesKerBDD [20] = {
  {@"if", lexiqueBDD_1_if},
  {@"bdd", lexiqueBDD_1_bdd},
  {@"end", lexiqueBDD_1_end},
  {@"map", lexiqueBDD_1_map},
  {@"bool", lexiqueBDD_1_bool},
  {@"dump", lexiqueBDD_1_dump},
  {@"else", lexiqueBDD_1_else},
  {@"then", lexiqueBDD_1_then},
  {@"true", lexiqueBDD_1_true},
  {@"false", lexiqueBDD_1_false},
  {@"domain", lexiqueBDD_1_domain},
  {@"record", lexiqueBDD_1_record},
  {@"verify", lexiqueBDD_1_verify},
  {@"display", lexiqueBDD_1_display},
  {@"include", lexiqueBDD_1_include},
  {@"use_and", lexiqueBDD_1_use_5F_and},
  {@"use_ite", lexiqueBDD_1_use_5F_ite},
  {@"and_cache", lexiqueBDD_1_and_5F_cache},
  {@"ite_cache", lexiqueBDD_1_ite_5F_cache},
  {@"use_and_ite", lexiqueBDD_1_use_5F_and_5F_ite}
} ;

static SInt32 search_into_lexiqueBDD_motsReservesKerBDD (NSString * inSearchedString) {
  return searchStringInTable (inSearchedString, ktable_for_lexiqueBDD_motsReservesKerBDD, 20) ;
}


//---------------------------------------------------------------------------*
//                                                                           *
//               P A R S E    L E X I C A L    T O K E N                     *
//                                                                           *
//---------------------------------------------------------------------------*

- (void) parseLexicalTokenForLexicalColoring {
  mLoop = YES ;
  BOOL scanningOk = YES ;
  mTokenCode = 0 ;
  while ((mTokenCode == 0) && (mCurrentChar != '\0')) {
    mTokenFirstLocation = mCurrentLocation ;
    [mLexicalAttribute_att_idf setString:@""] ;
    [mLexicalAttribute_att_token setString:@""] ;
    mLexicalAttribute_att_valeur = 0 ;
    mTokenFirstLocation = mCurrentLocation ;
    if (scanningOk && ([self testForInputFromChar:97 toChar:122] || [self testForInputFromChar:65 toChar:90])) {
      do {
        scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_att_idf, scanner_cocoa_function_toLower (mPreviousChar)) ;
        scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_att_token, mPreviousChar) ;
        if (scanningOk && ([self testForInputFromChar:97 toChar:122] || [self testForInputFromChar:65 toChar:90] || [self testForInputChar:95] || [self testForInputFromChar:48 toChar:57])) {
        }else{
          mLoop = NO ;
        }
      }while (mLoop && scanningOk) ;
      mLoop = YES ;
      if (mTokenCode == 0) {
        mTokenCode = search_into_lexiqueBDD_motsReservesKerBDD (mLexicalAttribute_att_idf) ;
      }
      if (mTokenCode == 0) {
        mTokenCode = lexiqueBDD_1_id ;
      }
    }else if (scanningOk && ([self testForInputChar:34])) {
      do {
        if (scanningOk && ([self testForInputChar:32] || [self testForInputChar:33] || [self testForInputFromChar:35 toChar:126])) {
          scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_att_token, mPreviousChar) ;
        }else{
          mLoop = NO ;
        }
      }while (mLoop && scanningOk) ;
      mLoop = YES ;
      if (scanningOk && ([self testForInputChar:34])) {
        mTokenCode = lexiqueBDD_1_string ;
      }else{
        scanningOk = NO ;
      }
    }else if (scanningOk && ([self testForInputFromChar:48 toChar:57])) {
      scanner_cocoa_routine_enterDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_att_valeur) ;
      do {
        if (scanningOk && ([self testForInputFromChar:48 toChar:57])) {
          scanner_cocoa_routine_enterDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_att_valeur) ;
        }else if (scanningOk && ([self testForInputChar:95])) {
        }else{
          mLoop = NO ;
        }
      }while (mLoop && scanningOk) ;
      mLoop = YES ;
      mTokenCode = lexiqueBDD_1_nombre ;
    }else if (scanningOk && [self testForInputString:@":=" advance:YES]) {
      mTokenCode = lexiqueBDD_1__3A__3D_ ;
    }else if (scanningOk && [self testForInputString:@".." advance:YES]) {
      mTokenCode = lexiqueBDD_1__2E__2E_ ;
    }else if (scanningOk && [self testForInputString:@"->" advance:YES]) {
      mTokenCode = lexiqueBDD_1__2D__3E_ ;
    }else if (scanningOk && [self testForInputString:@"-=" advance:YES]) {
      mTokenCode = lexiqueBDD_1__2D__3D_ ;
    }else if (scanningOk && [self testForInputString:@"+=" advance:YES]) {
      mTokenCode = lexiqueBDD_1__2B__3D_ ;
    }else if (scanningOk && [self testForInputString:@"~" advance:YES]) {
      mTokenCode = lexiqueBDD_1__7E_ ;
    }else if (scanningOk && [self testForInputString:@"}" advance:YES]) {
      mTokenCode = lexiqueBDD_1__7D_ ;
    }else if (scanningOk && [self testForInputString:@"|" advance:YES]) {
      mTokenCode = lexiqueBDD_1__7C_ ;
    }else if (scanningOk && [self testForInputString:@"{" advance:YES]) {
      mTokenCode = lexiqueBDD_1__7B_ ;
    }else if (scanningOk && [self testForInputString:@"]" advance:YES]) {
      mTokenCode = lexiqueBDD_1__5D_ ;
    }else if (scanningOk && [self testForInputString:@"[" advance:YES]) {
      mTokenCode = lexiqueBDD_1__5B_ ;
    }else if (scanningOk && [self testForInputString:@"\?" advance:YES]) {
      mTokenCode = lexiqueBDD_1__3F_ ;
    }else if (scanningOk && [self testForInputString:@";" advance:YES]) {
      mTokenCode = lexiqueBDD_1__3B_ ;
    }else if (scanningOk && [self testForInputString:@":" advance:YES]) {
      mTokenCode = lexiqueBDD_1__3A_ ;
    }else if (scanningOk && [self testForInputString:@"." advance:YES]) {
      mTokenCode = lexiqueBDD_1__2E_ ;
    }else if (scanningOk && [self testForInputString:@"," advance:YES]) {
      mTokenCode = lexiqueBDD_1__2C_ ;
    }else if (scanningOk && [self testForInputString:@")" advance:YES]) {
      mTokenCode = lexiqueBDD_1__29_ ;
    }else if (scanningOk && [self testForInputString:@"(" advance:YES]) {
      mTokenCode = lexiqueBDD_1__28_ ;
    }else if (scanningOk && [self testForInputString:@"&" advance:YES]) {
      mTokenCode = lexiqueBDD_1__26_ ;
    }else if (scanningOk && [self testForInputString:@"#" advance:YES]) {
      mTokenCode = lexiqueBDD_1__23_ ;
    }else if (scanningOk && [self testForInputString:@"!" advance:YES]) {
      mTokenCode = lexiqueBDD_1__21_ ;
    }else if (scanningOk && ([self testForInputChar:61])) {
      scanner_cocoa_routine_formerCompEgal (& scanningOk, & mLexicalAttribute_att_valeur) ;
      mTokenCode = lexiqueBDD_1_comp ;
    }else if (scanningOk && ([self testForInputChar:60])) {
      if (scanningOk && ([self testForInputChar:62])) {
        scanner_cocoa_routine_formerCompNonEgal (& scanningOk, & mLexicalAttribute_att_valeur) ;
        mTokenCode = lexiqueBDD_1_comp ;
      }else if (scanningOk && ([self testForInputChar:61])) {
        scanner_cocoa_routine_formerCompInfEgal (& scanningOk, & mLexicalAttribute_att_valeur) ;
        mTokenCode = lexiqueBDD_1_comp ;
      }else{
        scanner_cocoa_routine_formerCompInf (& scanningOk, & mLexicalAttribute_att_valeur) ;
        mTokenCode = lexiqueBDD_1_comp ;
      }
    }else if (scanningOk && ([self testForInputChar:62])) {
      if (scanningOk && ([self testForInputChar:61])) {
        scanner_cocoa_routine_formerCompSupEgal (& scanningOk, & mLexicalAttribute_att_valeur) ;
        mTokenCode = lexiqueBDD_1_comp ;
      }else{
        scanner_cocoa_routine_formerCompSup (& scanningOk, & mLexicalAttribute_att_valeur) ;
        mTokenCode = lexiqueBDD_1_comp ;
      }
    }else if (scanningOk && ([self testForInputChar:36])) {
      do {
        if (scanningOk && ([self testForInputFromChar:1 toChar:9] || [self testForInputChar:11] || [self testForInputChar:12] || [self testForInputFromChar:14 toChar:65533])) {
        }else{
          mLoop = NO ;
        }
      }while (mLoop && scanningOk) ;
      mLoop = YES ;
    }else if (scanningOk && ([self testForInputFromChar:1 toChar:32])) {
    }else if ([self testForInputChar:'\0']) { // End of source text ? 
      mTokenCode = lexiqueBDD_1_ ; // Empty string code
    }else{ // Unknown input character
      scanningOk = NO ;
    }
  //--- Error ?
    if (! scanningOk) {
      mTokenCode = -1 ;
      [self advance] ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   T E R M I N A L    C O U N T                            *
//                                                                           *
//---------------------------------------------------------------------------*

- (UInt32) terminalVocabularyCount {
  return 45 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     S T Y L E   C O U N T                                 *
//                                                                           *
//---------------------------------------------------------------------------*

- (UInt32) styleCount {
  return 6 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                I S    T E M P L A T E    L E X I Q U E                    *
//                                                                           *
//---------------------------------------------------------------------------*

- (BOOL) isTemplateLexique {
  return NO ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              S T Y L E   F O R    T E R M I N A L                         *
//                                                                           *
//---------------------------------------------------------------------------*

- (UInt32) styleIndexForTerminal: (SInt32) inTerminal {
  static const UInt32 kTerminalSymbolStyles [46] = {0,
    5 /* lexiqueBDD_1_nombre */,
    1 /* lexiqueBDD_1_id */,
    3 /* lexiqueBDD_1_string */,
    4 /* lexiqueBDD_1_comp */,
    4 /* lexiqueBDD_1__28_ */,
    4 /* lexiqueBDD_1__29_ */,
    4 /* lexiqueBDD_1__7B_ */,
    4 /* lexiqueBDD_1__7D_ */,
    4 /* lexiqueBDD_1__5B_ */,
    4 /* lexiqueBDD_1__5D_ */,
    4 /* lexiqueBDD_1__3A__3D_ */,
    4 /* lexiqueBDD_1__3A_ */,
    4 /* lexiqueBDD_1__2E_ */,
    4 /* lexiqueBDD_1__2E__2E_ */,
    4 /* lexiqueBDD_1__2B__3D_ */,
    4 /* lexiqueBDD_1__2D__3D_ */,
    4 /* lexiqueBDD_1__2D__3E_ */,
    4 /* lexiqueBDD_1__26_ */,
    4 /* lexiqueBDD_1__7C_ */,
    4 /* lexiqueBDD_1__7E_ */,
    4 /* lexiqueBDD_1__2C_ */,
    4 /* lexiqueBDD_1__3F_ */,
    4 /* lexiqueBDD_1__21_ */,
    4 /* lexiqueBDD_1__3B_ */,
    4 /* lexiqueBDD_1__23_ */,
    2 /* lexiqueBDD_1_ite_5F_cache */,
    2 /* lexiqueBDD_1_and_5F_cache */,
    2 /* lexiqueBDD_1_use_5F_and */,
    2 /* lexiqueBDD_1_use_5F_ite */,
    2 /* lexiqueBDD_1_use_5F_and_5F_ite */,
    2 /* lexiqueBDD_1_map */,
    2 /* lexiqueBDD_1_bdd */,
    2 /* lexiqueBDD_1_domain */,
    2 /* lexiqueBDD_1_bool */,
    2 /* lexiqueBDD_1_record */,
    2 /* lexiqueBDD_1_true */,
    2 /* lexiqueBDD_1_false */,
    2 /* lexiqueBDD_1_display */,
    2 /* lexiqueBDD_1_include */,
    2 /* lexiqueBDD_1_dump */,
    2 /* lexiqueBDD_1_verify */,
    2 /* lexiqueBDD_1_end */,
    2 /* lexiqueBDD_1_if */,
    2 /* lexiqueBDD_1_then */,
    2 /* lexiqueBDD_1_else */
  } ;
  return kTerminalSymbolStyles [inTerminal] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             S T Y L E   N A M E    F O R    I N D E X                     *
//                                                                           *
//---------------------------------------------------------------------------*

- (NSString *) styleNameForStyleIndex: (SInt32) inIndex {
  NSString * kStyleArray [6] = {
    @"Default Style",
    @"Identifiers",
    @"Key words",
    @"String constants",
    @"Delimitors",
    @"Integer constants"
  } ;
  return kStyleArray [inIndex] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         S T Y L E   I D E N T I F I E R    F O R    I N D E X             *
//                                                                           *
//---------------------------------------------------------------------------*

- (NSString *) styleIdentifierForStyleIndex: (SInt32) inIndex {
  NSString * kStyleArray [6] = {
    @"lexiqueBDD",
    @"lexiqueBDD-identifier",
    @"lexiqueBDD-keyWords",
    @"lexiqueBDD-stringStyle",
    @"lexiqueBDD-delimitors",
    @"lexiqueBDD-integer_csts"
  } ;
  return kStyleArray [inIndex] ;
}

//---------------------------------------------------------------------------*

@end

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2



