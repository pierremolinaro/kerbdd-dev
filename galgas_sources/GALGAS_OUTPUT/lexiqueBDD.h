//---------------------------------------------------------------------------*
//                                                                           *
//                           File 'lexiqueBDD.h'                             *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 1st, 2010, at 19h17'53"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1


#ifndef lexiqueBDD_0_DEFINED
#define lexiqueBDD_0_DEFINED

//---------------------------------------------------------------------------*

#include "galgas/GGS_lstring.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_lbool.h"
#include "galgas/C_LexiqueEx.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    E X T E R N    R O U T I N E S                         *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_routine_formerCompEgal (C_LexiqueEx & inLexique,
                PMUInt32 & ioArgument) ;

void scanner_routine_formerCompInf (C_LexiqueEx & inLexique,
                PMUInt32 & ioArgument) ;

void scanner_routine_formerCompInfEgal (C_LexiqueEx & inLexique,
                PMUInt32 & ioArgument) ;

void scanner_routine_formerCompNonEgal (C_LexiqueEx & inLexique,
                PMUInt32 & ioArgument) ;

void scanner_routine_formerCompSup (C_LexiqueEx & inLexique,
                PMUInt32 & ioArgument) ;

void scanner_routine_formerCompSupEgal (C_LexiqueEx & inLexique,
                PMUInt32 & ioArgument) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    E X T E R N    F U N C T I O N S                       *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*
//                                                                           *
//                       T O K E N    C L A S S                              *
//                                                                           *
//---------------------------------------------------------------------------*

class cTokenFor_lexiqueBDD : public cToken {
  public : C_String mLexicalAttribute_att_5F_idf ;
  public : C_String mLexicalAttribute_att_5F_token ;
  public : PMUInt32 mLexicalAttribute_att_5F_valeur ;

  public : cTokenFor_lexiqueBDD (void) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     S C A N N E R    C L A S S                            *
//                                                                           *
//---------------------------------------------------------------------------*

class C_Lexique_lexiqueBDD : public C_LexiqueEx {
//--- Constructors
  public : C_Lexique_lexiqueBDD (C_CompilerEx * inCallerCompiler,
                       const C_String & inDependencyFileExtension,
                       const C_String & inDependencyFilePath,
                       C_galgas_io * inParametersPtr,
                       const C_String & inSourceFileName
                       COMMA_LOCATION_ARGS) ;

  public : C_Lexique_lexiqueBDD (C_CompilerEx * inCallerCompiler,
                       C_galgas_io * inParametersPtr,
                       const C_String & inSourceString,
                       const C_String & inStringForError
                       COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~ C_Lexique_lexiqueBDD (void) {}
  #endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


//--- Terminal symbols enumeration
  public : enum {kToken_,
   kToken_nombre,
   kToken_id,
   kToken_string,
   kToken_comp,
   kToken__28_,
   kToken__29_,
   kToken__7B_,
   kToken__7D_,
   kToken__5B_,
   kToken__5D_,
   kToken__3A__3D_,
   kToken__3A_,
   kToken__2E_,
   kToken__2E__2E_,
   kToken__2B__3D_,
   kToken__2D__3D_,
   kToken__2D__3E_,
   kToken__26_,
   kToken__7C_,
   kToken__7E_,
   kToken__2C_,
   kToken__3F_,
   kToken__21_,
   kToken__3B_,
   kToken__23_,
   kToken_ite_5F_cache,
   kToken_and_5F_cache,
   kToken_use_5F_and,
   kToken_use_5F_ite,
   kToken_use_5F_and_5F_ite,
   kToken_map,
   kToken_bdd,
   kToken_domain,
   kToken_bool,
   kToken_record,
   kToken_true,
   kToken_false,
   kToken_display,
   kToken_include,
   kToken_dump,
   kToken_verify,
   kToken_end,
   kToken_if,
   kToken_then,
   kToken_else} ;

//--- Key words table 'delimiteursKerBDD'
  public : static PMSInt16 search_into_delimiteursKerBDD (const C_String & inSearchedString) ;

//--- Key words table 'motsReservesKerBDD'
  public : static PMSInt16 search_into_motsReservesKerBDD (const C_String & inSearchedString) ;
  

//--- Assign from attribute (v1)
  public : void assignFromAttribute_att_5F_idf (GGS_lstring & outValue) const ;
  public : void assignFromAttribute_att_5F_token (GGS_lstring & outValue) const ;
  public : void assignFromAttribute_att_5F_valeur (GGS_luint & outValue) const ;


//--- Attribute access
  public : C_String attributeValue_att_5F_idf (void) const ;
  public : C_String attributeValue_att_5F_token (void) const ;
  public : PMUInt32 attributeValue_att_5F_valeur (void) const ;


//--- Parse lexical token
  protected : virtual bool parseLexicalToken (void) ;

//--- Append terminal message
  protected : virtual void appendTerminalMessageToSyntaxErrorMessage (const PMSInt16 numeroTerminal,
                                                              C_String & messageErreur) ;

//--- Get terminal count
  public : virtual PMSInt16 terminalVocabularyCount (void) const { return 45 ; }

//--- Get Token String
  public : virtual C_String getCurrentTokenString (const cToken * inTokenPtr) const ;

//--- Enter Token
  protected : void enterToken (const cTokenFor_lexiqueBDD & inToken) ;
} ;

//---------------------------------------------------------------------------*

#endif
