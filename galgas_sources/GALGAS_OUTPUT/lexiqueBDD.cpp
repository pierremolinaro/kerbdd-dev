//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'lexiqueBDD.cpp'                            *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 1st, 2009, at 17h55'51"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1

#include "bdd/C_BDD.h"

class lexiqueBDD ;

void scanner_routine_formerCompEgal (lexiqueBDD &, uint32 & ioValue) ;

void scanner_routine_formerCompNonEgal (lexiqueBDD &, uint32 & ioValue) ;

void scanner_routine_formerCompInfEgal (lexiqueBDD &, uint32 & ioValue) ;

void scanner_routine_formerCompInf (lexiqueBDD &, uint32 & ioValue) ;

void scanner_routine_formerCompSupEgal (lexiqueBDD &, uint32 & ioValue) ;

void scanner_routine_formerCompSup (lexiqueBDD &, uint32 & ioValue) ;


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <ctype.h>
#include <string.h>

#include "utilities/MF_MemoryControl.h"
#include "lexiqueBDD.h"

#include "strings/unicode_character.h"
#include "galgas/scanner_actions.h"
#ifndef DO_NOT_GENERATE_CHECKINGS
  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (HERE), lineNumber ()
  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE
#else
  #define LINE_AND_SOURCE_FILE
  #define COMMA_LINE_AND_SOURCE_FILE
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                               Constructors                                *
//                                                                           *
//---------------------------------------------------------------------------*

cTokenFor_lexiqueBDD::cTokenFor_lexiqueBDD (void) :
att_idf (),
att_token (),
att_valeur () {
}

//---------------------------------------------------------------------------*

lexiqueBDD::
lexiqueBDD (C_Compiler * inCallerCompiler,
                const C_String & inDependencyFileExtension,
                const C_String & inDependencyFilePath,
                C_galgas_io * inParametersPtr,
                const C_String & inSourceFileName
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inParametersPtr, inSourceFileName COMMA_THERE) {
}

//---------------------------------------------------------------------------*

lexiqueBDD::
lexiqueBDD (C_Compiler * inCallerCompiler,
                C_galgas_io * inParametersPtr,
                const C_String & inSourceString,
                const C_String & inStringForError
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inParametersPtr, inSourceString, inStringForError COMMA_THERE) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Lexical error message list                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Message 0
static const utf32 gErrorMessage_0 [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;
//--- Message 1
static const utf32 gErrorMessage_1 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('i'),
  TO_UNICODE ('g'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;
//--- Message 2
static const utf32 gErrorMessage_2 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('o'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('\"'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Syntax error messages                            *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Syntax error message for terminal '$nombre$' :
static const utf32 gSyntaxErrorMessage_nombre [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$id$' :
static const utf32 gSyntaxErrorMessage_id [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$string$' :
static const utf32 gSyntaxErrorMessage_string [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('\"'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('\"'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$comp$' :
static const utf32 gSyntaxErrorMessage_comp [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('='),
  TO_UNICODE ('\''),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('<'),
  TO_UNICODE ('>'),
  TO_UNICODE ('\''),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('<'),
  TO_UNICODE ('='),
  TO_UNICODE ('\''),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('<'),
  TO_UNICODE ('\''),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('>'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('>'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$($' :
static const utf32 gSyntaxErrorMessage__28 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('('),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$)$' :
static const utf32 gSyntaxErrorMessage__29 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (')'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '${$' :
static const utf32 gSyntaxErrorMessage__7B [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('{'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$}$' :
static const utf32 gSyntaxErrorMessage__7D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('}'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$[$' :
static const utf32 gSyntaxErrorMessage__5B [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('['),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$]$' :
static const utf32 gSyntaxErrorMessage__5D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (']'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$:=$' :
static const utf32 gSyntaxErrorMessage__3A_3D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (':'),
  TO_UNICODE ('='),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$:$' :
static const utf32 gSyntaxErrorMessage__3A [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (':'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$.$' :
static const utf32 gSyntaxErrorMessage__2E [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('.'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$..$' :
static const utf32 gSyntaxErrorMessage__2E_2E [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$+=$' :
static const utf32 gSyntaxErrorMessage__2B_3D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('+'),
  TO_UNICODE ('='),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$-=$' :
static const utf32 gSyntaxErrorMessage__2D_3D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('-'),
  TO_UNICODE ('='),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$->$' :
static const utf32 gSyntaxErrorMessage__2D_3E [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('-'),
  TO_UNICODE ('>'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$&$' :
static const utf32 gSyntaxErrorMessage__26 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('&'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$|$' :
static const utf32 gSyntaxErrorMessage__7C [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('|'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$~$' :
static const utf32 gSyntaxErrorMessage__7E [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('~'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$,$' :
static const utf32 gSyntaxErrorMessage__2C [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (','),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$?$' :
static const utf32 gSyntaxErrorMessage__3F [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('\?'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$!$' :
static const utf32 gSyntaxErrorMessage__21 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('!'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$;$' :
static const utf32 gSyntaxErrorMessage__3B [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (';'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$#$' :
static const utf32 gSyntaxErrorMessage__23 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('#'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ite_cache$' :
static const utf32 gSyntaxErrorMessage_ite_5Fcache [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('_'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$and_cache$' :
static const utf32 gSyntaxErrorMessage_and_5Fcache [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('_'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$use_and$' :
static const utf32 gSyntaxErrorMessage_use_5Fand [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('_'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$use_ite$' :
static const utf32 gSyntaxErrorMessage_use_5Fite [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('_'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$use_and_ite$' :
static const utf32 gSyntaxErrorMessage_use_5Fand_5Fite [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('_'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('_'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$map$' :
static const utf32 gSyntaxErrorMessage_map [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$bdd$' :
static const utf32 gSyntaxErrorMessage_bdd [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('b'),
  TO_UNICODE ('d'),
  TO_UNICODE ('d'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$domain$' :
static const utf32 gSyntaxErrorMessage_domain [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('d'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$bool$' :
static const utf32 gSyntaxErrorMessage_bool [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('b'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE ('l'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$record$' :
static const utf32 gSyntaxErrorMessage_record [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$true$' :
static const utf32 gSyntaxErrorMessage_true [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$false$' :
static const utf32 gSyntaxErrorMessage_false [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('f'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$display$' :
static const utf32 gSyntaxErrorMessage_display [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('d'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE ('p'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('y'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$include$' :
static const utf32 gSyntaxErrorMessage_include [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$dump$' :
static const utf32 gSyntaxErrorMessage_dump [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$verify$' :
static const utf32 gSyntaxErrorMessage_verify [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('v'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('y'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$end$' :
static const utf32 gSyntaxErrorMessage_end [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$if$' :
static const utf32 gSyntaxErrorMessage_if [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$then$' :
static const utf32 gSyntaxErrorMessage_then [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$else$' :
static const utf32 gSyntaxErrorMessage_else [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for 'end of source' :
static const utf32 kEndOfSourceLexicalErrorMessage [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                appendTerminalMessageToSyntaxErrorMessage                  *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueBDD::
appendTerminalMessageToSyntaxErrorMessage (const sint16 inTerminalIndex,
                                           C_String & outSyntaxErrorMessage) {
  static const utf32 * syntaxErrorMessageArray [46] = {kEndOfSourceLexicalErrorMessage,
       gSyntaxErrorMessage_nombre,
       gSyntaxErrorMessage_id,
       gSyntaxErrorMessage_string,
       gSyntaxErrorMessage_comp,
       gSyntaxErrorMessage__28,
       gSyntaxErrorMessage__29,
       gSyntaxErrorMessage__7B,
       gSyntaxErrorMessage__7D,
       gSyntaxErrorMessage__5B,
       gSyntaxErrorMessage__5D,
       gSyntaxErrorMessage__3A_3D,
       gSyntaxErrorMessage__3A,
       gSyntaxErrorMessage__2E,
       gSyntaxErrorMessage__2E_2E,
       gSyntaxErrorMessage__2B_3D,
       gSyntaxErrorMessage__2D_3D,
       gSyntaxErrorMessage__2D_3E,
       gSyntaxErrorMessage__26,
       gSyntaxErrorMessage__7C,
       gSyntaxErrorMessage__7E,
       gSyntaxErrorMessage__2C,
       gSyntaxErrorMessage__3F,
       gSyntaxErrorMessage__21,
       gSyntaxErrorMessage__3B,
       gSyntaxErrorMessage__23,
       gSyntaxErrorMessage_ite_5Fcache,
       gSyntaxErrorMessage_and_5Fcache,
       gSyntaxErrorMessage_use_5Fand,
       gSyntaxErrorMessage_use_5Fite,
       gSyntaxErrorMessage_use_5Fand_5Fite,
       gSyntaxErrorMessage_map,
       gSyntaxErrorMessage_bdd,
       gSyntaxErrorMessage_domain,
       gSyntaxErrorMessage_bool,
       gSyntaxErrorMessage_record,
       gSyntaxErrorMessage_true,
       gSyntaxErrorMessage_false,
       gSyntaxErrorMessage_display,
       gSyntaxErrorMessage_include,
       gSyntaxErrorMessage_dump,
       gSyntaxErrorMessage_verify,
       gSyntaxErrorMessage_end,
       gSyntaxErrorMessage_if,
       gSyntaxErrorMessage_then,
       gSyntaxErrorMessage_else} ;
  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Key words table 'delimiteursKerBDD'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_delimiteursKerBDD = 21 ;

static const utf32 kEntry_0_forTable_delimiteursKerBDD [] = {
  TO_UNICODE ('!'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_delimiteursKerBDD [] = {
  TO_UNICODE ('#'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_delimiteursKerBDD [] = {
  TO_UNICODE ('&'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_delimiteursKerBDD [] = {
  TO_UNICODE ('('),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_delimiteursKerBDD [] = {
  TO_UNICODE (')'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_delimiteursKerBDD [] = {
  TO_UNICODE (','),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_delimiteursKerBDD [] = {
  TO_UNICODE ('.'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_delimiteursKerBDD [] = {
  TO_UNICODE (':'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_delimiteursKerBDD [] = {
  TO_UNICODE (';'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_delimiteursKerBDD [] = {
  TO_UNICODE ('\?'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_10_forTable_delimiteursKerBDD [] = {
  TO_UNICODE ('['),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_11_forTable_delimiteursKerBDD [] = {
  TO_UNICODE (']'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_12_forTable_delimiteursKerBDD [] = {
  TO_UNICODE ('{'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_13_forTable_delimiteursKerBDD [] = {
  TO_UNICODE ('|'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_14_forTable_delimiteursKerBDD [] = {
  TO_UNICODE ('}'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_15_forTable_delimiteursKerBDD [] = {
  TO_UNICODE ('~'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_16_forTable_delimiteursKerBDD [] = {
  TO_UNICODE ('+'),
  TO_UNICODE ('='),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_17_forTable_delimiteursKerBDD [] = {
  TO_UNICODE ('-'),
  TO_UNICODE ('='),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_18_forTable_delimiteursKerBDD [] = {
  TO_UNICODE ('-'),
  TO_UNICODE ('>'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_19_forTable_delimiteursKerBDD [] = {
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_20_forTable_delimiteursKerBDD [] = {
  TO_UNICODE (':'),
  TO_UNICODE ('='),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_delimiteursKerBDD [ktable_size_delimiteursKerBDD] = {
  {kEntry_0_forTable_delimiteursKerBDD, 1, lexiqueBDD::lexiqueBDD_1__21},
  {kEntry_1_forTable_delimiteursKerBDD, 1, lexiqueBDD::lexiqueBDD_1__23},
  {kEntry_2_forTable_delimiteursKerBDD, 1, lexiqueBDD::lexiqueBDD_1__26},
  {kEntry_3_forTable_delimiteursKerBDD, 1, lexiqueBDD::lexiqueBDD_1__28},
  {kEntry_4_forTable_delimiteursKerBDD, 1, lexiqueBDD::lexiqueBDD_1__29},
  {kEntry_5_forTable_delimiteursKerBDD, 1, lexiqueBDD::lexiqueBDD_1__2C},
  {kEntry_6_forTable_delimiteursKerBDD, 1, lexiqueBDD::lexiqueBDD_1__2E},
  {kEntry_7_forTable_delimiteursKerBDD, 1, lexiqueBDD::lexiqueBDD_1__3A},
  {kEntry_8_forTable_delimiteursKerBDD, 1, lexiqueBDD::lexiqueBDD_1__3B},
  {kEntry_9_forTable_delimiteursKerBDD, 1, lexiqueBDD::lexiqueBDD_1__3F},
  {kEntry_10_forTable_delimiteursKerBDD, 1, lexiqueBDD::lexiqueBDD_1__5B},
  {kEntry_11_forTable_delimiteursKerBDD, 1, lexiqueBDD::lexiqueBDD_1__5D},
  {kEntry_12_forTable_delimiteursKerBDD, 1, lexiqueBDD::lexiqueBDD_1__7B},
  {kEntry_13_forTable_delimiteursKerBDD, 1, lexiqueBDD::lexiqueBDD_1__7C},
  {kEntry_14_forTable_delimiteursKerBDD, 1, lexiqueBDD::lexiqueBDD_1__7D},
  {kEntry_15_forTable_delimiteursKerBDD, 1, lexiqueBDD::lexiqueBDD_1__7E},
  {kEntry_16_forTable_delimiteursKerBDD, 2, lexiqueBDD::lexiqueBDD_1__2B_3D},
  {kEntry_17_forTable_delimiteursKerBDD, 2, lexiqueBDD::lexiqueBDD_1__2D_3D},
  {kEntry_18_forTable_delimiteursKerBDD, 2, lexiqueBDD::lexiqueBDD_1__2D_3E},
  {kEntry_19_forTable_delimiteursKerBDD, 2, lexiqueBDD::lexiqueBDD_1__2E_2E},
  {kEntry_20_forTable_delimiteursKerBDD, 2, lexiqueBDD::lexiqueBDD_1__3A_3D}
} ;

sint16 lexiqueBDD::search_into_delimiteursKerBDD (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_delimiteursKerBDD, ktable_size_delimiteursKerBDD) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Key words table 'motsReservesKerBDD'                    *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_motsReservesKerBDD = 20 ;

static const utf32 kEntry_0_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('b'),
  TO_UNICODE ('d'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('b'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE ('l'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('f'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_10_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_11_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_12_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('v'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('y'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_13_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE ('p'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('y'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_14_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_15_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('_'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_16_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('_'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_17_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('_'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_18_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('_'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_19_forTable_motsReservesKerBDD [] = {
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('_'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('_'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_motsReservesKerBDD [ktable_size_motsReservesKerBDD] = {
  {kEntry_0_forTable_motsReservesKerBDD, 2, lexiqueBDD::lexiqueBDD_1_if},
  {kEntry_1_forTable_motsReservesKerBDD, 3, lexiqueBDD::lexiqueBDD_1_bdd},
  {kEntry_2_forTable_motsReservesKerBDD, 3, lexiqueBDD::lexiqueBDD_1_end},
  {kEntry_3_forTable_motsReservesKerBDD, 3, lexiqueBDD::lexiqueBDD_1_map},
  {kEntry_4_forTable_motsReservesKerBDD, 4, lexiqueBDD::lexiqueBDD_1_bool},
  {kEntry_5_forTable_motsReservesKerBDD, 4, lexiqueBDD::lexiqueBDD_1_dump},
  {kEntry_6_forTable_motsReservesKerBDD, 4, lexiqueBDD::lexiqueBDD_1_else},
  {kEntry_7_forTable_motsReservesKerBDD, 4, lexiqueBDD::lexiqueBDD_1_then},
  {kEntry_8_forTable_motsReservesKerBDD, 4, lexiqueBDD::lexiqueBDD_1_true},
  {kEntry_9_forTable_motsReservesKerBDD, 5, lexiqueBDD::lexiqueBDD_1_false},
  {kEntry_10_forTable_motsReservesKerBDD, 6, lexiqueBDD::lexiqueBDD_1_domain},
  {kEntry_11_forTable_motsReservesKerBDD, 6, lexiqueBDD::lexiqueBDD_1_record},
  {kEntry_12_forTable_motsReservesKerBDD, 6, lexiqueBDD::lexiqueBDD_1_verify},
  {kEntry_13_forTable_motsReservesKerBDD, 7, lexiqueBDD::lexiqueBDD_1_display},
  {kEntry_14_forTable_motsReservesKerBDD, 7, lexiqueBDD::lexiqueBDD_1_include},
  {kEntry_15_forTable_motsReservesKerBDD, 7, lexiqueBDD::lexiqueBDD_1_use_5Fand},
  {kEntry_16_forTable_motsReservesKerBDD, 7, lexiqueBDD::lexiqueBDD_1_use_5Fite},
  {kEntry_17_forTable_motsReservesKerBDD, 9, lexiqueBDD::lexiqueBDD_1_and_5Fcache},
  {kEntry_18_forTable_motsReservesKerBDD, 9, lexiqueBDD::lexiqueBDD_1_ite_5Fcache},
  {kEntry_19_forTable_motsReservesKerBDD, 11, lexiqueBDD::lexiqueBDD_1_use_5Fand_5Fite}
} ;

sint16 lexiqueBDD::search_into_motsReservesKerBDD (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_motsReservesKerBDD, ktable_size_motsReservesKerBDD) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          getCurrentTokenString                            *
//                                                                           *
//---------------------------------------------------------------------------*

C_String lexiqueBDD::
getCurrentTokenString (const cToken * inTokenPtr) const {
  cTokenFor_lexiqueBDD * ptr = (cTokenFor_lexiqueBDD *) inTokenPtr ;
  C_String s ;
  if (ptr == NULL) {
    s << "$$" ;
  }else{
    switch (ptr->mTokenCode) {
    case  lexiqueBDD_1_:
      s << "$$" ;
      break ;
    case  lexiqueBDD_1_nombre:
      s << "$"
        << "nombre"
        << "$" ;
      s << " " ;
      s.appendUnsigned (ptr->att_valeur) ;
      break;
    case  lexiqueBDD_1_id:
      s << "$"
        << "id"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (ptr->att_token) ;
      break;
    case  lexiqueBDD_1_string:
      s << "$"
        << "string"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (ptr->att_token) ;
      break;
    case  lexiqueBDD_1_comp:
      s << "$"
        << "comp"
        << "$" ;
      s << " " ;
      s.appendUnsigned (ptr->att_valeur) ;
      break;
    case  lexiqueBDD_1__28:
      s << "$"
        << "("
        << "$" ;
      break;
    case  lexiqueBDD_1__29:
      s << "$"
        << ")"
        << "$" ;
      break;
    case  lexiqueBDD_1__7B:
      s << "$"
        << "{"
        << "$" ;
      break;
    case  lexiqueBDD_1__7D:
      s << "$"
        << "}"
        << "$" ;
      break;
    case  lexiqueBDD_1__5B:
      s << "$"
        << "["
        << "$" ;
      break;
    case  lexiqueBDD_1__5D:
      s << "$"
        << "]"
        << "$" ;
      break;
    case  lexiqueBDD_1__3A_3D:
      s << "$"
        << ":="
        << "$" ;
      break;
    case  lexiqueBDD_1__3A:
      s << "$"
        << ":"
        << "$" ;
      break;
    case  lexiqueBDD_1__2E:
      s << "$"
        << "."
        << "$" ;
      break;
    case  lexiqueBDD_1__2E_2E:
      s << "$"
        << ".."
        << "$" ;
      break;
    case  lexiqueBDD_1__2B_3D:
      s << "$"
        << "+="
        << "$" ;
      break;
    case  lexiqueBDD_1__2D_3D:
      s << "$"
        << "-="
        << "$" ;
      break;
    case  lexiqueBDD_1__2D_3E:
      s << "$"
        << "->"
        << "$" ;
      break;
    case  lexiqueBDD_1__26:
      s << "$"
        << "&"
        << "$" ;
      break;
    case  lexiqueBDD_1__7C:
      s << "$"
        << "|"
        << "$" ;
      break;
    case  lexiqueBDD_1__7E:
      s << "$"
        << "~"
        << "$" ;
      break;
    case  lexiqueBDD_1__2C:
      s << "$"
        << ","
        << "$" ;
      break;
    case  lexiqueBDD_1__3F:
      s << "$"
        << "\?"
        << "$" ;
      break;
    case  lexiqueBDD_1__21:
      s << "$"
        << "!"
        << "$" ;
      break;
    case  lexiqueBDD_1__3B:
      s << "$"
        << ";"
        << "$" ;
      break;
    case  lexiqueBDD_1__23:
      s << "$"
        << "#"
        << "$" ;
      break;
    case  lexiqueBDD_1_ite_5Fcache:
      s << "$"
        << "ite_cache"
        << "$" ;
      break;
    case  lexiqueBDD_1_and_5Fcache:
      s << "$"
        << "and_cache"
        << "$" ;
      break;
    case  lexiqueBDD_1_use_5Fand:
      s << "$"
        << "use_and"
        << "$" ;
      break;
    case  lexiqueBDD_1_use_5Fite:
      s << "$"
        << "use_ite"
        << "$" ;
      break;
    case  lexiqueBDD_1_use_5Fand_5Fite:
      s << "$"
        << "use_and_ite"
        << "$" ;
      break;
    case  lexiqueBDD_1_map:
      s << "$"
        << "map"
        << "$" ;
      break;
    case  lexiqueBDD_1_bdd:
      s << "$"
        << "bdd"
        << "$" ;
      break;
    case  lexiqueBDD_1_domain:
      s << "$"
        << "domain"
        << "$" ;
      break;
    case  lexiqueBDD_1_bool:
      s << "$"
        << "bool"
        << "$" ;
      break;
    case  lexiqueBDD_1_record:
      s << "$"
        << "record"
        << "$" ;
      break;
    case  lexiqueBDD_1_true:
      s << "$"
        << "true"
        << "$" ;
      break;
    case  lexiqueBDD_1_false:
      s << "$"
        << "false"
        << "$" ;
      break;
    case  lexiqueBDD_1_display:
      s << "$"
        << "display"
        << "$" ;
      break;
    case  lexiqueBDD_1_include:
      s << "$"
        << "include"
        << "$" ;
      break;
    case  lexiqueBDD_1_dump:
      s << "$"
        << "dump"
        << "$" ;
      break;
    case  lexiqueBDD_1_verify:
      s << "$"
        << "verify"
        << "$" ;
      break;
    case  lexiqueBDD_1_end:
      s << "$"
        << "end"
        << "$" ;
      break;
    case  lexiqueBDD_1_if:
      s << "$"
        << "if"
        << "$" ;
      break;
    case  lexiqueBDD_1_then:
      s << "$"
        << "then"
        << "$" ;
      break;
    case  lexiqueBDD_1_else:
      s << "$"
        << "else"
        << "$" ;
      break;
    default:
      break ;
    }
  }
  return s ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      U N I C O D E    S T R I N G S                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Unicode string for '!'
static const utf32 kUnicodeString__21_ [] = {
  TO_UNICODE ('!'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '#'
static const utf32 kUnicodeString__23_ [] = {
  TO_UNICODE ('#'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '&'
static const utf32 kUnicodeString__26_ [] = {
  TO_UNICODE ('&'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '('
static const utf32 kUnicodeString__28_ [] = {
  TO_UNICODE ('('),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ')'
static const utf32 kUnicodeString__29_ [] = {
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '+='
static const utf32 kUnicodeString__3D__2B_ [] = {
  TO_UNICODE ('+'),
  TO_UNICODE ('='),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ','
static const utf32 kUnicodeString__2C_ [] = {
  TO_UNICODE (','),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '-='
static const utf32 kUnicodeString__3D__2D_ [] = {
  TO_UNICODE ('-'),
  TO_UNICODE ('='),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '->'
static const utf32 kUnicodeString__3E__2D_ [] = {
  TO_UNICODE ('-'),
  TO_UNICODE ('>'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '.'
static const utf32 kUnicodeString__2E_ [] = {
  TO_UNICODE ('.'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '..'
static const utf32 kUnicodeString__2E__2E_ [] = {
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ':'
static const utf32 kUnicodeString__3A_ [] = {
  TO_UNICODE (':'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ':='
static const utf32 kUnicodeString__3D__3A_ [] = {
  TO_UNICODE (':'),
  TO_UNICODE ('='),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ';'
static const utf32 kUnicodeString__3B_ [] = {
  TO_UNICODE (';'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '?'
static const utf32 kUnicodeString__3F_ [] = {
  TO_UNICODE ('\?'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '['
static const utf32 kUnicodeString__5B_ [] = {
  TO_UNICODE ('['),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ']'
static const utf32 kUnicodeString__5D_ [] = {
  TO_UNICODE (']'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '{'
static const utf32 kUnicodeString__7B_ [] = {
  TO_UNICODE ('{'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '|'
static const utf32 kUnicodeString__7C_ [] = {
  TO_UNICODE ('|'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '}'
static const utf32 kUnicodeString__7D_ [] = {
  TO_UNICODE ('}'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '~'
static const utf32 kUnicodeString__7E_ [] = {
  TO_UNICODE ('~'),
  TO_UNICODE (0)
} ; 

//---------------------------------------------------------------------------*
//                                                                           *
//                            parseLexicalToken                              *
//                                                                           *
//---------------------------------------------------------------------------*

bool lexiqueBDD::
parseLexicalToken (void) {
  cTokenFor_lexiqueBDD token ;
  bool loop = true ;
  token.mTokenCode = -1 ;
  while ((token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\0')) {
    token.att_idf.setLengthToZero () ;
    token.att_token.setLengthToZero () ;
    token.att_valeur = 0 ;
    mTokenFirstLocation = mCurrentLocation ;
    try{
      if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
          testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z'))) {
        do {
          ::scanner_routine_enterCharacterIntoString (*this, token.att_idf, ::scanner_function_toLower (*this, previousChar ())) ;
          ::scanner_routine_enterCharacterIntoString (*this, token.att_token, previousChar ()) ;
          if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
              testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z')) ||
              testForInputUTF32Char (TO_UNICODE ('_')) ||
              testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        token.mTokenCode = search_into_motsReservesKerBDD (token.att_idf) ;
        if (token.mTokenCode == -1) {
          token.mTokenCode = lexiqueBDD_1_id ;
        }
        enterToken (token) ;
      }else if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
        do {
          if (testForInputUTF32Char (TO_UNICODE (' ')) ||
              testForInputUTF32Char (TO_UNICODE ('!')) ||
              testForInputUTF32CharRange (TO_UNICODE ('#'), TO_UNICODE ('~'))) {
            ::scanner_routine_enterCharacterIntoString (*this, token.att_token, previousChar ()) ;
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
          token.mTokenCode = lexiqueBDD_1_string ;
          enterToken (token) ;
        }else{
          lexicalError (gErrorMessage_2 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
        ::scanner_routine_enterDigitIntoUInt (*this, previousChar (), token.att_valeur, gErrorMessage_0, gErrorMessage_1) ;
        do {
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
            ::scanner_routine_enterDigitIntoUInt (*this, previousChar (), token.att_valeur, gErrorMessage_0, gErrorMessage_1) ;
          }else if (testForInputUTF32Char (TO_UNICODE ('_'))) {
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        token.mTokenCode = lexiqueBDD_1_nombre ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__3D__3A_, 2, true)) {
        token.mTokenCode = lexiqueBDD_1__3A_3D ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__2E__2E_, 2, true)) {
        token.mTokenCode = lexiqueBDD_1__2E_2E ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__3D__2B_, 2, true)) {
        token.mTokenCode = lexiqueBDD_1__2B_3D ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__3D__2D_, 2, true)) {
        token.mTokenCode = lexiqueBDD_1__2D_3D ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__3E__2D_, 2, true)) {
        token.mTokenCode = lexiqueBDD_1__2D_3E ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__28_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__28 ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__29_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__29 ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__7B_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__7B ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__7D_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__7D ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__5B_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__5B ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__5D_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__5D ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__3A_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__3A ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__2E_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__2E ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__26_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__26 ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__7C_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__7C ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__7E_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__7E ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__2C_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__2C ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__3F_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__3F ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__21_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__21 ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__3B_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__3B ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__23_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__23 ;
        enterToken (token) ;
      }else if (testForInputUTF32Char (TO_UNICODE ('='))) {
        ::scanner_routine_formerCompEgal (*this, token.att_valeur) ;
        token.mTokenCode = lexiqueBDD_1_comp ;
        enterToken (token) ;
      }else if (testForInputUTF32Char (TO_UNICODE ('<'))) {
        if (testForInputUTF32Char (TO_UNICODE ('>'))) {
          ::scanner_routine_formerCompNonEgal (*this, token.att_valeur) ;
          token.mTokenCode = lexiqueBDD_1_comp ;
          enterToken (token) ;
        }else if (testForInputUTF32Char (TO_UNICODE ('='))) {
          ::scanner_routine_formerCompInfEgal (*this, token.att_valeur) ;
          token.mTokenCode = lexiqueBDD_1_comp ;
          enterToken (token) ;
        }else{
          ::scanner_routine_formerCompInf (*this, token.att_valeur) ;
          token.mTokenCode = lexiqueBDD_1_comp ;
          enterToken (token) ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('>'))) {
        if (testForInputUTF32Char (TO_UNICODE ('='))) {
          ::scanner_routine_formerCompSupEgal (*this, token.att_valeur) ;
          token.mTokenCode = lexiqueBDD_1_comp ;
          enterToken (token) ;
        }else{
          ::scanner_routine_formerCompSup (*this, token.att_valeur) ;
          token.mTokenCode = lexiqueBDD_1_comp ;
          enterToken (token) ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('$'))) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE ('\t')) ||
              testForInputUTF32Char (TO_UNICODE ('\v')) ||
              testForInputUTF32Char (TO_UNICODE ('\f')) ||
              testForInputUTF32CharRange (TO_UNICODE (14), TO_UNICODE (65533))) {
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
      }else if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE (' '))) {
      }else if (testForInputUTF32Char (TO_UNICODE ('\0'))) { // End of source text ? 
        token.mTokenCode = lexiqueBDD_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      token.mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
    }
  }
  if ((UNICODE_VALUE (mCurrentChar) == '\0') && (token.mTemplateStringBeforeToken.length () > 0)) {
    token.mTokenCode = 0 ;
    enterToken (token) ;
  }
  return token.mTokenCode > 0 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   parseLexicalTokenForLexicalColoring                     *
//                                                                           *
//---------------------------------------------------------------------------*

sint16 lexiqueBDD::
parseLexicalTokenForLexicalColoring (void) {
  cTokenFor_lexiqueBDD token ;
  bool loop = true ;
  token.mTokenCode = -1 ;
  while (token.mTokenCode < 0) {
    token.att_idf.setLengthToZero () ;
    token.att_token.setLengthToZero () ;
    token.att_valeur = 0 ;
    mTokenFirstLocation = mCurrentLocation ;
    try{
      if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
          testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z'))) {
        do {
          ::scanner_routine_enterCharacterIntoString (*this, token.att_idf, ::scanner_function_toLower (*this, previousChar ())) ;
          ::scanner_routine_enterCharacterIntoString (*this, token.att_token, previousChar ()) ;
          if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
              testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z')) ||
              testForInputUTF32Char (TO_UNICODE ('_')) ||
              testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        token.mTokenCode = search_into_motsReservesKerBDD (token.att_idf) ;
        if (token.mTokenCode == -1) {
          token.mTokenCode = lexiqueBDD_1_id ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
        do {
          if (testForInputUTF32Char (TO_UNICODE (' ')) ||
              testForInputUTF32Char (TO_UNICODE ('!')) ||
              testForInputUTF32CharRange (TO_UNICODE ('#'), TO_UNICODE ('~'))) {
            ::scanner_routine_enterCharacterIntoString (*this, token.att_token, previousChar ()) ;
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
          token.mTokenCode = lexiqueBDD_1_string ;
        }else{
          lexicalError (gErrorMessage_2 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
        ::scanner_routine_enterDigitIntoUInt (*this, previousChar (), token.att_valeur, gErrorMessage_0, gErrorMessage_1) ;
        do {
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
            ::scanner_routine_enterDigitIntoUInt (*this, previousChar (), token.att_valeur, gErrorMessage_0, gErrorMessage_1) ;
          }else if (testForInputUTF32Char (TO_UNICODE ('_'))) {
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        token.mTokenCode = lexiqueBDD_1_nombre ;
      }else if (testForInputUTF32String (kUnicodeString__3D__3A_, 2, true)) {
        token.mTokenCode = lexiqueBDD_1__3A_3D ;
      }else if (testForInputUTF32String (kUnicodeString__2E__2E_, 2, true)) {
        token.mTokenCode = lexiqueBDD_1__2E_2E ;
      }else if (testForInputUTF32String (kUnicodeString__3D__2B_, 2, true)) {
        token.mTokenCode = lexiqueBDD_1__2B_3D ;
      }else if (testForInputUTF32String (kUnicodeString__3D__2D_, 2, true)) {
        token.mTokenCode = lexiqueBDD_1__2D_3D ;
      }else if (testForInputUTF32String (kUnicodeString__3E__2D_, 2, true)) {
        token.mTokenCode = lexiqueBDD_1__2D_3E ;
      }else if (testForInputUTF32String (kUnicodeString__28_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__28 ;
      }else if (testForInputUTF32String (kUnicodeString__29_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__29 ;
      }else if (testForInputUTF32String (kUnicodeString__7B_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__7B ;
      }else if (testForInputUTF32String (kUnicodeString__7D_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__7D ;
      }else if (testForInputUTF32String (kUnicodeString__5B_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__5B ;
      }else if (testForInputUTF32String (kUnicodeString__5D_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__5D ;
      }else if (testForInputUTF32String (kUnicodeString__3A_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__3A ;
      }else if (testForInputUTF32String (kUnicodeString__2E_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__2E ;
      }else if (testForInputUTF32String (kUnicodeString__26_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__26 ;
      }else if (testForInputUTF32String (kUnicodeString__7C_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__7C ;
      }else if (testForInputUTF32String (kUnicodeString__7E_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__7E ;
      }else if (testForInputUTF32String (kUnicodeString__2C_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__2C ;
      }else if (testForInputUTF32String (kUnicodeString__3F_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__3F ;
      }else if (testForInputUTF32String (kUnicodeString__21_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__21 ;
      }else if (testForInputUTF32String (kUnicodeString__3B_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__3B ;
      }else if (testForInputUTF32String (kUnicodeString__23_, 1, true)) {
        token.mTokenCode = lexiqueBDD_1__23 ;
      }else if (testForInputUTF32Char (TO_UNICODE ('='))) {
        ::scanner_routine_formerCompEgal (*this, token.att_valeur) ;
        token.mTokenCode = lexiqueBDD_1_comp ;
      }else if (testForInputUTF32Char (TO_UNICODE ('<'))) {
        if (testForInputUTF32Char (TO_UNICODE ('>'))) {
          ::scanner_routine_formerCompNonEgal (*this, token.att_valeur) ;
          token.mTokenCode = lexiqueBDD_1_comp ;
        }else if (testForInputUTF32Char (TO_UNICODE ('='))) {
          ::scanner_routine_formerCompInfEgal (*this, token.att_valeur) ;
          token.mTokenCode = lexiqueBDD_1_comp ;
        }else{
          ::scanner_routine_formerCompInf (*this, token.att_valeur) ;
          token.mTokenCode = lexiqueBDD_1_comp ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('>'))) {
        if (testForInputUTF32Char (TO_UNICODE ('='))) {
          ::scanner_routine_formerCompSupEgal (*this, token.att_valeur) ;
          token.mTokenCode = lexiqueBDD_1_comp ;
        }else{
          ::scanner_routine_formerCompSup (*this, token.att_valeur) ;
          token.mTokenCode = lexiqueBDD_1_comp ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('$'))) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE ('\t')) ||
              testForInputUTF32Char (TO_UNICODE ('\v')) ||
              testForInputUTF32Char (TO_UNICODE ('\f')) ||
              testForInputUTF32CharRange (TO_UNICODE (14), TO_UNICODE (65533))) {
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
      }else if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE (' '))) {
      }else if (testForInputUTF32Char (TO_UNICODE ('\0'))) { // End of source text ? 
        token.mTokenCode = lexiqueBDD_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      token.mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
      throw ;
    }
  }
  return token.mTokenCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            Styles definition                              *
//                                                                           *
//---------------------------------------------------------------------------*

sint32 lexiqueBDD::getStylesCount (void) {
  return 6 ;
}

//---------------------------------------------------------------------------*

const char * lexiqueBDD::getStyleName (const sint32 inIndex) {
  const char * kStylesArray [7] = {"Default style", "Identifiers", "Key words", "String constants", "Delimitors", "Integer constants", NULL} ;
  return (inIndex < 6) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

const char * lexiqueBDD::getStyleIdentifier (const sint32 inIndex) {
  const char * kStylesArray [7] = {"", "identifier", "keyWords", "stringStyle", "delimitors", "integer_csts", NULL} ;
  return (inIndex < 6) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

uint8 lexiqueBDD::
terminalStyleIndex (const sint32 inTerminal) {
  static const uint8 kTerminalSymbolStyles [46] = {0,
    5 /* lexiqueBDD_1_nombre */,
    1 /* lexiqueBDD_1_id */,
    3 /* lexiqueBDD_1_string */,
    4 /* lexiqueBDD_1_comp */,
    4 /* lexiqueBDD_1__28 */,
    4 /* lexiqueBDD_1__29 */,
    4 /* lexiqueBDD_1__7B */,
    4 /* lexiqueBDD_1__7D */,
    4 /* lexiqueBDD_1__5B */,
    4 /* lexiqueBDD_1__5D */,
    4 /* lexiqueBDD_1__3A_3D */,
    4 /* lexiqueBDD_1__3A */,
    4 /* lexiqueBDD_1__2E */,
    4 /* lexiqueBDD_1__2E_2E */,
    4 /* lexiqueBDD_1__2B_3D */,
    4 /* lexiqueBDD_1__2D_3D */,
    4 /* lexiqueBDD_1__2D_3E */,
    4 /* lexiqueBDD_1__26 */,
    4 /* lexiqueBDD_1__7C */,
    4 /* lexiqueBDD_1__7E */,
    4 /* lexiqueBDD_1__2C */,
    4 /* lexiqueBDD_1__3F */,
    4 /* lexiqueBDD_1__21 */,
    4 /* lexiqueBDD_1__3B */,
    4 /* lexiqueBDD_1__23 */,
    2 /* lexiqueBDD_1_ite_5Fcache */,
    2 /* lexiqueBDD_1_and_5Fcache */,
    2 /* lexiqueBDD_1_use_5Fand */,
    2 /* lexiqueBDD_1_use_5Fite */,
    2 /* lexiqueBDD_1_use_5Fand_5Fite */,
    2 /* lexiqueBDD_1_map */,
    2 /* lexiqueBDD_1_bdd */,
    2 /* lexiqueBDD_1_domain */,
    2 /* lexiqueBDD_1_bool */,
    2 /* lexiqueBDD_1_record */,
    2 /* lexiqueBDD_1_true */,
    2 /* lexiqueBDD_1_false */,
    2 /* lexiqueBDD_1_display */,
    2 /* lexiqueBDD_1_include */,
    2 /* lexiqueBDD_1_dump */,
    2 /* lexiqueBDD_1_verify */,
    2 /* lexiqueBDD_1_end */,
    2 /* lexiqueBDD_1_if */,
    2 /* lexiqueBDD_1_then */,
    2 /* lexiqueBDD_1_else */
  } ;
  return kTerminalSymbolStyles [inTerminal] ;
}

//---------------------------------------------------------------------------*

void lexiqueBDD::enterToken (const cTokenFor_lexiqueBDD & inToken) {
  cTokenFor_lexiqueBDD * ptr = NULL ;
  macroMyNew (ptr, cTokenFor_lexiqueBDD ()) ;
  ptr->mTokenCode = inToken.mTokenCode ;
  ptr->mFirstLocation = mTokenFirstLocation ;
  ptr->mLastLocation  = mTokenLastLocation ;
  ptr->mTemplateStringBeforeToken  = inToken.mTemplateStringBeforeToken ;
  ptr->att_idf = inToken.att_idf ;
  ptr->att_token = inToken.att_token ;
  ptr->att_valeur = inToken.att_valeur ;
  enterTokenFromPointer (ptr) ;
}

//---------------------------------------------------------------------------*

void lexiqueBDD::
_assignFromAttribute_att_idf (GGS_lstring & outValue) const {
  cTokenFor_lexiqueBDD * ptr = (cTokenFor_lexiqueBDD *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, ptr->att_idf) ;
}

//---------------------------------------------------------------------------*

C_String lexiqueBDD::
_attributeValue_att_idf (void) const {
  cTokenFor_lexiqueBDD * ptr = (cTokenFor_lexiqueBDD *) mCurrentTokenPtr ;
  return ptr->att_idf ;
}

//---------------------------------------------------------------------------*

void lexiqueBDD::
_assignFromAttribute_att_token (GGS_lstring & outValue) const {
  cTokenFor_lexiqueBDD * ptr = (cTokenFor_lexiqueBDD *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, ptr->att_token) ;
}

//---------------------------------------------------------------------------*

C_String lexiqueBDD::
_attributeValue_att_token (void) const {
  cTokenFor_lexiqueBDD * ptr = (cTokenFor_lexiqueBDD *) mCurrentTokenPtr ;
  return ptr->att_token ;
}

//---------------------------------------------------------------------------*

void lexiqueBDD::
_assignFromAttribute_att_valeur (GGS_luint & outValue) const {
  cTokenFor_lexiqueBDD * ptr = (cTokenFor_lexiqueBDD *) mCurrentTokenPtr ;
  outValue = GGS_luint (* this, ptr->att_valeur) ;
}

//---------------------------------------------------------------------------*

uint32 lexiqueBDD::
_attributeValue_att_valeur (void) const {
  cTokenFor_lexiqueBDD * ptr = (cTokenFor_lexiqueBDD *) mCurrentTokenPtr ;
  return ptr->att_valeur ;
}

//---------------------------------------------------------------------------*

//--- START OF USER ZONE 2

//---------------------------------------------------------------------*

void scanner_routine_formerCompEgal (lexiqueBDD &, uint32 & ioValue) {
  ioValue = C_BDD::kEqual ;
}

//---------------------------------------------------------------------*

void
scanner_routine_formerCompNonEgal (lexiqueBDD &, uint32 & ioValue) {
  ioValue = C_BDD::kNotEqual ;
}

//---------------------------------------------------------------------*

void
scanner_routine_formerCompInfEgal (lexiqueBDD &, uint32 & ioValue) {
  ioValue = C_BDD::kLowerOrEqual ;
}

//---------------------------------------------------------------------*

void
scanner_routine_formerCompInf (lexiqueBDD &, uint32 & ioValue) {
  ioValue = C_BDD::kStrictLower ;
}

//---------------------------------------------------------------------*

void
scanner_routine_formerCompSupEgal (lexiqueBDD &, uint32 & ioValue) {
  ioValue = C_BDD::kGreaterOrEqual ;
}

//---------------------------------------------------------------------*

void
scanner_routine_formerCompSup (lexiqueBDD &, uint32 & ioValue) {
  ioValue = C_BDD::kStrictGreater ;
}

//---------------------------------------------------------------------*


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

