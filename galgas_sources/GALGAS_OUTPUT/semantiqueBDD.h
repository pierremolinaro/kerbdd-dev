//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'semantiqueBDD.h'                           *
//               Generated by version 0.14.1 (LL(1) grammar)                 *
//                      june 18th, 2005, at 13h46'49"                        *
//                                                                           *
// This program is free software; you can redistribute it and/or modify it   *
// under the terms of the GNU General Public License as published by the     *
// Free Software Foundation.                                                 *
//                                                                           *
// This program is distributed in the hope it will be useful, but WITHOUT    *
// ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or     *
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for  *
// more details.                                                             *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef semantiqueBDD_DEFINED
#define semantiqueBDD_DEFINED

#include <string.h>

// Include predefined semantics types definition *
#include "galgas/C_GGS_Object.h"
#include "galgas/AC_galgas_io.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/AC_galgas_map.h"
// Include scanner definition *
#include "galgas/C_Lexique.h"
//---------------------------------------------------------------------------*
//                                                                           *
//   Include directives generated by extern types, methods or attributes     *
//                                                                           *
//---------------------------------------------------------------------------*

#include "galgas/C_galgas_bdd.h"
#include "cTableVariablesBDD.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                            Extern type 'bdd'                              *
//                                                                           *
//---------------------------------------------------------------------------*

typedef C_galgas_bdd GGS_bdd ;

class cPtr_typeDomain ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeDomain'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDomain {
  protected : cPtr_typeDomain * mPointer ;
  public : GGS_typeDomain (void) ;
  public : GGS_typeDomain (const GGS_typeDomain &) ;
  public : virtual ~GGS_typeDomain (void) ;
  public : void operator = (const GGS_typeDomain &) ;
  public : bool isBuilt (void) const ;
  public : inline bool isEqualTo (const GGS_typeDomain & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_typeDomain * inSource) ;
  public : GGS_typeDomain (cPtr_typeDomain * inSource) ;
  public : inline cPtr_typeDomain * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  public : cPtr_typeDomain * operator () (void) const ;
  public : GGS_string reader_messageDomainType (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   DECLARATIONS FOR MAP 'typeDomainMap'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeDomainMap {
  public : GGS_typeDomain  mDomain ;
} ;

//---------------------------------------------------------------------------*

class GGS_typeDomainMap : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_typeDomainMap & inInfo) ;
  //--- Method for key compare
    public : virtual sint32 compareKeys (void * inKey) const ;
  //--- Method for getting key as C_String
    public : virtual C_String stringForKey (void) const ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : const GGS_lstring mKey ;
    public : e_typeDomainMap mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (void * inKey, void * inInfo) ;
//--- 'empty' constructor
  public : static GGS_typeDomainMap constructor_empty (void) ;
//--- 'hasKey' reader
  public : GGS_bool reader_hasKey (const GGS_lstring & inKey) const ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- Insert an element
  public : void insertElement (C_Lexique & inLexique,
                               const char * inErrorMessagesArray [],
                               const GGS_lstring & inKey,
                               const GGS_typeDomain & inParameter0,
                               GGS_luint * outIndex) ;
//--- Search for an element
  public : void searchElement (C_Lexique & inLexique,
                               const char * inErrorMessagesArray [],
                               const GGS_lstring & inKey,
                               GGS_typeDomain * outParameter0,
                               GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*

void searchKey_typeDomainMap (C_Lexique & inLexique,
                                GGS_typeDomainMap & ioMap,
                                const GGS_lstring & inKey,
                                GGS_typeDomain   * outParameter0,
                                GGS_luint * outIndex) ;

//---------------------------------------------------------------------------*

void insertKey_typeDomainMap (C_Lexique & inLexique,
                                GGS_typeDomainMap & ioMap,
                                const GGS_lstring & inKey,
                                const GGS_typeDomain &  inParameter0,
                                GGS_luint * outIndex) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   class list 'typeFormalArgumentsList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormalArgumentsList {
  public : class element_type {
    private : element_type * mNextItem ;
    public : GGS_luint  mVariableIndex ;
    public : GGS_luint  mVariableBitSize ;
    public : GGS_luint  mLowBound ;
    public : GGS_luint  mHighBound ;
    public : element_type (const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ) ;

    public : inline element_type * nextObject (void) const { return mNextItem ; }
    private : element_type (const element_type &) ;
    private : void operator = (const element_type &) ;
    public : ~element_type (void) {}
    friend class GGS_typeFormalArgumentsList ;
  } ;

  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : element_type * mCurrentItemPtr ;
  private : sint32 mCurrentItemIndex ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_typeFormalArgumentsList (void) ; // Default Constructor
  public : GGS_typeFormalArgumentsList (const GGS_typeFormalArgumentsList &) ; // Copy constructor
  public : void operator = (const GGS_typeFormalArgumentsList &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_typeFormalArgumentsList (void) ;

//--- Constructor 'new'
  public : static GGS_typeFormalArgumentsList constructor_empty (void) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3) ;
  protected : void internalAppendItem (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   class list 'typeActualArgumentsList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeActualArgumentsList {
  public : class element_type {
    private : element_type * mNextItem ;
    public : GGS_luint  mVariableIndex ;
    public : GGS_luint  mVariableBitSize ;
    public : GGS_luint  mLowBound ;
    public : GGS_luint  mHighBound ;
    public : GGS_location  mErrorLocation ;
    public : element_type (const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_location & ) ;

    public : inline element_type * nextObject (void) const { return mNextItem ; }
    private : element_type (const element_type &) ;
    private : void operator = (const element_type &) ;
    public : ~element_type (void) {}
    friend class GGS_typeActualArgumentsList ;
  } ;

  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : element_type * mCurrentItemPtr ;
  private : sint32 mCurrentItemIndex ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_typeActualArgumentsList (void) ; // Default Constructor
  public : GGS_typeActualArgumentsList (const GGS_typeActualArgumentsList &) ; // Copy constructor
  public : void operator = (const GGS_typeActualArgumentsList &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_typeActualArgumentsList (void) ;

//--- Constructor 'new'
  public : static GGS_typeActualArgumentsList constructor_empty (void) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_location & argument_4) ;
  protected : void internalAppendItem (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_location & argument_4) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

class cPtr_typeVariableDescriptor ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeVariableDescriptor'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeVariableDescriptor {
  protected : cPtr_typeVariableDescriptor * mPointer ;
  public : GGS_typeVariableDescriptor (void) ;
  public : GGS_typeVariableDescriptor (const GGS_typeVariableDescriptor &) ;
  public : virtual ~GGS_typeVariableDescriptor (void) ;
  public : void operator = (const GGS_typeVariableDescriptor &) ;
  public : bool isBuilt (void) const ;
  public : inline bool isEqualTo (const GGS_typeVariableDescriptor & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_typeVariableDescriptor * inSource) ;
  public : GGS_typeVariableDescriptor (cPtr_typeVariableDescriptor * inSource) ;
  public : inline cPtr_typeVariableDescriptor * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  public : cPtr_typeVariableDescriptor * operator () (void) const ;
  public : GGS_string reader_variableDescriptorErrorMessage (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               class map element 'e_typeTableVariablesBool'                *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeTableVariablesBool {
  public : GGS_typeVariableDescriptor  mVariableDescriptor ;
  public : bool isBuilt (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       map 'typeTableVariablesBool'                        *
//                                                                           *
//---------------------------------------------------------------------------*

typedef cTableVariablesBDD <e_typeTableVariablesBool, GGS_lstring> GGS_typeTableVariablesBool ;

void searchKey_typeTableVariablesBool (C_Lexique & inLexique,
                                GGS_typeTableVariablesBool & ioMap,
                                const GGS_lstring & inKey,
                                GGS_typeVariableDescriptor   * outParameter0,
                                GGS_luint * outIndex) ;

void insertKey_typeTableVariablesBool (C_Lexique & inLexique,
                                GGS_typeTableVariablesBool & ioMap,
                                const GGS_lstring & inKey,
                                const GGS_typeVariableDescriptor &  inParameter0,
                                GGS_luint * outIndex) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 DECLARATIONS FOR MAP 'typeTableFormules'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeTableFormules {
  public : GGS_typeFormalArgumentsList  aListeArgsFormelsBool ;
  public : GGS_bdd aBDD ;
} ;

//---------------------------------------------------------------------------*

class GGS_typeTableFormules : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_typeTableFormules & inInfo) ;
  //--- Method for key compare
    public : virtual sint32 compareKeys (void * inKey) const ;
  //--- Method for getting key as C_String
    public : virtual C_String stringForKey (void) const ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : const GGS_lstring mKey ;
    public : e_typeTableFormules mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (void * inKey, void * inInfo) ;
//--- 'empty' constructor
  public : static GGS_typeTableFormules constructor_empty (void) ;
//--- 'hasKey' reader
  public : GGS_bool reader_hasKey (const GGS_lstring & inKey) const ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- Insert an element
  public : void insertElement (C_Lexique & inLexique,
                               const char * inErrorMessagesArray [],
                               const GGS_lstring & inKey,
                               const GGS_typeFormalArgumentsList & inParameter0,
                               const GGS_bdd& inParameter1,
                               GGS_luint * outIndex) ;
//--- Search for an element
  public : void searchElement (C_Lexique & inLexique,
                               const char * inErrorMessagesArray [],
                               const GGS_lstring & inKey,
                               GGS_typeFormalArgumentsList * outParameter0,
                               GGS_bdd* outParameter1,
                               GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*

void searchKey_typeTableFormules (C_Lexique & inLexique,
                                GGS_typeTableFormules & ioMap,
                                const GGS_lstring & inKey,
                                GGS_typeFormalArgumentsList   * outParameter0,
                                GGS_bdd  * outParameter1,
                                GGS_luint * outIndex) ;

//---------------------------------------------------------------------------*

void insertKey_typeTableFormules (C_Lexique & inLexique,
                                GGS_typeTableFormules & ioMap,
                                const GGS_lstring & inKey,
                                const GGS_typeFormalArgumentsList &  inParameter0,
                                const GGS_bdd&  inParameter1,
                                GGS_luint * outIndex) ;

class cPtr_typeFormule ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeFormule'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormule {
  protected : cPtr_typeFormule * mPointer ;
  public : GGS_typeFormule (void) ;
  public : GGS_typeFormule (const GGS_typeFormule &) ;
  public : virtual ~GGS_typeFormule (void) ;
  public : void operator = (const GGS_typeFormule &) ;
  public : bool isBuilt (void) const ;
  public : inline bool isEqualTo (const GGS_typeFormule & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_typeFormule * inSource) ;
  public : GGS_typeFormule (cPtr_typeFormule * inSource) ;
  public : inline cPtr_typeFormule * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  public : cPtr_typeFormule * operator () (void) const ;
} ;

class cPtr_typeCalcul ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeCalcul'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeCalcul {
  protected : cPtr_typeCalcul * mPointer ;
  public : GGS_typeCalcul (void) ;
  public : GGS_typeCalcul (const GGS_typeCalcul &) ;
  public : virtual ~GGS_typeCalcul (void) ;
  public : void operator = (const GGS_typeCalcul &) ;
  public : bool isBuilt (void) const ;
  public : inline bool isEqualTo (const GGS_typeCalcul & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_typeCalcul * inSource) ;
  public : GGS_typeCalcul (cPtr_typeCalcul * inSource) ;
  public : inline cPtr_typeCalcul * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  public : cPtr_typeCalcul * operator () (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      class list 'typeListeCalculs'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeListeCalculs {
  public : class element_type {
    private : element_type * mNextItem ;
    public : GGS_typeCalcul  aCalcul ;
    public : element_type (const GGS_typeCalcul & ) ;

    public : inline element_type * nextObject (void) const { return mNextItem ; }
    private : element_type (const element_type &) ;
    private : void operator = (const element_type &) ;
    public : ~element_type (void) {}
    friend class GGS_typeListeCalculs ;
  } ;

  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : element_type * mCurrentItemPtr ;
  private : sint32 mCurrentItemIndex ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_typeListeCalculs (void) ; // Default Constructor
  public : GGS_typeListeCalculs (const GGS_typeListeCalculs &) ; // Copy constructor
  public : void operator = (const GGS_typeListeCalculs &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_typeListeCalculs (void) ;

//--- Constructor 'new'
  public : static GGS_typeListeCalculs constructor_empty (void) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_typeCalcul & argument_0) ;
  protected : void internalAppendItem (const GGS_typeCalcul & argument_0) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

void routine_verifierNombreArgumentsBool (C_Lexique &,
                                const GGS_typeFormalArgumentsList  &,
                                const GGS_typeActualArgumentsList  &,
                                const GGS_location  &) ;

#include "include_typeDomain.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeDirectDomain'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeDirectDomain

#define macroInheritFrom_typeDirectDomain

class cPtr_typeDirectDomain : public cPtr_typeDomain {
  private : typedef cPtr_typeDomain inherited ;
  macroInheritFrom_typeDomain
  macro_typeDirectDomain
  public : cPtr_typeDirectDomain (const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ) ;
  public : GGS_luint  mLowBound ;
  public : GGS_luint  mHighBound ;
  public : GGS_luint  mBitsCount ;
  public : virtual bool isBuilt (void) const ;

  public : virtual const char * message_messageDomainType (void) const ;
  public : static const char * static_string_message_messageDomainType (void) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeDirectDomain'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDirectDomain {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeDirectDomain * constructor_new (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2) ;
  #else
    public : inline static cPtr_typeDirectDomain * constructor_new (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2) {
      return new cPtr_typeDirectDomain(argument_0,
                                argument_1,
                                argument_2) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeRecordDomain'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeRecordDomain

#define macroInheritFrom_typeRecordDomain

class cPtr_typeRecordDomain : public cPtr_typeDomain {
  private : typedef cPtr_typeDomain inherited ;
  macroInheritFrom_typeDomain
  macro_typeRecordDomain
  public : cPtr_typeRecordDomain (const GGS_typeDomainMap & ) ;
  public : GGS_typeDomainMap  mRecordMap ;
  public : virtual bool isBuilt (void) const ;

  public : virtual const char * message_messageDomainType (void) const ;
  public : static const char * static_string_message_messageDomainType (void) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeRecordDomain'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeRecordDomain {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeRecordDomain * constructor_new (const GGS_typeDomainMap & argument_0) ;
  #else
    public : inline static cPtr_typeRecordDomain * constructor_new (const GGS_typeDomainMap & argument_0) {
      return new cPtr_typeRecordDomain(argument_0) ;
    }
  #endif
} ;

#include "include_typeVariableDescriptor.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeDirectVariable'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeDirectVariable

#define macroInheritFrom_typeDirectVariable

class cPtr_typeDirectVariable : public cPtr_typeVariableDescriptor {
  private : typedef cPtr_typeVariableDescriptor inherited ;
  macroInheritFrom_typeVariableDescriptor
  macro_typeDirectVariable
  public : cPtr_typeDirectVariable (const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ) ;
  public : GGS_luint  mIndex ;
  public : GGS_luint  mBitSize ;
  public : GGS_luint  mLowBound ;
  public : GGS_luint  mHighBound ;
  public : virtual bool isBuilt (void) const ;

  public : virtual const char * message_variableDescriptorErrorMessage (void) const ;
  public : static const char * static_string_message_variableDescriptorErrorMessage (void) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeDirectVariable'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDirectVariable {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeDirectVariable * constructor_new (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3) ;
  #else
    public : inline static cPtr_typeDirectVariable * constructor_new (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3) {
      return new cPtr_typeDirectVariable(argument_0,
                                argument_1,
                                argument_2,
                                argument_3) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeRecordVariable'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeRecordVariable

#define macroInheritFrom_typeRecordVariable

class cPtr_typeRecordVariable : public cPtr_typeVariableDescriptor {
  private : typedef cPtr_typeVariableDescriptor inherited ;
  macroInheritFrom_typeVariableDescriptor
  macro_typeRecordVariable
  public : cPtr_typeRecordVariable (const GGS_typeTableVariablesBool & ) ;
  public : GGS_typeTableVariablesBool  mMap ;
  public : virtual bool isBuilt (void) const ;

  public : virtual const char * message_variableDescriptorErrorMessage (void) const ;
  public : static const char * static_string_message_variableDescriptorErrorMessage (void) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeRecordVariable'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeRecordVariable {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeRecordVariable * constructor_new (const GGS_typeTableVariablesBool & argument_0) ;
  #else
    public : inline static cPtr_typeRecordVariable * constructor_new (const GGS_typeTableVariablesBool & argument_0) {
      return new cPtr_typeRecordVariable(argument_0) ;
    }
  #endif
} ;

#include "include_typeFormule.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeFormuleTrue'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeFormuleTrue

#define macroInheritFrom_typeFormuleTrue

class cPtr_typeFormuleTrue : public cPtr_typeFormule {
  private : typedef cPtr_typeFormule inherited ;
  macroInheritFrom_typeFormule
  macro_typeFormuleTrue
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeFormuleTrue'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleTrue {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeFormuleTrue * constructor_new () ;
  #else
    public : inline static cPtr_typeFormuleTrue * constructor_new () {
      return new cPtr_typeFormuleTrue() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeFormuleFalse'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeFormuleFalse

#define macroInheritFrom_typeFormuleFalse

class cPtr_typeFormuleFalse : public cPtr_typeFormule {
  private : typedef cPtr_typeFormule inherited ;
  macroInheritFrom_typeFormule
  macro_typeFormuleFalse
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeFormuleFalse'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleFalse {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeFormuleFalse * constructor_new () ;
  #else
    public : inline static cPtr_typeFormuleFalse * constructor_new () {
      return new cPtr_typeFormuleFalse() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeFormuleVar'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeFormuleVar

#define macroInheritFrom_typeFormuleVar

class cPtr_typeFormuleVar : public cPtr_typeFormule {
  private : typedef cPtr_typeFormule inherited ;
  macroInheritFrom_typeFormule
  macro_typeFormuleVar
  public : cPtr_typeFormuleVar (const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ) ;
  public : GGS_luint  aNumeroVariable ;
  public : GGS_luint  mLowBound ;
  public : GGS_luint  mHighBound ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeFormuleVar'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleVar {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeFormuleVar * constructor_new (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2) ;
  #else
    public : inline static cPtr_typeFormuleVar * constructor_new (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2) {
      return new cPtr_typeFormuleVar(argument_0,
                                argument_1,
                                argument_2) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeFormuleFor'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeFormuleFor

#define macroInheritFrom_typeFormuleFor

class cPtr_typeFormuleFor : public cPtr_typeFormule {
  private : typedef cPtr_typeFormule inherited ;
  macroInheritFrom_typeFormule
  macro_typeFormuleFor
  public : cPtr_typeFormuleFor (const GGS_luint & ,
                                const GGS_typeActualArgumentsList & ,
                                const GGS_bdd& ,
                                const GGS_lbool & ) ;
  public : GGS_luint  aNumeroFormule ;
  public : GGS_typeActualArgumentsList  aListeArgsBool ;
  public : GGS_bdd aFormuleTraduite ;
  public : GGS_lbool  aEstFormuleCourante ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeFormuleFor'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleFor {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeFormuleFor * constructor_new (const GGS_luint & argument_0,
                                const GGS_typeActualArgumentsList & argument_1,
                                const GGS_bdd& argument_2,
                                const GGS_lbool & argument_3) ;
  #else
    public : inline static cPtr_typeFormuleFor * constructor_new (const GGS_luint & argument_0,
                                const GGS_typeActualArgumentsList & argument_1,
                                const GGS_bdd& argument_2,
                                const GGS_lbool & argument_3) {
      return new cPtr_typeFormuleFor(argument_0,
                                argument_1,
                                argument_2,
                                argument_3) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeFormuleNon'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeFormuleNon

#define macroInheritFrom_typeFormuleNon

class cPtr_typeFormuleNon : public cPtr_typeFormule {
  private : typedef cPtr_typeFormule inherited ;
  macroInheritFrom_typeFormule
  macro_typeFormuleNon
  public : cPtr_typeFormuleNon (const GGS_typeFormule & ) ;
  public : GGS_typeFormule  aOperande ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeFormuleNon'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleNon {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeFormuleNon * constructor_new (const GGS_typeFormule & argument_0) ;
  #else
    public : inline static cPtr_typeFormuleNon * constructor_new (const GGS_typeFormule & argument_0) {
      return new cPtr_typeFormuleNon(argument_0) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeFormuleEt'                            *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeFormuleEt

#define macroInheritFrom_typeFormuleEt

class cPtr_typeFormuleEt : public cPtr_typeFormule {
  private : typedef cPtr_typeFormule inherited ;
  macroInheritFrom_typeFormule
  macro_typeFormuleEt
  public : cPtr_typeFormuleEt (const GGS_typeFormule & ,
                                const GGS_typeFormule & ) ;
  public : GGS_typeFormule  aOperande1 ;
  public : GGS_typeFormule  aOperande2 ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_typeFormuleEt'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleEt {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeFormuleEt * constructor_new (const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1) ;
  #else
    public : inline static cPtr_typeFormuleEt * constructor_new (const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1) {
      return new cPtr_typeFormuleEt(argument_0,
                                argument_1) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeFormuleIte'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeFormuleIte

#define macroInheritFrom_typeFormuleIte

class cPtr_typeFormuleIte : public cPtr_typeFormule {
  private : typedef cPtr_typeFormule inherited ;
  macroInheritFrom_typeFormule
  macro_typeFormuleIte
  public : cPtr_typeFormuleIte (const GGS_typeFormule & ,
                                const GGS_typeFormule & ,
                                const GGS_typeFormule & ) ;
  public : GGS_typeFormule  aOperande1 ;
  public : GGS_typeFormule  aOperande2 ;
  public : GGS_typeFormule  aOperande3 ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeFormuleIte'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleIte {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeFormuleIte * constructor_new (const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_typeFormule & argument_2) ;
  #else
    public : inline static cPtr_typeFormuleIte * constructor_new (const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_typeFormule & argument_2) {
      return new cPtr_typeFormuleIte(argument_0,
                                argument_1,
                                argument_2) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeFormuleOu'                            *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeFormuleOu

#define macroInheritFrom_typeFormuleOu

class cPtr_typeFormuleOu : public cPtr_typeFormule {
  private : typedef cPtr_typeFormule inherited ;
  macroInheritFrom_typeFormule
  macro_typeFormuleOu
  public : cPtr_typeFormuleOu (const GGS_typeFormule & ,
                                const GGS_typeFormule & ) ;
  public : GGS_typeFormule  aOperande1 ;
  public : GGS_typeFormule  aOperande2 ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_typeFormuleOu'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleOu {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeFormuleOu * constructor_new (const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1) ;
  #else
    public : inline static cPtr_typeFormuleOu * constructor_new (const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1) {
      return new cPtr_typeFormuleOu(argument_0,
                                argument_1) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeFormuleImplique'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeFormuleImplique

#define macroInheritFrom_typeFormuleImplique

class cPtr_typeFormuleImplique : public cPtr_typeFormule {
  private : typedef cPtr_typeFormule inherited ;
  macroInheritFrom_typeFormule
  macro_typeFormuleImplique
  public : cPtr_typeFormuleImplique (const GGS_typeFormule & ,
                                const GGS_typeFormule & ) ;
  public : GGS_typeFormule  aOperande1 ;
  public : GGS_typeFormule  aOperande2 ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeFormuleImplique'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleImplique {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeFormuleImplique * constructor_new (const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1) ;
  #else
    public : inline static cPtr_typeFormuleImplique * constructor_new (const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1) {
      return new cPtr_typeFormuleImplique(argument_0,
                                argument_1) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'typeComparaisonFormules'                       *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeComparaisonFormules

#define macroInheritFrom_typeComparaisonFormules

class cPtr_typeComparaisonFormules : public cPtr_typeFormule {
  private : typedef cPtr_typeFormule inherited ;
  macroInheritFrom_typeFormule
  macro_typeComparaisonFormules
  public : cPtr_typeComparaisonFormules (const GGS_luint & ,
                                const GGS_typeFormule & ,
                                const GGS_typeFormule & ) ;
  public : GGS_luint  aComparaison ;
  public : GGS_typeFormule  aOperande1 ;
  public : GGS_typeFormule  aOperande2 ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeComparaisonFormules'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeComparaisonFormules {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeComparaisonFormules * constructor_new (const GGS_luint & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_typeFormule & argument_2) ;
  #else
    public : inline static cPtr_typeComparaisonFormules * constructor_new (const GGS_luint & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_typeFormule & argument_2) {
      return new cPtr_typeComparaisonFormules(argument_0,
                                argument_1,
                                argument_2) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeFormuleExist'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeFormuleExist

#define macroInheritFrom_typeFormuleExist

class cPtr_typeFormuleExist : public cPtr_typeFormule {
  private : typedef cPtr_typeFormule inherited ;
  macroInheritFrom_typeFormule
  macro_typeFormuleExist
  public : cPtr_typeFormuleExist (const GGS_typeFormalArgumentsList & ,
                                const GGS_typeFormule & ,
                                const GGS_bdd& ) ;
  public : GGS_typeFormalArgumentsList  aListeArgsBooleens ;
  public : GGS_typeFormule  aOperande ;
  public : GGS_bdd aContraintes ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeFormuleExist'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleExist {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeFormuleExist * constructor_new (const GGS_typeFormalArgumentsList & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_bdd& argument_2) ;
  #else
    public : inline static cPtr_typeFormuleExist * constructor_new (const GGS_typeFormalArgumentsList & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_bdd& argument_2) {
      return new cPtr_typeFormuleExist(argument_0,
                                argument_1,
                                argument_2) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   class 'typeFormuleComparaisonValeur'                    *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeFormuleComparaisonValeur

#define macroInheritFrom_typeFormuleComparaisonValeur

class cPtr_typeFormuleComparaisonValeur : public cPtr_typeFormule {
  private : typedef cPtr_typeFormule inherited ;
  macroInheritFrom_typeFormule
  macro_typeFormuleComparaisonValeur
  public : cPtr_typeFormuleComparaisonValeur (const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ) ;
  public : GGS_luint  aIndiceBDD ;
  public : GGS_luint  aDimension ;
  public : GGS_luint  mLowBound ;
  public : GGS_luint  mHighBound ;
  public : GGS_luint  aComparaison ;
  public : GGS_luint  aValeur ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_typeFormuleComparaisonValeur'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleComparaisonValeur {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeFormuleComparaisonValeur * constructor_new (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_luint & argument_4,
                                const GGS_luint & argument_5) ;
  #else
    public : inline static cPtr_typeFormuleComparaisonValeur * constructor_new (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_luint & argument_4,
                                const GGS_luint & argument_5) {
      return new cPtr_typeFormuleComparaisonValeur(argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'typeFormuleComparaisonVariable'                   *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeFormuleComparaisonVariable

#define macroInheritFrom_typeFormuleComparaisonVariable

class cPtr_typeFormuleComparaisonVariable : public cPtr_typeFormule {
  private : typedef cPtr_typeFormule inherited ;
  macroInheritFrom_typeFormule
  macro_typeFormuleComparaisonVariable
  public : cPtr_typeFormuleComparaisonVariable (const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ) ;
  public : GGS_luint  aIndiceBDDgauche ;
  public : GGS_luint  aDimension ;
  public : GGS_luint  mLeftLowBound ;
  public : GGS_luint  mLeftHighBound ;
  public : GGS_luint  aComparaison ;
  public : GGS_luint  aIndiceBDDdroite ;
  public : GGS_luint  mRightLowBound ;
  public : GGS_luint  mRightHighBound ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_typeFormuleComparaisonVariable'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleComparaisonVariable {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeFormuleComparaisonVariable * constructor_new (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_luint & argument_4,
                                const GGS_luint & argument_5,
                                const GGS_luint & argument_6,
                                const GGS_luint & argument_7) ;
  #else
    public : inline static cPtr_typeFormuleComparaisonVariable * constructor_new (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_luint & argument_4,
                                const GGS_luint & argument_5,
                                const GGS_luint & argument_6,
                                const GGS_luint & argument_7) {
      return new cPtr_typeFormuleComparaisonVariable(argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6,
                                argument_7) ;
    }
  #endif
} ;

#include "include_typeCalcul.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeCalculSimple'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeCalculSimple

#define macroInheritFrom_typeCalculSimple

class cPtr_typeCalculSimple : public cPtr_typeCalcul {
  private : typedef cPtr_typeCalcul inherited ;
  macroInheritFrom_typeCalcul
  macro_typeCalculSimple
  public : cPtr_typeCalculSimple (const GGS_luint & ,
                                const GGS_typeFormule & ,
                                const GGS_lstring & ,
                                const GGS_typeTableVariablesBool & ,
                                const GGS_luint & ) ;
  public : GGS_luint  aNumeroFormule ;
  public : GGS_typeFormule  aFormule ;
  public : GGS_lstring  aNomFormule ;
  public : GGS_typeTableVariablesBool  aTableVariablesBool ;
  public : GGS_luint  aAfficher ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeCalculSimple'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeCalculSimple {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeCalculSimple * constructor_new (const GGS_luint & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_typeTableVariablesBool & argument_3,
                                const GGS_luint & argument_4) ;
  #else
    public : inline static cPtr_typeCalculSimple * constructor_new (const GGS_luint & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_typeTableVariablesBool & argument_3,
                                const GGS_luint & argument_4) {
      return new cPtr_typeCalculSimple(argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'typeUse_AND'                             *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeUse_AND

#define macroInheritFrom_typeUse_AND

class cPtr_typeUse_AND : public cPtr_typeCalcul {
  private : typedef cPtr_typeCalcul inherited ;
  macroInheritFrom_typeCalcul
  macro_typeUse_AND
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeUse_AND'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeUse_AND {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeUse_AND * constructor_new () ;
  #else
    public : inline static cPtr_typeUse_AND * constructor_new () {
      return new cPtr_typeUse_AND() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'typeUse_ITE'                             *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeUse_ITE

#define macroInheritFrom_typeUse_ITE

class cPtr_typeUse_ITE : public cPtr_typeCalcul {
  private : typedef cPtr_typeCalcul inherited ;
  macroInheritFrom_typeCalcul
  macro_typeUse_ITE
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeUse_ITE'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeUse_ITE {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeUse_ITE * constructor_new () ;
  #else
    public : inline static cPtr_typeUse_ITE * constructor_new () {
      return new cPtr_typeUse_ITE() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeUse_AND_ITE'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeUse_AND_ITE

#define macroInheritFrom_typeUse_AND_ITE

class cPtr_typeUse_AND_ITE : public cPtr_typeCalcul {
  private : typedef cPtr_typeCalcul inherited ;
  macroInheritFrom_typeCalcul
  macro_typeUse_AND_ITE
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeUse_AND_ITE'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeUse_AND_ITE {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeUse_AND_ITE * constructor_new () ;
  #else
    public : inline static cPtr_typeUse_AND_ITE * constructor_new () {
      return new cPtr_typeUse_AND_ITE() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'typeDimensionnerANDCache'                      *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeDimensionnerANDCache

#define macroInheritFrom_typeDimensionnerANDCache

class cPtr_typeDimensionnerANDCache : public cPtr_typeCalcul {
  private : typedef cPtr_typeCalcul inherited ;
  macroInheritFrom_typeCalcul
  macro_typeDimensionnerANDCache
  public : cPtr_typeDimensionnerANDCache (const GGS_luint & ) ;
  public : GGS_luint  aDimensionCache ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeDimensionnerANDCache'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDimensionnerANDCache {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeDimensionnerANDCache * constructor_new (const GGS_luint & argument_0) ;
  #else
    public : inline static cPtr_typeDimensionnerANDCache * constructor_new (const GGS_luint & argument_0) {
      return new cPtr_typeDimensionnerANDCache(argument_0) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'typeDimensionnerITECache'                      *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeDimensionnerITECache

#define macroInheritFrom_typeDimensionnerITECache

class cPtr_typeDimensionnerITECache : public cPtr_typeCalcul {
  private : typedef cPtr_typeCalcul inherited ;
  macroInheritFrom_typeCalcul
  macro_typeDimensionnerITECache
  public : cPtr_typeDimensionnerITECache (const GGS_luint & ) ;
  public : GGS_luint  aDimensionCache ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeDimensionnerITECache'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDimensionnerITECache {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeDimensionnerITECache * constructor_new (const GGS_luint & argument_0) ;
  #else
    public : inline static cPtr_typeDimensionnerITECache * constructor_new (const GGS_luint & argument_0) {
      return new cPtr_typeDimensionnerITECache(argument_0) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'typeDimensionnerTable'                        *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeDimensionnerTable

#define macroInheritFrom_typeDimensionnerTable

class cPtr_typeDimensionnerTable : public cPtr_typeCalcul {
  private : typedef cPtr_typeCalcul inherited ;
  macroInheritFrom_typeCalcul
  macro_typeDimensionnerTable
  public : cPtr_typeDimensionnerTable (const GGS_luint & ) ;
  public : GGS_luint  aDimensionTable ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeDimensionnerTable'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDimensionnerTable {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeDimensionnerTable * constructor_new (const GGS_luint & argument_0) ;
  #else
    public : inline static cPtr_typeDimensionnerTable * constructor_new (const GGS_luint & argument_0) {
      return new cPtr_typeDimensionnerTable(argument_0) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeAfficherBilan'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeAfficherBilan

#define macroInheritFrom_typeAfficherBilan

class cPtr_typeAfficherBilan : public cPtr_typeCalcul {
  private : typedef cPtr_typeCalcul inherited ;
  macroInheritFrom_typeCalcul
  macro_typeAfficherBilan
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeAfficherBilan'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeAfficherBilan {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeAfficherBilan * constructor_new () ;
  #else
    public : inline static cPtr_typeAfficherBilan * constructor_new () {
      return new cPtr_typeAfficherBilan() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeCalculIteratif'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#define macro_typeCalculIteratif

#define macroInheritFrom_typeCalculIteratif

class cPtr_typeCalculIteratif : public cPtr_typeCalcul {
  private : typedef cPtr_typeCalcul inherited ;
  macroInheritFrom_typeCalcul
  macro_typeCalculIteratif
  public : cPtr_typeCalculIteratif (const GGS_luint & ,
                                const GGS_typeFormule & ,
                                const GGS_lstring & ,
                                const GGS_typeTableVariablesBool & ,
                                const GGS_lbool & ,
                                const GGS_luint & ) ;
  public : GGS_luint  aNumeroFormule ;
  public : GGS_typeFormule  aFormule ;
  public : GGS_lstring  aNomFormule ;
  public : GGS_typeTableVariablesBool  aTableVariablesBool ;
  public : GGS_lbool  aSigne ;
  public : GGS_luint  aAfficher ;
  public : virtual bool isBuilt (void) const ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeCalculIteratif'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeCalculIteratif {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeCalculIteratif * constructor_new (const GGS_luint & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_typeTableVariablesBool & argument_3,
                                const GGS_lbool & argument_4,
                                const GGS_luint & argument_5) ;
  #else
    public : inline static cPtr_typeCalculIteratif * constructor_new (const GGS_luint & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_typeTableVariablesBool & argument_3,
                                const GGS_lbool & argument_4,
                                const GGS_luint & argument_5) {
      return new cPtr_typeCalculIteratif(argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*

#endif
