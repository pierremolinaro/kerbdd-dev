//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'semantiqueBDD.h'                           *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                     october 28th, 2006, at 21h20'35"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef semantiqueBDD_DEFINED
#define semantiqueBDD_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/AC_galgas_io.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_list.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

#include "C_galgas_bdd.h"
typedef C_galgas_bdd GGS_bdd ;
typedef C_galgas_bdd GGG_bdd ;
class GGS_typeDomain ;
class cPtr_typeDomain ;
class GGS_typeDirectDomain ;
class cPtr_typeDirectDomain ;
class GGS_typeDomainMap ;
class GGS_typeRecordDomain ;
class cPtr_typeRecordDomain ;
class GGS_typeFormalArgumentsList ;
class GGS_typeActualArgumentsList ;
class GGS_typeVariableDescriptor ;
class cPtr_typeVariableDescriptor ;
class GGS_typeDirectVariable ;
class cPtr_typeDirectVariable ;
class GGS_typeTableVariablesBool ;
class GGS_typeRecordVariable ;
class cPtr_typeRecordVariable ;
class GGS_typeTableFormules ;
class GGS_typeFormule ;
class cPtr_typeFormule ;
class GGS_typeFormuleTrue ;
class cPtr_typeFormuleTrue ;
class GGS_typeFormuleFalse ;
class cPtr_typeFormuleFalse ;
class GGS_typeFormuleVar ;
class cPtr_typeFormuleVar ;
class GGS_typeFormuleFor ;
class cPtr_typeFormuleFor ;
class GGS_typeFormuleNon ;
class cPtr_typeFormuleNon ;
class GGS_typeFormuleEt ;
class cPtr_typeFormuleEt ;
class GGS_typeFormuleIte ;
class cPtr_typeFormuleIte ;
class GGS_typeFormuleOu ;
class cPtr_typeFormuleOu ;
class GGS_typeFormuleImplique ;
class cPtr_typeFormuleImplique ;
class GGS_typeComparaisonFormules ;
class cPtr_typeComparaisonFormules ;
class GGS_typeFormuleExist ;
class cPtr_typeFormuleExist ;
class GGS_typeFormuleComparaisonValeur ;
class cPtr_typeFormuleComparaisonValeur ;
class GGS_typeFormuleComparaisonVariable ;
class cPtr_typeFormuleComparaisonVariable ;
class GGS_typeCalcul ;
class cPtr_typeCalcul ;
class GGS_typeCalculSimple ;
class cPtr_typeCalculSimple ;
class GGS_typeUse_AND ;
class cPtr_typeUse_AND ;
class GGS_typeUse_ITE ;
class cPtr_typeUse_ITE ;
class GGS_typeUse_AND_ITE ;
class cPtr_typeUse_AND_ITE ;
class GGS_typeDimensionnerANDCache ;
class cPtr_typeDimensionnerANDCache ;
class GGS_typeDimensionnerITECache ;
class cPtr_typeDimensionnerITECache ;
class GGS_typeDimensionnerTable ;
class cPtr_typeDimensionnerTable ;
class GGS_typeAfficherBilan ;
class cPtr_typeAfficherBilan ;
class GGS_typeCalculIteratif ;
class cPtr_typeCalculIteratif ;
class GGS_typeListeCalculs ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeDomain'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDomain {
//--- Pointer to actual instance
  protected : cPtr_typeDomain * mPointer ;
//--- Default constructor
  public : GGS_typeDomain (void) ;
//--- Copy constructor
  public : GGS_typeDomain (const GGS_typeDomain &) ;
//--- Virtual destructor
  public : virtual ~GGS_typeDomain (void) ;
//--- Assignment operator
  public : void operator = (const GGS_typeDomain &) ;
//--- _isBuilt
  public : inline bool _isBuilt (void) const { return mPointer != NULL ; }
//--- isEqualTo
  public : inline bool isEqualTo (const GGS_typeDomain & _inOperand) const {
    return mPointer == _inOperand.mPointer ;
  }
//--- getPtr
  public : inline cPtr_typeDomain * getPtr (void) const {
    return mPointer ;
  }
//--- drop
  public : void _drop_operation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDomain * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDomain * operator () (LOCATION_ARGS) const {
      return mPointer ;
    }
  #endif
//--- 'messageDomainType' message
  public : GGS_string reader_messageDomainType (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeDirectDomain'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDirectDomain : public GGS_typeDomain {
//--- Default Constructor
  public : GGS_typeDirectDomain (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeDirectDomain constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDirectDomain * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDirectDomain * operator () (LOCATION_ARGS) const {
      return (cPtr_typeDirectDomain *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           Map '@typeDomainMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeDomainMap ;

class GGS_typeDomainMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_typeDomainMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeDomainMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeDomainMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_typeDomainMap constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_typeDomain &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_typeDomain   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  const GGS_typeDomain & inParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_typeDomain & outParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_typeDomainMap constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_typeDomainMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_typeDomainMap reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeRecordDomain'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeRecordDomain : public GGS_typeDomain {
//--- Default Constructor
  public : GGS_typeRecordDomain (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeRecordDomain constructor_new (C_Lexique & inLexique,
                                const GGS_typeDomainMap & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeRecordDomain * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeRecordDomain * operator () (LOCATION_ARGS) const {
      return (cPtr_typeRecordDomain *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@typeFormalArgumentsList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeFormalArgumentsList ;

class GGS_typeFormalArgumentsList : public AC_galgas_list {
  public : typedef elementOf_GGS_typeFormalArgumentsList element_type ;
//--- Default Constructor
  public : GGS_typeFormalArgumentsList (void) ;
//--- Copy Constructor
  public : GGS_typeFormalArgumentsList (const GGS_typeFormalArgumentsList & inSource) ;
//--- Assignment Operator
//  public : void operator = (const GGS_typeFormalArgumentsList & inSource) ;
//--- Constructor 'emptyList'
  public : static GGS_typeFormalArgumentsList constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_typeFormalArgumentsList constructor_listWithValue (C_Lexique & _inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_typeFormalArgumentsList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Lexique & _inLexique,
                              GGS_luint & _out_0,
                              GGS_luint & _out_1,
                              GGS_luint & _out_2,
                              GGS_luint & _out_3
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Lexique & _inLexique,
                             GGS_luint & _out_0,
                             GGS_luint & _out_1,
                             GGS_luint & _out_2,
                             GGS_luint & _out_3
                             COMMA_LOCATION_ARGS) const ;
//--- Method 'popLast'
  public : void method_popLast (C_Lexique & _inLexique,
                                GGS_luint & _out_0,
                                GGS_luint & _out_1,
                                GGS_luint & _out_2,
                                GGS_luint & _out_3
                                COMMA_LOCATION_ARGS) ;
//--- Method 'popFirst'
  public : void method_popFirst (C_Lexique & _inLexique,
                                 GGS_luint & _out_0,
                                 GGS_luint & _out_1,
                                 GGS_luint & _out_2,
                                 GGS_luint & _out_3
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3) ;
//--- Handling '.' GALGAS operator
  public : GGS_typeFormalArgumentsList operator + (const GGS_typeFormalArgumentsList & inOperand) const ;
  public : void method_prependValue (C_Lexique & _inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3) ;
  protected : void _internalPrependValues (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3) ;
//--- List Insulation
  protected : void _insulateList (void) ;
//--- Reader 'description
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@typeActualArgumentsList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeActualArgumentsList ;

class GGS_typeActualArgumentsList : public AC_galgas_list {
  public : typedef elementOf_GGS_typeActualArgumentsList element_type ;
//--- Default Constructor
  public : GGS_typeActualArgumentsList (void) ;
//--- Copy Constructor
  public : GGS_typeActualArgumentsList (const GGS_typeActualArgumentsList & inSource) ;
//--- Assignment Operator
//  public : void operator = (const GGS_typeActualArgumentsList & inSource) ;
//--- Constructor 'emptyList'
  public : static GGS_typeActualArgumentsList constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_typeActualArgumentsList constructor_listWithValue (C_Lexique & _inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_location & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_typeActualArgumentsList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Lexique & _inLexique,
                              GGS_luint & _out_0,
                              GGS_luint & _out_1,
                              GGS_luint & _out_2,
                              GGS_luint & _out_3,
                              GGS_location & _out_4
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Lexique & _inLexique,
                             GGS_luint & _out_0,
                             GGS_luint & _out_1,
                             GGS_luint & _out_2,
                             GGS_luint & _out_3,
                             GGS_location & _out_4
                             COMMA_LOCATION_ARGS) const ;
//--- Method 'popLast'
  public : void method_popLast (C_Lexique & _inLexique,
                                GGS_luint & _out_0,
                                GGS_luint & _out_1,
                                GGS_luint & _out_2,
                                GGS_luint & _out_3,
                                GGS_location & _out_4
                                COMMA_LOCATION_ARGS) ;
//--- Method 'popFirst'
  public : void method_popFirst (C_Lexique & _inLexique,
                                 GGS_luint & _out_0,
                                 GGS_luint & _out_1,
                                 GGS_luint & _out_2,
                                 GGS_luint & _out_3,
                                 GGS_location & _out_4
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_location & argument_4) ;
//--- Handling '.' GALGAS operator
  public : GGS_typeActualArgumentsList operator + (const GGS_typeActualArgumentsList & inOperand) const ;
  public : void method_prependValue (C_Lexique & _inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_location & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_location & argument_4) ;
  protected : void _internalPrependValues (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_location & argument_4) ;
//--- List Insulation
  protected : void _insulateList (void) ;
//--- Reader 'description
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeVariableDescriptor'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeVariableDescriptor {
//--- Pointer to actual instance
  protected : cPtr_typeVariableDescriptor * mPointer ;
//--- Default constructor
  public : GGS_typeVariableDescriptor (void) ;
//--- Copy constructor
  public : GGS_typeVariableDescriptor (const GGS_typeVariableDescriptor &) ;
//--- Virtual destructor
  public : virtual ~GGS_typeVariableDescriptor (void) ;
//--- Assignment operator
  public : void operator = (const GGS_typeVariableDescriptor &) ;
//--- _isBuilt
  public : inline bool _isBuilt (void) const { return mPointer != NULL ; }
//--- isEqualTo
  public : inline bool isEqualTo (const GGS_typeVariableDescriptor & _inOperand) const {
    return mPointer == _inOperand.mPointer ;
  }
//--- getPtr
  public : inline cPtr_typeVariableDescriptor * getPtr (void) const {
    return mPointer ;
  }
//--- drop
  public : void _drop_operation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeVariableDescriptor * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeVariableDescriptor * operator () (LOCATION_ARGS) const {
      return mPointer ;
    }
  #endif
//--- 'variableDescriptorErrorMessage' message
  public : GGS_string reader_variableDescriptorErrorMessage (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeDirectVariable'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDirectVariable : public GGS_typeVariableDescriptor {
//--- Default Constructor
  public : GGS_typeDirectVariable (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeDirectVariable constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDirectVariable * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDirectVariable * operator () (LOCATION_ARGS) const {
      return (cPtr_typeDirectVariable *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Map '@typeTableVariablesBool'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableVariablesBool ;

class GGS_typeTableVariablesBool : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_typeTableVariablesBool element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeTableVariablesBool * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeTableVariablesBool * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_typeTableVariablesBool constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_typeVariableDescriptor &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_typeVariableDescriptor   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  const GGS_typeVariableDescriptor & inParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_typeVariableDescriptor & outParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_typeTableVariablesBool constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_typeTableVariablesBool & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_typeTableVariablesBool reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeRecordVariable'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeRecordVariable : public GGS_typeVariableDescriptor {
//--- Default Constructor
  public : GGS_typeRecordVariable (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeRecordVariable constructor_new (C_Lexique & inLexique,
                                const GGS_typeTableVariablesBool & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeRecordVariable * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeRecordVariable * operator () (LOCATION_ARGS) const {
      return (cPtr_typeRecordVariable *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         Map '@typeTableFormules'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableFormules ;

class GGS_typeTableFormules : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_typeTableFormules element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeTableFormules * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeTableFormules * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_typeTableFormules constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_typeFormalArgumentsList &  inParameter0,
                                const GGS_bdd&  inParameter1 COMMA_LOCATION_ARGS) ;
//--- 'insertKeyGetIndex' Insert Method
  public : void method_insertKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_typeFormalArgumentsList &  inParameter0,
                                const GGS_bdd&  inParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_typeFormalArgumentsList   & outParameter0,
                                GGS_bdd  & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- 'searchKeyGetIndex' Search Method
  public : void method_searchKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_typeFormalArgumentsList   & outParameter0,
                                GGS_bdd  & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  const GGS_typeFormalArgumentsList & inParameter0,
                                  const GGS_bdd& inParameter1,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_typeFormalArgumentsList & outParameter0,
                                  GGS_bdd& outParameter1,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_typeTableFormules constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_typeTableFormules & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_typeTableFormules reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeFormule'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormule {
//--- Pointer to actual instance
  protected : cPtr_typeFormule * mPointer ;
//--- Default constructor
  public : GGS_typeFormule (void) ;
//--- Copy constructor
  public : GGS_typeFormule (const GGS_typeFormule &) ;
//--- Virtual destructor
  public : virtual ~GGS_typeFormule (void) ;
//--- Assignment operator
  public : void operator = (const GGS_typeFormule &) ;
//--- _isBuilt
  public : inline bool _isBuilt (void) const { return mPointer != NULL ; }
//--- isEqualTo
  public : inline bool isEqualTo (const GGS_typeFormule & _inOperand) const {
    return mPointer == _inOperand.mPointer ;
  }
//--- getPtr
  public : inline cPtr_typeFormule * getPtr (void) const {
    return mPointer ;
  }
//--- drop
  public : void _drop_operation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeFormule * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeFormule * operator () (LOCATION_ARGS) const {
      return mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeFormuleTrue'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleTrue : public GGS_typeFormule {
//--- Default Constructor
  public : GGS_typeFormuleTrue (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeFormuleTrue constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeFormuleTrue * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeFormuleTrue * operator () (LOCATION_ARGS) const {
      return (cPtr_typeFormuleTrue *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeFormuleFalse'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleFalse : public GGS_typeFormule {
//--- Default Constructor
  public : GGS_typeFormuleFalse (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeFormuleFalse constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeFormuleFalse * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeFormuleFalse * operator () (LOCATION_ARGS) const {
      return (cPtr_typeFormuleFalse *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeFormuleVar'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleVar : public GGS_typeFormule {
//--- Default Constructor
  public : GGS_typeFormuleVar (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeFormuleVar constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeFormuleVar * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeFormuleVar * operator () (LOCATION_ARGS) const {
      return (cPtr_typeFormuleVar *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeFormuleFor'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleFor : public GGS_typeFormule {
//--- Default Constructor
  public : GGS_typeFormuleFor (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeFormuleFor constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_typeActualArgumentsList & argument_1,
                                const GGS_bdd& argument_2,
                                const GGS_lbool & argument_3 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeFormuleFor * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeFormuleFor * operator () (LOCATION_ARGS) const {
      return (cPtr_typeFormuleFor *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeFormuleNon'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleNon : public GGS_typeFormule {
//--- Default Constructor
  public : GGS_typeFormuleNon (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeFormuleNon constructor_new (C_Lexique & inLexique,
                                const GGS_typeFormule & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeFormuleNon * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeFormuleNon * operator () (LOCATION_ARGS) const {
      return (cPtr_typeFormuleNon *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_typeFormuleEt'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleEt : public GGS_typeFormule {
//--- Default Constructor
  public : GGS_typeFormuleEt (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeFormuleEt constructor_new (C_Lexique & inLexique,
                                const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeFormuleEt * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeFormuleEt * operator () (LOCATION_ARGS) const {
      return (cPtr_typeFormuleEt *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeFormuleIte'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleIte : public GGS_typeFormule {
//--- Default Constructor
  public : GGS_typeFormuleIte (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeFormuleIte constructor_new (C_Lexique & inLexique,
                                const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_typeFormule & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeFormuleIte * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeFormuleIte * operator () (LOCATION_ARGS) const {
      return (cPtr_typeFormuleIte *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_typeFormuleOu'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleOu : public GGS_typeFormule {
//--- Default Constructor
  public : GGS_typeFormuleOu (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeFormuleOu constructor_new (C_Lexique & inLexique,
                                const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeFormuleOu * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeFormuleOu * operator () (LOCATION_ARGS) const {
      return (cPtr_typeFormuleOu *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeFormuleImplique'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleImplique : public GGS_typeFormule {
//--- Default Constructor
  public : GGS_typeFormuleImplique (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeFormuleImplique constructor_new (C_Lexique & inLexique,
                                const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeFormuleImplique * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeFormuleImplique * operator () (LOCATION_ARGS) const {
      return (cPtr_typeFormuleImplique *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeComparaisonFormules'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeComparaisonFormules : public GGS_typeFormule {
//--- Default Constructor
  public : GGS_typeComparaisonFormules (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeComparaisonFormules constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_typeFormule & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeComparaisonFormules * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeComparaisonFormules * operator () (LOCATION_ARGS) const {
      return (cPtr_typeComparaisonFormules *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeFormuleExist'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleExist : public GGS_typeFormule {
//--- Default Constructor
  public : GGS_typeFormuleExist (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeFormuleExist constructor_new (C_Lexique & inLexique,
                                const GGS_typeFormalArgumentsList & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_bdd& argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeFormuleExist * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeFormuleExist * operator () (LOCATION_ARGS) const {
      return (cPtr_typeFormuleExist *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_typeFormuleComparaisonValeur'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleComparaisonValeur : public GGS_typeFormule {
//--- Default Constructor
  public : GGS_typeFormuleComparaisonValeur (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeFormuleComparaisonValeur constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_luint & argument_4,
                                const GGS_luint & argument_5 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeFormuleComparaisonValeur * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeFormuleComparaisonValeur * operator () (LOCATION_ARGS) const {
      return (cPtr_typeFormuleComparaisonValeur *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_typeFormuleComparaisonVariable'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleComparaisonVariable : public GGS_typeFormule {
//--- Default Constructor
  public : GGS_typeFormuleComparaisonVariable (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeFormuleComparaisonVariable constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_luint & argument_4,
                                const GGS_luint & argument_5,
                                const GGS_luint & argument_6,
                                const GGS_luint & argument_7 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeFormuleComparaisonVariable * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeFormuleComparaisonVariable * operator () (LOCATION_ARGS) const {
      return (cPtr_typeFormuleComparaisonVariable *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeCalcul'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeCalcul {
//--- Pointer to actual instance
  protected : cPtr_typeCalcul * mPointer ;
//--- Default constructor
  public : GGS_typeCalcul (void) ;
//--- Copy constructor
  public : GGS_typeCalcul (const GGS_typeCalcul &) ;
//--- Virtual destructor
  public : virtual ~GGS_typeCalcul (void) ;
//--- Assignment operator
  public : void operator = (const GGS_typeCalcul &) ;
//--- _isBuilt
  public : inline bool _isBuilt (void) const { return mPointer != NULL ; }
//--- isEqualTo
  public : inline bool isEqualTo (const GGS_typeCalcul & _inOperand) const {
    return mPointer == _inOperand.mPointer ;
  }
//--- getPtr
  public : inline cPtr_typeCalcul * getPtr (void) const {
    return mPointer ;
  }
//--- drop
  public : void _drop_operation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeCalcul * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeCalcul * operator () (LOCATION_ARGS) const {
      return mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeCalculSimple'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeCalculSimple : public GGS_typeCalcul {
//--- Default Constructor
  public : GGS_typeCalculSimple (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeCalculSimple constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_typeTableVariablesBool & argument_3,
                                const GGS_luint & argument_4 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeCalculSimple * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeCalculSimple * operator () (LOCATION_ARGS) const {
      return (cPtr_typeCalculSimple *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeUse_AND'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeUse_AND : public GGS_typeCalcul {
//--- Default Constructor
  public : GGS_typeUse_AND (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeUse_AND constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeUse_AND * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeUse_AND * operator () (LOCATION_ARGS) const {
      return (cPtr_typeUse_AND *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeUse_ITE'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeUse_ITE : public GGS_typeCalcul {
//--- Default Constructor
  public : GGS_typeUse_ITE (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeUse_ITE constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeUse_ITE * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeUse_ITE * operator () (LOCATION_ARGS) const {
      return (cPtr_typeUse_ITE *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeUse_AND_ITE'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeUse_AND_ITE : public GGS_typeCalcul {
//--- Default Constructor
  public : GGS_typeUse_AND_ITE (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeUse_AND_ITE constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeUse_AND_ITE * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeUse_AND_ITE * operator () (LOCATION_ARGS) const {
      return (cPtr_typeUse_AND_ITE *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeDimensionnerANDCache'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDimensionnerANDCache : public GGS_typeCalcul {
//--- Default Constructor
  public : GGS_typeDimensionnerANDCache (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeDimensionnerANDCache constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDimensionnerANDCache * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDimensionnerANDCache * operator () (LOCATION_ARGS) const {
      return (cPtr_typeDimensionnerANDCache *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeDimensionnerITECache'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDimensionnerITECache : public GGS_typeCalcul {
//--- Default Constructor
  public : GGS_typeDimensionnerITECache (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeDimensionnerITECache constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDimensionnerITECache * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDimensionnerITECache * operator () (LOCATION_ARGS) const {
      return (cPtr_typeDimensionnerITECache *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeDimensionnerTable'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDimensionnerTable : public GGS_typeCalcul {
//--- Default Constructor
  public : GGS_typeDimensionnerTable (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeDimensionnerTable constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDimensionnerTable * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDimensionnerTable * operator () (LOCATION_ARGS) const {
      return (cPtr_typeDimensionnerTable *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeAfficherBilan'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeAfficherBilan : public GGS_typeCalcul {
//--- Default Constructor
  public : GGS_typeAfficherBilan (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeAfficherBilan constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeAfficherBilan * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeAfficherBilan * operator () (LOCATION_ARGS) const {
      return (cPtr_typeAfficherBilan *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeCalculIteratif'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeCalculIteratif : public GGS_typeCalcul {
//--- Default Constructor
  public : GGS_typeCalculIteratif (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeCalculIteratif constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_typeTableVariablesBool & argument_3,
                                const GGS_lbool & argument_4,
                                const GGS_luint & argument_5 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeCalculIteratif * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeCalculIteratif * operator () (LOCATION_ARGS) const {
      return (cPtr_typeCalculIteratif *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         list '@typeListeCalculs'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeListeCalculs ;

class GGS_typeListeCalculs : public AC_galgas_list {
  public : typedef elementOf_GGS_typeListeCalculs element_type ;
//--- Default Constructor
  public : GGS_typeListeCalculs (void) ;
//--- Copy Constructor
  public : GGS_typeListeCalculs (const GGS_typeListeCalculs & inSource) ;
//--- Assignment Operator
//  public : void operator = (const GGS_typeListeCalculs & inSource) ;
//--- Constructor 'emptyList'
  public : static GGS_typeListeCalculs constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_typeListeCalculs constructor_listWithValue (C_Lexique & _inLexique,
                                const GGS_typeCalcul & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_typeListeCalculs * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Lexique & _inLexique,
                              GGS_typeCalcul & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Lexique & _inLexique,
                             GGS_typeCalcul & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Method 'popLast'
  public : void method_popLast (C_Lexique & _inLexique,
                                GGS_typeCalcul & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Method 'popFirst'
  public : void method_popFirst (C_Lexique & _inLexique,
                                 GGS_typeCalcul & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeCalcul & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_typeListeCalculs operator + (const GGS_typeListeCalculs & inOperand) const ;
  public : void method_prependValue (C_Lexique & _inLexique,
                                const GGS_typeCalcul & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_typeCalcul & argument_0) ;
  protected : void _internalPrependValues (const GGS_typeCalcul & argument_0) ;
//--- List Insulation
  protected : void _insulateList (void) ;
//--- Reader 'description
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
} ;

void routine_verifierNombreArgumentsBool (C_Lexique &,
                                const GGS_typeFormalArgumentsList  &,
                                const GGS_typeActualArgumentsList  &,
                                const GGS_location  & COMMA_LOCATION_ARGS) ;

void routine_buildFormalArgsList (C_Lexique &,
                                const GGS_typeVariableDescriptor  &,
                                GGS_typeFormalArgumentsList  &,
                                const GGS_location  & COMMA_LOCATION_ARGS) ;

void routine_buildActualArgsList (C_Lexique &,
                                const GGS_typeTableVariablesBool  &,
                                GGS_typeActualArgumentsList  &,
                                const GGS_location  & COMMA_LOCATION_ARGS) ;

void routine_getHighBound (C_Lexique &,
                                const GGS_luint  &,
                                GGS_luint  & COMMA_LOCATION_ARGS) ;

void routine_verifyBoundsAndComputeDimension (C_Lexique &,
                                const GGS_luint  &,
                                const GGS_luint  &,
                                GGS_luint  & COMMA_LOCATION_ARGS) ;

void routine_verifierDimensionValeurCorrecte (C_Lexique &,
                                GGS_luint  ,
                                GGS_luint   COMMA_LOCATION_ARGS) ;

void routine_verifierMemesDimensions (C_Lexique &,
                                GGS_luint  ,
                                GGS_luint   COMMA_LOCATION_ARGS) ;

void routine_verifierDimensionUn (C_Lexique &,
                                GGS_luint  ,
                                GGS_location   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

#include "include_typeDomain.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeDirectDomain'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeDirectDomain.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of map '@typeDomainMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeDomainMap {
  public : GGS_typeDomain  mDomain ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_typeDomainMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_typeDomainMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_typeDomainMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_typeDomainMap * nextObject (void) const { return (elementOf_GGS_typeDomainMap *) mNextItem ; }
  public : inline elementOf_GGS_typeDomainMap * infObject (void) const { return (elementOf_GGS_typeDomainMap *) mInfPtr ; }
  public : inline elementOf_GGS_typeDomainMap * supObject (void) const { return (elementOf_GGS_typeDomainMap *) mSupPtr ; }
//--- Data member
  public : e_typeDomainMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeRecordDomain'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeRecordDomain.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@typeFormalArgumentsList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeFormalArgumentsList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_luint  mVariableIndex ;
  public : GGS_luint  mVariableBitSize ;
  public : GGS_luint  mLowBound ;
  public : GGS_luint  mHighBound ;
//--- Constructor
  public : elementOf_GGS_typeFormalArgumentsList (const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ) ;

//--- Access to next
  public : inline elementOf_GGS_typeFormalArgumentsList * nextObject (void) const { return (elementOf_GGS_typeFormalArgumentsList *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_typeFormalArgumentsList * previousObject (void) const { return (elementOf_GGS_typeFormalArgumentsList *) internalPreviousItem () ; }
//--- Method used for description
  public : virtual void appendForListDescription (C_Lexique & _inLexique,
                                                  C_String & ioString,
                                                  const sint32 inIndentation
                                                  COMMA_LOCATION_ARGS) const ;
  friend class GGS_typeFormalArgumentsList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@typeActualArgumentsList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeActualArgumentsList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_luint  mVariableIndex ;
  public : GGS_luint  mVariableBitSize ;
  public : GGS_luint  mLowBound ;
  public : GGS_luint  mHighBound ;
  public : GGS_location  mErrorLocation ;
//--- Constructor
  public : elementOf_GGS_typeActualArgumentsList (const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_location & ) ;

//--- Access to next
  public : inline elementOf_GGS_typeActualArgumentsList * nextObject (void) const { return (elementOf_GGS_typeActualArgumentsList *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_typeActualArgumentsList * previousObject (void) const { return (elementOf_GGS_typeActualArgumentsList *) internalPreviousItem () ; }
//--- Method used for description
  public : virtual void appendForListDescription (C_Lexique & _inLexique,
                                                  C_String & ioString,
                                                  const sint32 inIndentation
                                                  COMMA_LOCATION_ARGS) const ;
  friend class GGS_typeActualArgumentsList ;
} ;

//---------------------------------------------------------------------------*

#include "include_typeVariableDescriptor.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeDirectVariable'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeDirectVariable.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of map '@typeTableVariablesBool'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeTableVariablesBool {
  public : GGS_typeVariableDescriptor  mVariableDescriptor ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableVariablesBool : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_typeTableVariablesBool (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_typeTableVariablesBool & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_typeTableVariablesBool * nextObject (void) const { return (elementOf_GGS_typeTableVariablesBool *) mNextItem ; }
  public : inline elementOf_GGS_typeTableVariablesBool * infObject (void) const { return (elementOf_GGS_typeTableVariablesBool *) mInfPtr ; }
  public : inline elementOf_GGS_typeTableVariablesBool * supObject (void) const { return (elementOf_GGS_typeTableVariablesBool *) mSupPtr ; }
//--- Data member
  public : e_typeTableVariablesBool mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeRecordVariable'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeRecordVariable.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of map '@typeTableFormules'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeTableFormules {
  public : GGS_typeFormalArgumentsList  aListeArgsFormelsBool ;
  public : GGS_bdd aBDD ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableFormules : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_typeTableFormules (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_typeTableFormules & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_typeTableFormules * nextObject (void) const { return (elementOf_GGS_typeTableFormules *) mNextItem ; }
  public : inline elementOf_GGS_typeTableFormules * infObject (void) const { return (elementOf_GGS_typeTableFormules *) mInfPtr ; }
  public : inline elementOf_GGS_typeTableFormules * supObject (void) const { return (elementOf_GGS_typeTableFormules *) mSupPtr ; }
//--- Data member
  public : e_typeTableFormules mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#include "include_typeFormule.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeFormuleTrue'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeFormuleTrue.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeFormuleFalse'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeFormuleFalse.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeFormuleVar'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeFormuleVar.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeFormuleFor'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeFormuleFor.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeFormuleNon'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeFormuleNon.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeFormuleEt'                            *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeFormuleEt.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeFormuleIte'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeFormuleIte.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeFormuleOu'                            *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeFormuleOu.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeFormuleImplique'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeFormuleImplique.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'typeComparaisonFormules'                       *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeComparaisonFormules.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeFormuleExist'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeFormuleExist.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   class 'typeFormuleComparaisonValeur'                    *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeFormuleComparaisonValeur.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'typeFormuleComparaisonVariable'                   *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeFormuleComparaisonVariable.h"

//---------------------------------------------------------------------------*

#include "include_typeCalcul.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeCalculSimple'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeCalculSimple.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'typeUse_AND'                             *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeUse_AND.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'typeUse_ITE'                             *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeUse_ITE.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeUse_AND_ITE'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeUse_AND_ITE.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'typeDimensionnerANDCache'                      *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeDimensionnerANDCache.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'typeDimensionnerITECache'                      *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeDimensionnerITECache.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'typeDimensionnerTable'                        *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeDimensionnerTable.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeAfficherBilan'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeAfficherBilan.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeCalculIteratif'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeCalculIteratif.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@typeListeCalculs'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeListeCalculs : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_typeCalcul  mCalcul ;
//--- Constructor
  public : elementOf_GGS_typeListeCalculs (const GGS_typeCalcul & ) ;

//--- Access to next
  public : inline elementOf_GGS_typeListeCalculs * nextObject (void) const { return (elementOf_GGS_typeListeCalculs *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_typeListeCalculs * previousObject (void) const { return (elementOf_GGS_typeListeCalculs *) internalPreviousItem () ; }
//--- Method used for description
  public : virtual void appendForListDescription (C_Lexique & _inLexique,
                                                  C_String & ioString,
                                                  const sint32 inIndentation
                                                  COMMA_LOCATION_ARGS) const ;
  friend class GGS_typeListeCalculs ;
} ;

//---------------------------------------------------------------------------*

#endif
