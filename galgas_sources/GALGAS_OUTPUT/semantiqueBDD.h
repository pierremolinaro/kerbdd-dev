//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'semantiqueBDD.h'                           *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                       june 5th, 2006, at 22h54'56"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef semantiqueBDD_DEFINED
#define semantiqueBDD_DEFINED

#include <string.h>

#include "galgas/C_GGS_Object.h"
#include "galgas/AC_galgas_io.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/C_Lexique.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

#include "C_galgas_bdd.h"
typedef C_galgas_bdd GGS_bdd ;
typedef C_galgas_bdd GGG_bdd ;
class GGS_typeDomain ;
class GGS_typeDirectDomain ;
class GGS_typeDomainMap ;
class GGS_typeRecordDomain ;
class GGS_typeFormalArgumentsList ;
class GGS_typeActualArgumentsList ;
class GGS_typeVariableDescriptor ;
class GGS_typeDirectVariable ;
class GGS_typeTableVariablesBool ;
class GGS_typeRecordVariable ;
class GGS_typeTableFormules ;
class GGS_typeFormule ;
class GGS_typeFormuleTrue ;
class GGS_typeFormuleFalse ;
class GGS_typeFormuleVar ;
class GGS_typeFormuleFor ;
class GGS_typeFormuleNon ;
class GGS_typeFormuleEt ;
class GGS_typeFormuleIte ;
class GGS_typeFormuleOu ;
class GGS_typeFormuleImplique ;
class GGS_typeComparaisonFormules ;
class GGS_typeFormuleExist ;
class GGS_typeFormuleComparaisonValeur ;
class GGS_typeFormuleComparaisonVariable ;
class GGS_typeCalcul ;
class GGS_typeCalculSimple ;
class GGS_typeUse_AND ;
class GGS_typeUse_ITE ;
class GGS_typeUse_AND_ITE ;
class GGS_typeDimensionnerANDCache ;
class GGS_typeDimensionnerITECache ;
class GGS_typeDimensionnerTable ;
class GGS_typeAfficherBilan ;
class GGS_typeCalculIteratif ;
class GGS_typeListeCalculs ;

class cPtr_typeDomain ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeDomain'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDomain {
  protected : cPtr_typeDomain * mPointer ;
  public : GGS_typeDomain (void) ;
  public : GGS_typeDomain (const GGS_typeDomain &) ;
  public : virtual ~GGS_typeDomain (void) ;
  public : void operator = (const GGS_typeDomain &) ;
  public : inline bool isBuilt (void) const { return mPointer != NULL ; }
  public : inline bool isEqualTo (const GGS_typeDomain & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_typeDomain * inSource) ;
  public : GGS_typeDomain (cPtr_typeDomain * inSource) ;
  public : inline cPtr_typeDomain * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDomain * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDomain * operator () (LOCATION_ARGS) const { return mPointer ; }
  #endif
  public : GGS_string reader_messageDomainType (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           Map '@typeDomainMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeDomainMap ;

class GGS_typeDomainMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_typeDomainMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeDomainMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeDomainMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_typeDomainMap constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_typeDomain &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_typeDomain   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  const GGS_typeDomain & inParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_typeDomain & outParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  public : static GGS_typeDomainMap constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_typeDomainMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_typeDomainMap reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@typeFormalArgumentsList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeFormalArgumentsList ;

class GGS_typeFormalArgumentsList {
  public : typedef elementOf_GGS_typeFormalArgumentsList element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * mRoot ;
//--- Default Constructor
  public : GGS_typeFormalArgumentsList (void) ;
//--- Copy Constructor
  public : GGS_typeFormalArgumentsList (const GGS_typeFormalArgumentsList & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_typeFormalArgumentsList & inSource) ;
//--- Destructor
  public : ~GGS_typeFormalArgumentsList (void) ;

//--- Constructor 'emptyList'
  public : static GGS_typeFormalArgumentsList constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3) ;
//--- Internal Methods
  protected : void internalAppendItem (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3) ;
  protected : void insulateList (void) ;
//--- 'isBuilt' method
  public : inline bool isBuilt (void) const {
    return mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@typeActualArgumentsList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeActualArgumentsList ;

class GGS_typeActualArgumentsList {
  public : typedef elementOf_GGS_typeActualArgumentsList element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * mRoot ;
//--- Default Constructor
  public : GGS_typeActualArgumentsList (void) ;
//--- Copy Constructor
  public : GGS_typeActualArgumentsList (const GGS_typeActualArgumentsList & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_typeActualArgumentsList & inSource) ;
//--- Destructor
  public : ~GGS_typeActualArgumentsList (void) ;

//--- Constructor 'emptyList'
  public : static GGS_typeActualArgumentsList constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_location & argument_4) ;
//--- Internal Methods
  protected : void internalAppendItem (const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_location & argument_4) ;
  protected : void insulateList (void) ;
//--- 'isBuilt' method
  public : inline bool isBuilt (void) const {
    return mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

class cPtr_typeVariableDescriptor ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeVariableDescriptor'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeVariableDescriptor {
  protected : cPtr_typeVariableDescriptor * mPointer ;
  public : GGS_typeVariableDescriptor (void) ;
  public : GGS_typeVariableDescriptor (const GGS_typeVariableDescriptor &) ;
  public : virtual ~GGS_typeVariableDescriptor (void) ;
  public : void operator = (const GGS_typeVariableDescriptor &) ;
  public : inline bool isBuilt (void) const { return mPointer != NULL ; }
  public : inline bool isEqualTo (const GGS_typeVariableDescriptor & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_typeVariableDescriptor * inSource) ;
  public : GGS_typeVariableDescriptor (cPtr_typeVariableDescriptor * inSource) ;
  public : inline cPtr_typeVariableDescriptor * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeVariableDescriptor * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeVariableDescriptor * operator () (LOCATION_ARGS) const { return mPointer ; }
  #endif
  public : GGS_string reader_variableDescriptorErrorMessage (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Map '@typeTableVariablesBool'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableVariablesBool ;

class GGS_typeTableVariablesBool : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_typeTableVariablesBool element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeTableVariablesBool * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeTableVariablesBool * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_typeTableVariablesBool constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_typeVariableDescriptor &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_typeVariableDescriptor   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  const GGS_typeVariableDescriptor & inParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_typeVariableDescriptor & outParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  public : static GGS_typeTableVariablesBool constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_typeTableVariablesBool & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_typeTableVariablesBool reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         Map '@typeTableFormules'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableFormules ;

class GGS_typeTableFormules : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_typeTableFormules element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeTableFormules * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeTableFormules * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_typeTableFormules constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_typeFormalArgumentsList &  inParameter0,
                                const GGS_bdd&  inParameter1 COMMA_LOCATION_ARGS) ;
//--- 'insertKeyGetIndex' Insert Method
  public : void method_insertKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_typeFormalArgumentsList &  inParameter0,
                                const GGS_bdd&  inParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_typeFormalArgumentsList   & outParameter0,
                                GGS_bdd  & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- 'searchKeyGetIndex' Search Method
  public : void method_searchKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_typeFormalArgumentsList   & outParameter0,
                                GGS_bdd  & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  const GGS_typeFormalArgumentsList & inParameter0,
                                  const GGS_bdd& inParameter1,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_typeFormalArgumentsList & outParameter0,
                                  GGS_bdd& outParameter1,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  public : static GGS_typeTableFormules constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_typeTableFormules & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_typeTableFormules reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

class cPtr_typeFormule ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeFormule'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormule {
  protected : cPtr_typeFormule * mPointer ;
  public : GGS_typeFormule (void) ;
  public : GGS_typeFormule (const GGS_typeFormule &) ;
  public : virtual ~GGS_typeFormule (void) ;
  public : void operator = (const GGS_typeFormule &) ;
  public : inline bool isBuilt (void) const { return mPointer != NULL ; }
  public : inline bool isEqualTo (const GGS_typeFormule & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_typeFormule * inSource) ;
  public : GGS_typeFormule (cPtr_typeFormule * inSource) ;
  public : inline cPtr_typeFormule * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeFormule * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeFormule * operator () (LOCATION_ARGS) const { return mPointer ; }
  #endif
} ;

class cPtr_typeCalcul ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeCalcul'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeCalcul {
  protected : cPtr_typeCalcul * mPointer ;
  public : GGS_typeCalcul (void) ;
  public : GGS_typeCalcul (const GGS_typeCalcul &) ;
  public : virtual ~GGS_typeCalcul (void) ;
  public : void operator = (const GGS_typeCalcul &) ;
  public : inline bool isBuilt (void) const { return mPointer != NULL ; }
  public : inline bool isEqualTo (const GGS_typeCalcul & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_typeCalcul * inSource) ;
  public : GGS_typeCalcul (cPtr_typeCalcul * inSource) ;
  public : inline cPtr_typeCalcul * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeCalcul * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeCalcul * operator () (LOCATION_ARGS) const { return mPointer ; }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         list '@typeListeCalculs'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeListeCalculs ;

class GGS_typeListeCalculs {
  public : typedef elementOf_GGS_typeListeCalculs element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * mRoot ;
//--- Default Constructor
  public : GGS_typeListeCalculs (void) ;
//--- Copy Constructor
  public : GGS_typeListeCalculs (const GGS_typeListeCalculs & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_typeListeCalculs & inSource) ;
//--- Destructor
  public : ~GGS_typeListeCalculs (void) ;

//--- Constructor 'emptyList'
  public : static GGS_typeListeCalculs constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_typeCalcul & argument_0) ;
//--- Internal Methods
  protected : void internalAppendItem (const GGS_typeCalcul & argument_0) ;
  protected : void insulateList (void) ;
//--- 'isBuilt' method
  public : inline bool isBuilt (void) const {
    return mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

void routine_verifierNombreArgumentsBool (C_Lexique &,
                                const GGS_typeFormalArgumentsList  &,
                                const GGS_typeActualArgumentsList  &,
                                const GGS_location  & COMMA_LOCATION_ARGS) ;

void routine_buildFormalArgsList (C_Lexique &,
                                const GGS_typeVariableDescriptor  &,
                                GGS_typeFormalArgumentsList  &,
                                const GGS_location  & COMMA_LOCATION_ARGS) ;

void routine_buildActualArgsList (C_Lexique &,
                                const GGS_typeTableVariablesBool  &,
                                GGS_typeActualArgumentsList  &,
                                const GGS_location  & COMMA_LOCATION_ARGS) ;

void routine_getHighBound (C_Lexique &,
                                const GGS_luint  &,
                                GGS_luint  & COMMA_LOCATION_ARGS) ;

void routine_verifyBoundsAndComputeDimension (C_Lexique &,
                                const GGS_luint  &,
                                const GGS_luint  &,
                                GGS_luint  & COMMA_LOCATION_ARGS) ;

void routine_verifierDimensionValeurCorrecte (C_Lexique &,
                                GGS_luint  ,
                                GGS_luint   COMMA_LOCATION_ARGS) ;

void routine_verifierMemesDimensions (C_Lexique &,
                                GGS_luint  ,
                                GGS_luint   COMMA_LOCATION_ARGS) ;

void routine_verifierDimensionUn (C_Lexique &,
                                GGS_luint  ,
                                GGS_location   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*


#include "include_typeDomain.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeDirectDomain'                          *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeDirectDomain.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeDirectDomain'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDirectDomain {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeDirectDomain * constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeDirectDomain * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2 COMMA_LOCATION_ARGS) {
      return new cPtr_typeDirectDomain(argument_0,
                                argument_1,
                                argument_2 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of map '@typeDomainMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeDomainMap {
  public : GGS_typeDomain  mDomain ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_typeDomainMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_typeDomainMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_typeDomainMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_typeDomainMap * nextObject (void) const { return (elementOf_GGS_typeDomainMap *) mNextItem ; }
  public : inline elementOf_GGS_typeDomainMap * infObject (void) const { return (elementOf_GGS_typeDomainMap *) mInfPtr ; }
  public : inline elementOf_GGS_typeDomainMap * supObject (void) const { return (elementOf_GGS_typeDomainMap *) mSupPtr ; }
//--- Data member
  public : e_typeDomainMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeRecordDomain'                          *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeRecordDomain.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeRecordDomain'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeRecordDomain {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeRecordDomain * constructor_new (C_Lexique & inLexique,
                                const GGS_typeDomainMap & argument_0 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeRecordDomain * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_typeDomainMap & argument_0 COMMA_LOCATION_ARGS) {
      return new cPtr_typeRecordDomain(argument_0 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@typeFormalArgumentsList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeFormalArgumentsList {
  private : elementOf_GGS_typeFormalArgumentsList * mNextItem ;
    public : GGS_luint  mVariableIndex ;
    public : GGS_luint  mVariableBitSize ;
    public : GGS_luint  mLowBound ;
    public : GGS_luint  mHighBound ;
  public : elementOf_GGS_typeFormalArgumentsList (const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ) ;

  public : inline elementOf_GGS_typeFormalArgumentsList * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_typeFormalArgumentsList (const elementOf_GGS_typeFormalArgumentsList &) ;
  private : void operator = (const elementOf_GGS_typeFormalArgumentsList &) ;
  public : inline ~elementOf_GGS_typeFormalArgumentsList (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
  friend class GGS_typeFormalArgumentsList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@typeActualArgumentsList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeActualArgumentsList {
  private : elementOf_GGS_typeActualArgumentsList * mNextItem ;
    public : GGS_luint  mVariableIndex ;
    public : GGS_luint  mVariableBitSize ;
    public : GGS_luint  mLowBound ;
    public : GGS_luint  mHighBound ;
    public : GGS_location  mErrorLocation ;
  public : elementOf_GGS_typeActualArgumentsList (const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_luint & ,
                                const GGS_location & ) ;

  public : inline elementOf_GGS_typeActualArgumentsList * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_typeActualArgumentsList (const elementOf_GGS_typeActualArgumentsList &) ;
  private : void operator = (const elementOf_GGS_typeActualArgumentsList &) ;
  public : inline ~elementOf_GGS_typeActualArgumentsList (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
  friend class GGS_typeActualArgumentsList ;
} ;

//---------------------------------------------------------------------------*


#include "include_typeVariableDescriptor.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeDirectVariable'                         *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeDirectVariable.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeDirectVariable'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDirectVariable {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeDirectVariable * constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeDirectVariable * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3 COMMA_LOCATION_ARGS) {
      return new cPtr_typeDirectVariable(argument_0,
                                argument_1,
                                argument_2,
                                argument_3 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of map '@typeTableVariablesBool'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeTableVariablesBool {
  public : GGS_typeVariableDescriptor  mVariableDescriptor ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableVariablesBool : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_typeTableVariablesBool (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_typeTableVariablesBool & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_typeTableVariablesBool * nextObject (void) const { return (elementOf_GGS_typeTableVariablesBool *) mNextItem ; }
  public : inline elementOf_GGS_typeTableVariablesBool * infObject (void) const { return (elementOf_GGS_typeTableVariablesBool *) mInfPtr ; }
  public : inline elementOf_GGS_typeTableVariablesBool * supObject (void) const { return (elementOf_GGS_typeTableVariablesBool *) mSupPtr ; }
//--- Data member
  public : e_typeTableVariablesBool mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeRecordVariable'                         *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeRecordVariable.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeRecordVariable'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeRecordVariable {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeRecordVariable * constructor_new (C_Lexique & inLexique,
                                const GGS_typeTableVariablesBool & argument_0 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeRecordVariable * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_typeTableVariablesBool & argument_0 COMMA_LOCATION_ARGS) {
      return new cPtr_typeRecordVariable(argument_0 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of map '@typeTableFormules'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeTableFormules {
  public : GGS_typeFormalArgumentsList  aListeArgsFormelsBool ;
  public : GGS_bdd aBDD ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableFormules : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_typeTableFormules (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_typeTableFormules & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_typeTableFormules * nextObject (void) const { return (elementOf_GGS_typeTableFormules *) mNextItem ; }
  public : inline elementOf_GGS_typeTableFormules * infObject (void) const { return (elementOf_GGS_typeTableFormules *) mInfPtr ; }
  public : inline elementOf_GGS_typeTableFormules * supObject (void) const { return (elementOf_GGS_typeTableFormules *) mSupPtr ; }
//--- Data member
  public : e_typeTableFormules mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*


#include "include_typeFormule.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeFormuleTrue'                           *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeFormuleTrue.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeFormuleTrue'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleTrue {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeFormuleTrue * constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeFormuleTrue * constructor_new (C_Lexique & /* inLexique */ COMMA_LOCATION_ARGS) {
      return new cPtr_typeFormuleTrue(THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeFormuleFalse'                          *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeFormuleFalse.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeFormuleFalse'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleFalse {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeFormuleFalse * constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeFormuleFalse * constructor_new (C_Lexique & /* inLexique */ COMMA_LOCATION_ARGS) {
      return new cPtr_typeFormuleFalse(THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeFormuleVar'                           *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeFormuleVar.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeFormuleVar'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleVar {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeFormuleVar * constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeFormuleVar * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2 COMMA_LOCATION_ARGS) {
      return new cPtr_typeFormuleVar(argument_0,
                                argument_1,
                                argument_2 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeFormuleFor'                           *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeFormuleFor.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeFormuleFor'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleFor {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeFormuleFor * constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_typeActualArgumentsList & argument_1,
                                const GGS_bdd& argument_2,
                                const GGS_lbool & argument_3 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeFormuleFor * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_luint & argument_0,
                                const GGS_typeActualArgumentsList & argument_1,
                                const GGS_bdd& argument_2,
                                const GGS_lbool & argument_3 COMMA_LOCATION_ARGS) {
      return new cPtr_typeFormuleFor(argument_0,
                                argument_1,
                                argument_2,
                                argument_3 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeFormuleNon'                           *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeFormuleNon.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeFormuleNon'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleNon {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeFormuleNon * constructor_new (C_Lexique & inLexique,
                                const GGS_typeFormule & argument_0 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeFormuleNon * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_typeFormule & argument_0 COMMA_LOCATION_ARGS) {
      return new cPtr_typeFormuleNon(argument_0 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeFormuleEt'                            *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeFormuleEt.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_typeFormuleEt'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleEt {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeFormuleEt * constructor_new (C_Lexique & inLexique,
                                const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeFormuleEt * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_typeFormuleEt(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeFormuleIte'                           *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeFormuleIte.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeFormuleIte'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleIte {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeFormuleIte * constructor_new (C_Lexique & inLexique,
                                const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_typeFormule & argument_2 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeFormuleIte * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_typeFormule & argument_2 COMMA_LOCATION_ARGS) {
      return new cPtr_typeFormuleIte(argument_0,
                                argument_1,
                                argument_2 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeFormuleOu'                            *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeFormuleOu.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_typeFormuleOu'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleOu {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeFormuleOu * constructor_new (C_Lexique & inLexique,
                                const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeFormuleOu * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_typeFormuleOu(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeFormuleImplique'                         *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeFormuleImplique.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeFormuleImplique'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleImplique {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeFormuleImplique * constructor_new (C_Lexique & inLexique,
                                const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeFormuleImplique * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_typeFormule & argument_0,
                                const GGS_typeFormule & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_typeFormuleImplique(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'typeComparaisonFormules'                       *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeComparaisonFormules.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeComparaisonFormules'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeComparaisonFormules {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeComparaisonFormules * constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_typeFormule & argument_2 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeComparaisonFormules * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_luint & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_typeFormule & argument_2 COMMA_LOCATION_ARGS) {
      return new cPtr_typeComparaisonFormules(argument_0,
                                argument_1,
                                argument_2 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeFormuleExist'                          *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeFormuleExist.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeFormuleExist'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleExist {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeFormuleExist * constructor_new (C_Lexique & inLexique,
                                const GGS_typeFormalArgumentsList & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_bdd& argument_2 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeFormuleExist * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_typeFormalArgumentsList & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_bdd& argument_2 COMMA_LOCATION_ARGS) {
      return new cPtr_typeFormuleExist(argument_0,
                                argument_1,
                                argument_2 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   class 'typeFormuleComparaisonValeur'                    *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeFormuleComparaisonValeur.h"

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_typeFormuleComparaisonValeur'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleComparaisonValeur {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeFormuleComparaisonValeur * constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_luint & argument_4,
                                const GGS_luint & argument_5 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeFormuleComparaisonValeur * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_luint & argument_4,
                                const GGS_luint & argument_5 COMMA_LOCATION_ARGS) {
      return new cPtr_typeFormuleComparaisonValeur(argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'typeFormuleComparaisonVariable'                   *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeFormuleComparaisonVariable.h"

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_typeFormuleComparaisonVariable'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFormuleComparaisonVariable {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeFormuleComparaisonVariable * constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_luint & argument_4,
                                const GGS_luint & argument_5,
                                const GGS_luint & argument_6,
                                const GGS_luint & argument_7 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeFormuleComparaisonVariable * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_luint & argument_0,
                                const GGS_luint & argument_1,
                                const GGS_luint & argument_2,
                                const GGS_luint & argument_3,
                                const GGS_luint & argument_4,
                                const GGS_luint & argument_5,
                                const GGS_luint & argument_6,
                                const GGS_luint & argument_7 COMMA_LOCATION_ARGS) {
      return new cPtr_typeFormuleComparaisonVariable(argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6,
                                argument_7 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*


#include "include_typeCalcul.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeCalculSimple'                          *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeCalculSimple.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeCalculSimple'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeCalculSimple {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeCalculSimple * constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_typeTableVariablesBool & argument_3,
                                const GGS_luint & argument_4 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeCalculSimple * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_luint & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_typeTableVariablesBool & argument_3,
                                const GGS_luint & argument_4 COMMA_LOCATION_ARGS) {
      return new cPtr_typeCalculSimple(argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'typeUse_AND'                             *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeUse_AND.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeUse_AND'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeUse_AND {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeUse_AND * constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeUse_AND * constructor_new (C_Lexique & /* inLexique */ COMMA_LOCATION_ARGS) {
      return new cPtr_typeUse_AND(THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'typeUse_ITE'                             *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeUse_ITE.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeUse_ITE'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeUse_ITE {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeUse_ITE * constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeUse_ITE * constructor_new (C_Lexique & /* inLexique */ COMMA_LOCATION_ARGS) {
      return new cPtr_typeUse_ITE(THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeUse_AND_ITE'                           *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeUse_AND_ITE.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeUse_AND_ITE'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeUse_AND_ITE {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeUse_AND_ITE * constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeUse_AND_ITE * constructor_new (C_Lexique & /* inLexique */ COMMA_LOCATION_ARGS) {
      return new cPtr_typeUse_AND_ITE(THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'typeDimensionnerANDCache'                      *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeDimensionnerANDCache.h"

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeDimensionnerANDCache'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDimensionnerANDCache {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeDimensionnerANDCache * constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeDimensionnerANDCache * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_luint & argument_0 COMMA_LOCATION_ARGS) {
      return new cPtr_typeDimensionnerANDCache(argument_0 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'typeDimensionnerITECache'                      *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeDimensionnerITECache.h"

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeDimensionnerITECache'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDimensionnerITECache {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeDimensionnerITECache * constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeDimensionnerITECache * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_luint & argument_0 COMMA_LOCATION_ARGS) {
      return new cPtr_typeDimensionnerITECache(argument_0 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'typeDimensionnerTable'                        *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeDimensionnerTable.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeDimensionnerTable'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDimensionnerTable {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeDimensionnerTable * constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeDimensionnerTable * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_luint & argument_0 COMMA_LOCATION_ARGS) {
      return new cPtr_typeDimensionnerTable(argument_0 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeAfficherBilan'                          *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeAfficherBilan.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeAfficherBilan'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeAfficherBilan {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeAfficherBilan * constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeAfficherBilan * constructor_new (C_Lexique & /* inLexique */ COMMA_LOCATION_ARGS) {
      return new cPtr_typeAfficherBilan(THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeCalculIteratif'                         *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeCalculIteratif.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeCalculIteratif'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeCalculIteratif {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeCalculIteratif * constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_typeTableVariablesBool & argument_3,
                                const GGS_lbool & argument_4,
                                const GGS_luint & argument_5 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeCalculIteratif * constructor_new (C_Lexique & /* inLexique */,
                                const GGS_luint & argument_0,
                                const GGS_typeFormule & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_typeTableVariablesBool & argument_3,
                                const GGS_lbool & argument_4,
                                const GGS_luint & argument_5 COMMA_LOCATION_ARGS) {
      return new cPtr_typeCalculIteratif(argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@typeListeCalculs'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeListeCalculs {
  private : elementOf_GGS_typeListeCalculs * mNextItem ;
    public : GGS_typeCalcul  mCalcul ;
  public : elementOf_GGS_typeListeCalculs (const GGS_typeCalcul & ) ;

  public : inline elementOf_GGS_typeListeCalculs * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_typeListeCalculs (const elementOf_GGS_typeListeCalculs &) ;
  private : void operator = (const elementOf_GGS_typeListeCalculs &) ;
  public : inline ~elementOf_GGS_typeListeCalculs (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
  friend class GGS_typeListeCalculs ;
} ;

//---------------------------------------------------------------------------*

#endif
