$--------------------------------------------------------------*
$                                                              *
$    Vérification de la propriété LL (1) sur une grammaire     *
$                                                              *
$  Cette grammaire présente un non terminal <inutile> inutile  *
$                                                              *
$--------------------------------------------------------------*

$--- Productions vides
#ProductionVide [nt:4] := {nt=1} | {nt=3} | {nt=5} | {nt=7} ;

$--- Codage des productions de la forme <ntg> = "t" <ntd> :
#Acces1 [ntg:4, t:4, ntd:4] := 
	({ntg=1} & {t=0} & {ntd=9}) | $ <suiteTerme> = "+" <suiteTerme1>
	({ntg=1} & {t=1} & {ntd=9}) | $ <suiteTerme> = "-" <suiteTerme1>
	({ntg=3} & {t=2} & {ntd=8}) | $ <suiteFacteur> = "*" <suiteFacteur1>
	({ntg=3} & {t=3} & {ntd=8}) | $ <suiteFacteur> = "/" <suiteFacteur1>
	({ntg=5} & {t=1} & {ntd=7}) | $ <opUnaire> = "-" <productionVide>
	({ntg=5} & {t=0} & {ntd=7}) | $ <opUnaire> = "+" <productionVide>
	({ntg=6} & {t=6} & {ntd=7}) | $ <primaire> = "id" <productionVide>
	({ntg=6} & {t=7} & {ntd=7}) | $ <primaire> = "cst" <productionVide>
	({ntg=6} & {t=4} & {ntd=10}) | $ <primaire> = "(" <suitePrimaire1>
	({ntg=11} & {t=5} & {ntd=7}) ; $ <suitePrimaire2> = ")" <productionVide>

$--- Codage des productions de la forme <ntg> = <nt1> <nt2> :
#Acces2 [ntg:4, nt1:4, nt2:4] := 
({ntg=0} & {nt1=2} & {nt2=1}) | $ <expression> = <terme> <suiteTerme>
({ntg=9} & {nt1=2} & {nt2=1}) | $ <suiteTerme1> = <terme> <suiteTerme>
({ntg=2} & {nt1=4} & {nt2=3}) | $ <terme> = <facteur> <suiteFacteur>
({ntg=8} & {nt1=4} & {nt2=3}) | $ <suiteFacteur1> = <facteur> <suiteFacteur>
({ntg=4} & {nt1=5} & {nt2=6}) | $ <facteur> = <opUnaire> <primaire>
({ntg=10} & {nt1=0} & {nt2=11}) | $ <suitePrimaire1> = <expression> <suitePrimaire2>
({ntg=12} & {nt1=0} & {nt2=11}) ; $ <inutile> = <expression> <suitePrimaire2>

$--- Axiome de la grammaire
#Axiome [nt:4] := {nt=0} ;

$--- Calcul de l'ensemble des terminaux utiles
display ;
#Utile [nt:4] += #Axiome [nt] |
	?ntg:4,t:4 (
		#Utile [ntg] & (
			#Acces1 [ntg, t, nt] | 
			?nt2:4 (#Acces2 [ntg, nt, nt2] | #Acces2 [ntg, nt2, nt])
		)
	) ;
~ display ;

$--- Recherche des terminaux inutiles
display ;
#Inutile [nt:4] := {nt <= 12} & ~ #Utile [nt] ;
~ display ;

$--- Ensemble des non-terminaux pouvant engendrer le vide
display ;
#Vide [nt:4] -= #ProductionVide [nt] &
              !ntg:4,nt2:4 (#Acces2 [ntg, nt, nt2] -> #Vide [nt2]) ;
~ display ;

$--- Calcul de l'ensemble des premiers
display ;
#Premiers [nt:4, t:4] += 
	(#ProductionVide [nt] & {t=8}) |
	?ntd:4 #Acces1 [nt, t, ntd] |
	?nt1:4, nt2:4 (#Acces2 [nt, nt1, nt2] & #Premiers [nt1, t]) |
	?nt1:4, nt2:4 (#Acces2 [nt, nt1, nt2] & #ProductionVide [nt1]
	                                     & #Premiers [nt2, t]) ;


$--- Calcul et affichage des non-terminaux dont le premier est vide
display ;
#ErreurPremiers [nt:4] := {nt <= 12} & ~ ?t:4 #Premiers [nt, t] ;
~ display ;

$--- Calcul des suivants
#Suivants [nt:4,t:4] +=
  (#Axiome [nt] & {t=8}) |
  ?t1:4, ntg:4 (#Acces1 [ntg, t1, nt] & #Suivants [ntg, t]) |
  ?ntg:4, nt1:4 (#Acces2 [ntg, nt1, nt] & #Suivants [ntg, t]) |
  ?ntg:4, nt2:4 (#Acces2 [ntg, nt, nt2] & #Premiers [nt2, t]) |
  ?ntg:4, nt2:4 (#Acces2 [ntg, nt, nt2] & #ProductionVide [nt2] &
                 #Suivants [ntg, t]) ;

$--- Calcul et affichage des non-terminaux dont le suivant est vide
display ;
#ErreurSuivants [nt:4] := {nt <= 12} & ~ ?t:4 #Suivants [nt, t] ;
~ display ;

$------------------------------ TestLL1 ------------------------

$--- Conflit entre une production vide et une production de type 1
#Conflit1 [nt:4, t:4] :=
    ?ntd:4 (#ProductionVide [nt] & #Acces1 [nt, t, ntd] & #Suivants [nt, t]) ;

$--- Conflit entre une production vide et une production de type 2
#Conflit2 [nt:4, t:4] :=
    ?nt1:4, ntd:4 (#ProductionVide [nt] & #Acces2 [nt, nt1, ntd]
                   & #Premiers [nt1, t] & #Suivants [nt, t]) ;

$--- Conflit entre deux productions de type 1
#Conflit3 [nt:4, t:4] :=
    ?nt1:4, nt2:4 (#Acces1 [nt, t, nt1] & #Acces1 [nt, t, nt2] & {nt1 <> nt2}) ;

$--- Conflit entre une production de type 1 et une production de type 2
#Conflit4 [nt:4, t:4] :=
  ?nt1:4, nt2:4, nt3:4 (#Acces1 [nt, t, nt1] & #Acces2 [nt, nt2, nt3] &
       (#Premiers [nt2, t] | (#ProductionVide [nt2] & #Suivants [nt2, t]))) ;

$--- Conflit entre deux productions de type 2
#Conflit5 [nt:4, t:4] :=
  ?nt1:4, nt2:4, nt3:4, nt4:4 (#Acces2 [nt, nt1, nt2] & 
        #Acces2 [nt, nt3, nt4] & {nt1 <> nt3} &
       (#Premiers [nt1, t] | (#ProductionVide [nt1] & #Suivants [nt1, t])) &
       (#Premiers [nt3, t] | (#ProductionVide [nt3] & #Suivants [nt3, t]))) ;

end
