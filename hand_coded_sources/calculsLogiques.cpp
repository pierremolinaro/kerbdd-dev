//----------------------------------------------------------------------------*#include "programmeBDD.h"#include "generic_arraies/TC_unique_dyn_array.h"#include "time/C_timer.h"#include "bdd/C_display_bdd.h"//----------------------------------------------------------------------------*#ifdef SUN_UNIX  #include <time.h>#endif//----------------------------------------------------------------------------*#include <limits.h>//----------------------------------------------------------------------------*void programmeBDD::beforeParsing_ (void) {  aTableFormules = GGS_typeTableFormules::constructor_empty () ;  aListeFormules = GGS_typeListeCalculs::constructor_empty () ;  mDomainMap = GGS_typeDomainMap::constructor_empty () ;}//----------------------------------------------------------------------------*void programmeBDD::afterParsing_ (void) {//--- Tableau des valeurs des formules  TC_unique_dyn_array <C_bdd> tabValeurFormules (aListeFormules.getCount () COMMA_HERE) ;//--- Boucler sur les formules à calculer  GGS_typeListeCalculs::element_type * courant = aListeFormules.getFirstItem () ;  while (courant != NULL) {    macroValidPointer (courant) ;    cPtr_typeCalcul * calcul = courant->aCalcul () ;  //--- Effectuer le calcul   calcul->executerCalcul (tabValeurFormules) ;   courant = courant->getNextItem () ; }//-- Bilan des opérations sur le BDD//  C_bdd::printBDDpackageOperationsSummary (stdout) ;}//----------------------------------------------------------------------------*void cPtr_typeAfficherBilan::executerCalcul (TC_unique_dyn_array <C_bdd> & /*tabValeurFormules */) {  C_bdd::printBDDpackageOperationsSummary (stdout) ;}//----------------------------------------------------------------------------*void cPtr_typeDimensionnerTable::executerCalcul (TC_unique_dyn_array <C_bdd> & /*tabValeurFormules */) {  C_timer duree ;  C_bdd::changeHashMapSize ((unsigned short) aDimensionTable.getValue ()) ;  duree.stopTimer () ;  printf ("table %lu  : redimensionnement de la table des éléments BDD à %lu entrées (duree ",          aDimensionTable.getValue (), C_bdd::getHashMapEntriesCount ()) ;  duree.printTimer (stdout) ;  printf (")\n") ;  }//----------------------------------------------------------------------------*void cPtr_typeDimensionnerCache::executerCalcul (TC_unique_dyn_array <C_bdd> & /*tabValeurFormules */) {  C_timer duree ;  C_bdd::changeITEcacheSize ((unsigned short) (aDimensionCache.getValue () << 10)) ;  duree.stopTimer () ;  printf ("cache %lu  : redimensionnement du cache ITE à %lu entrées (duree ",          aDimensionCache.getValue (), C_bdd::getITEcacheEntriesCount ()) ;  duree.printTimer (stdout) ;  printf (")\n") ;  }//----------------------------------------------------------------------------*static void construireTableauDesNoms (GGS_typeTableVariablesBool & tableDesVariablesBooleennes,                                      C_display_bdd & tableauDesNomsVariablesBooleennes) {//--- Compute variables count  long BDDvariablesCount = 0 ;  GGS_typeTableVariablesBool::element_type * pb = tableDesVariablesBooleennes.getFirstItem () ;  while (pb != NULL) {    macroValidPointer (pb) ;    BDDvariablesCount += pb->mInfo.mVariableDescriptor ()->getBDDvariablesCount () ;    pb = pb->getNextItem () ;  }  tableauDesNomsVariablesBooleennes.allouer ((unsigned short) BDDvariablesCount) ;  pb = tableDesVariablesBooleennes.getFirstItem () ;  unsigned long index = 0 ;  while (pb != NULL) {    macroValidPointer (pb) ;    pb->mInfo.mVariableDescriptor ()->defineBDDvariableNames (tableauDesNomsVariablesBooleennes,                                                                  pb->mKey, index) ;    pb = pb->getNextItem () ;  }}//----------------------------------------------------------------------------*static C_bdd evaluerContraintesIntervalles (GGS_typeTableVariablesBool & tableVariablesBool) {  C_bdd contrainte ; contrainte.setToTrue () ;  GGS_typeTableVariablesBool::element_type * ptr = tableVariablesBool.getFirstItem () ;  while (ptr != NULL) {    macroValidPointer (ptr) ;    ptr->mInfo.mVariableDescriptor ()->computeBoundsConstraint (contrainte) ;    ptr = ptr->getNextItem () ;  }  return contrainte ;}//----------------------------------------------------------------------------*void cPtr_typeCalculSimple::executerCalcul (TC_unique_dyn_array <C_bdd> & tabValeurFormules) {  C_timer duree ;// §  C_bdd::markAndSweepUnusedNodes () ;  const long numeroFormule = (long) aNumeroFormule.getValue () ;//--- Effectuer les éventuels changements de variable  aFormule()->executerLesChangementsDeVariable (tabValeurFormules, numeroFormule) ;//--- Évaluer les contraintes d'intervalle des variables  const C_bdd contrainte = evaluerContraintesIntervalles (aTableVariablesBool) ;//--- Évaluation  const C_bdd resultat = contrainte & aFormule ()->evaluerFormule (tabValeurFormules (numeroFormule COMMA_HERE)) ;  tabValeurFormules (numeroFormule COMMA_HERE) = resultat ;  duree.stopTimer () ;  if (aTableVariablesBool.mBDDbitsCount == 0) {    printf ("Prédicat '%s', durée : ", aNomFormule.getStringPtr ()) ;    duree.printTimer (stdout) ;    printf (" (%s)\n", resultat.isFalse () ? "faux" : "vrai") ;  }else{  //--- Imprimer le résultat    printf ("Formule '%s', durée : ", aNomFormule.getStringPtr ()) ;    duree.printTimer (stdout) ;    const unsigned long long nValeurs = resultat.getBDDvaluesCount (aTableVariablesBool.mBDDbitsCount) ;    const unsigned long nElements = resultat.getBDDnodesCount () ;    printf (" (%llu valeur%s, %lu élément%s)\n", nValeurs,            (nValeurs < 2) ? "" : "s", nElements, (nElements < 2) ? "" : "s") ;  //--- Imprimer la composition du résultat    C_display_bdd tableauDesNomsVariablesBooleennes (0) ;    const unsigned long affichage = aAfficher.getValue () ;    if (affichage > 0) { //--- Construire le tableau des noms      construireTableauDesNoms (aTableVariablesBool, tableauDesNomsVariablesBooleennes) ;    }  //--- Imprimer la composition du résultat ?    if (affichage > 0) {       resultat.printBDD (stdout, aTableVariablesBool.mBDDbitsCount, tableauDesNomsVariablesBooleennes) ;    }  //--- Écrire la composition du BDD ?    if (affichage > 1) {       resultat.printBDDnodes (stdout, tableauDesNomsVariablesBooleennes) ;    }  //--- Vérifier le BDD ?      if (affichage > 2) {       long nErreurs = 0 ;      for (unsigned long i=0 ; i<nValeurs ; i++) {        C_bdd v = resultat.getNthBDD (i, aTableVariablesBool.mBDDbitsCount) ;        const unsigned long long rang = resultat.getBDDrange (v, aTableVariablesBool.mBDDbitsCount) ;        if (rang != i) {          printf (" *** ERREUR RANG %lu (recalculée %llu) ***\n\7", i, rang) ;          nErreurs ++ ;        }      }      if (nErreurs == 0) {        printf ("Pas d'erreur de vérification.\n") ;      }    }  }  printf ("\n") ;}  //----------------------------------------------------------------------------*void cPtr_typeCalculIteratif::executerCalcul (TC_unique_dyn_array <C_bdd> & tabValeurFormules) {  C_timer duree ;// §  C_bdd::markAndSweepUnusedNodes () ;  const long numeroFormule = (long) aNumeroFormule.getValue () ;//--- Valeur initiale  if (aSigne.getValue ()) {    tabValeurFormules (numeroFormule COMMA_HERE) = C_bdd () ; // vide  }else{    tabValeurFormules (numeroFormule COMMA_HERE) = ~ C_bdd () ; // plein  }//--- Effectuer les éventuels changements de variable  aFormule()->executerLesChangementsDeVariable (tabValeurFormules, numeroFormule) ;//--- Évaluer les contraintes d'intervalle des variables  const C_bdd contrainte = evaluerContraintesIntervalles (aTableVariablesBool) ;//--- Évaluation initiale  C_bdd resultat = contrainte & aFormule ()->evaluerFormule (tabValeurFormules (numeroFormule COMMA_HERE)) ;  long nIterations = 1 ;//--- Itérer  do{    tabValeurFormules (numeroFormule COMMA_HERE) = resultat ;    resultat = contrainte & aFormule()->evaluerFormule (resultat) ;    nIterations ++ ;  }while (! resultat.isEqualToBDD (tabValeurFormules (numeroFormule COMMA_HERE))) ;  duree.stopTimer () ;  if (aTableVariablesBool.mBDDbitsCount == 0) {    printf ("Prédicat '%s', durée : ", aNomFormule.getStringPtr ()) ;    duree.printTimer (stdout) ;    printf (" (%s)\n", resultat.isFalse () ? "faux" : "vrai") ;  }else{    printf ("Formule '%s', durée : ", aNomFormule.getStringPtr ()) ;    duree.printTimer (stdout) ;    printf (" (%ld itérations", nIterations) ;    const unsigned long long nValeurs = resultat.getBDDvaluesCount (aTableVariablesBool.mBDDbitsCount) ;    const unsigned long nElements = resultat.getBDDnodesCount () ;    printf (", %llu valeur%s, %lu élément%s)\n", nValeurs,            (nValeurs < 2) ? "" : "s", nElements, (nElements < 2) ? "" : "s") ;  //--- Imprimer la composition du résultat    C_display_bdd tableauDesNomsVariablesBooleennes (0) ;    const unsigned long affichage = aAfficher.getValue () ;    if (affichage > 0) { //--- Construire le tableau des noms      construireTableauDesNoms (aTableVariablesBool, tableauDesNomsVariablesBooleennes) ;    }  //--- Imprimer la composition du résultat ?    if (affichage > 0) {       resultat.printBDD (stdout, aTableVariablesBool.mBDDbitsCount, tableauDesNomsVariablesBooleennes) ;    }  //--- Écrire la composition du BDD ?    if (affichage > 1) {       resultat.printBDDnodes (stdout, tableauDesNomsVariablesBooleennes) ;    }  //--- Vérifier le BDD ?      if (affichage > 2) {       long nErreurs = 0 ;      for (unsigned long i=0 ; i<nValeurs ; i++) {        C_bdd v = resultat.getNthBDD (i, aTableVariablesBool.mBDDbitsCount) ;        const unsigned long long rang = resultat.getBDDrange (v, aTableVariablesBool.mBDDbitsCount) ;        if (rang != i) {          printf (" *** ERREUR RANG %lu (recalculée %llu) ***\n\7", i, rang) ;          nErreurs ++ ;        }      }      if (nErreurs == 0) {        printf ("Pas d'erreur de vérification.\n") ;      }    }  }  printf ("\n") ;}//---------------------------------------------------------------------*C_bdd cPtr_typeFormuleVar::evaluerFormule (const C_bdd & /* valeurFormuleCourante */) {  return C_bdd ((unsigned short) aNumeroVariable.getValue (), true) ;}//---------------------------------------------------------------------*void cPtr_typeFormuleVar::executerLesChangementsDeVariable (TC_unique_dyn_array <C_bdd> & /* tabValeurFormules */,                                                       const long /* numeroFormuleCourante */) {}//---------------------------------------------------------------------*C_bdd cPtr_typeFormuleTrue::evaluerFormule (const C_bdd & /* valeurFormuleCourante */) {  return ~C_bdd () ;}//---------------------------------------------------------------------*void cPtr_typeFormuleTrue::executerLesChangementsDeVariable (TC_unique_dyn_array <C_bdd> & /* tabValeurFormules */,                                                       const long /* numeroFormuleCourante */) {}//---------------------------------------------------------------------*C_bdd cPtr_typeFormuleFalse::evaluerFormule (const C_bdd & /* valeurFormuleCourante */) {  return C_bdd () ;}//---------------------------------------------------------------------*void cPtr_typeFormuleFalse::executerLesChangementsDeVariable (TC_unique_dyn_array <C_bdd> & /* tabValeurFormules */,                                                       const long /* numeroFormuleCourante */) {}//---------------------------------------------------------------------*static voidconstruireTableauChangementVariables (GGS_typeActualArgumentsList & listeArgumentsBooleens,                                       unsigned short * & tabChgtBool,                                       unsigned short & nombreVariablesBool) {//--- Calculer la taille du tableau des changements de variables  nombreVariablesBool = 0 ;  GGS_typeActualArgumentsList::element_type * p = listeArgumentsBooleens.getFirstItem () ;  while (p != NULL) {    nombreVariablesBool += (unsigned short) p->mVariableBitSize.getValue () ;    p = p->getNextItem () ;  }//--- Construire le tableau des changements de variables booléennes  tabChgtBool = new unsigned short [nombreVariablesBool] ;  p = listeArgumentsBooleens.getFirstItem () ;  size_t i = 0 ;  while (p != NULL) {    macroValidPointer (p) ;    for (unsigned short j=0 ; j < p->mVariableBitSize.getValue () ; j++) {      tabChgtBool [i] = (unsigned short) (p->mVariableIndex.getValue () + j) ;      i ++ ;    }    p = p->getNextItem () ;  }}//---------------------------------------------------------------------*//---------------------------------------------------------------------*C_bdd cPtr_typeFormuleFor::evaluerFormule (const C_bdd & valeurFormuleCourante) {  C_bdd resultat = aFormuleTraduite.mBDD ;  if (aEstFormuleCourante.getValue ()) {  //--- Construire le tableau des changements de variables    unsigned short * tabChgtBool = NULL ;    unsigned short nombreVariablesBool = 0 ;    construireTableauChangementVariables (aListeArgsBool, tabChgtBool, nombreVariablesBool) ;  //--- Traduire le BDD    resultat = valeurFormuleCourante.substitution (tabChgtBool, nombreVariablesBool) ;    delete [] tabChgtBool ; tabChgtBool = NULL ;  }  return resultat ;}//---------------------------------------------------------------------*void cPtr_typeFormuleFor::executerLesChangementsDeVariable (TC_unique_dyn_array <C_bdd> & tabValeurFormules,                                  const long numeroFormuleCourante) {  aEstFormuleCourante.setValue (aNumeroFormule.getValue () == (unsigned long) numeroFormuleCourante) ;  if (! aEstFormuleCourante.getValue ()) {  //--- Construire le tableau des changements de variables    unsigned short * tabChgtBool = NULL ;    unsigned short nombreVariablesBool = 0 ;    construireTableauChangementVariables (aListeArgsBool, tabChgtBool, nombreVariablesBool) ;  //--- Traduire le BDD    aFormuleTraduite.mBDD = tabValeurFormules ((unsigned short) aNumeroFormule.getValue () COMMA_HERE).substitution (tabChgtBool, nombreVariablesBool) ;    delete [] tabChgtBool ; tabChgtBool = NULL ;  }}//---------------------------------------------------------------------*//---------------------------------------------------------------------*C_bdd cPtr_typeFormuleNon::evaluerFormule (const C_bdd & valeurFormuleCourante) {  return ~ (aOperande ()->evaluerFormule (valeurFormuleCourante)) ;}//---------------------------------------------------------------------*void cPtr_typeFormuleNon::executerLesChangementsDeVariable (TC_unique_dyn_array <C_bdd> & tabValeurFormules,                                                       const long numeroFormuleCourante) {  aOperande ()->executerLesChangementsDeVariable (tabValeurFormules, numeroFormuleCourante) ;}//---------------------------------------------------------------------*C_bdd cPtr_typeFormuleEt::evaluerFormule (const C_bdd & valeurFormuleCourante) {  return aOperande1 ()->evaluerFormule (valeurFormuleCourante)              &         aOperande2 ()->evaluerFormule (valeurFormuleCourante) ;}//---------------------------------------------------------------------*void cPtr_typeFormuleEt::executerLesChangementsDeVariable (TC_unique_dyn_array <C_bdd> & tabValeurFormules,                                                      const long numeroFormuleCourante) {  aOperande1 ()->executerLesChangementsDeVariable (tabValeurFormules, numeroFormuleCourante) ;  aOperande2 ()->executerLesChangementsDeVariable (tabValeurFormules, numeroFormuleCourante) ;}//---------------------------------------------------------------------*C_bdd cPtr_typeFormuleIte::evaluerFormule (const C_bdd & valeurFormuleCourante) {  return C_bdd::ite (aOperande1 ()->evaluerFormule (valeurFormuleCourante),                    aOperande2 ()->evaluerFormule (valeurFormuleCourante),                    aOperande3 ()->evaluerFormule (valeurFormuleCourante)) ;}//---------------------------------------------------------------------*void cPtr_typeFormuleIte::executerLesChangementsDeVariable (TC_unique_dyn_array <C_bdd> & tabValeurFormules,                                                      const long numeroFormuleCourante) {  aOperande1 ()->executerLesChangementsDeVariable (tabValeurFormules, numeroFormuleCourante) ;  aOperande2 ()->executerLesChangementsDeVariable (tabValeurFormules, numeroFormuleCourante) ;  aOperande3 ()->executerLesChangementsDeVariable (tabValeurFormules, numeroFormuleCourante) ;}//---------------------------------------------------------------------*//---------------------------------------------------------------------*C_bdd cPtr_typeFormuleOu::evaluerFormule (const C_bdd & valeurFormuleCourante) {  return aOperande1 ()->evaluerFormule (valeurFormuleCourante)              |         aOperande2 ()->evaluerFormule (valeurFormuleCourante) ;}//---------------------------------------------------------------------*void cPtr_typeFormuleOu::executerLesChangementsDeVariable (TC_unique_dyn_array <C_bdd> & tabValeurFormules,                                                      const long numeroFormuleCourante) {  aOperande1 ()->executerLesChangementsDeVariable (tabValeurFormules, numeroFormuleCourante) ;  aOperande2 ()->executerLesChangementsDeVariable (tabValeurFormules, numeroFormuleCourante) ;}//---------------------------------------------------------------------*//---------------------------------------------------------------------*C_bdd cPtr_typeFormuleImplique::evaluerFormule (const C_bdd & valeurFormuleCourante) {  return aOperande1 ()->evaluerFormule (valeurFormuleCourante).implies (aOperande2 ()->evaluerFormule (valeurFormuleCourante)) ;}//---------------------------------------------------------------------*void cPtr_typeFormuleImplique::executerLesChangementsDeVariable (TC_unique_dyn_array <C_bdd> & tabValeurFormules,                                                      const long numeroFormuleCourante) {  aOperande1 ()->executerLesChangementsDeVariable (tabValeurFormules, numeroFormuleCourante) ;  aOperande2 ()->executerLesChangementsDeVariable (tabValeurFormules, numeroFormuleCourante) ;}//---------------------------------------------------------------------*//---------------------------------------------------------------------*C_bdd cPtr_typeComparaisonFormules::evaluerFormule (const C_bdd & valeurFormuleCourante) {  C_bdd::compareEnum comp = C_bdd::kEqual ;  switch (aComparaison.getValue ()) {  case 1 :    comp = C_bdd::kNonEqual ;    break ;  case 2 :    comp = C_bdd::kLowerOrEqual ;    break ;  case 3 :    comp = C_bdd::kStrictLower ;    break ;  case 4 :    comp = C_bdd::kGreaterOrEqual ;    break ;  case 5 :    comp = C_bdd::kStrictGreater ;    break ;  default :    break ;  }  return aOperande1 ()->evaluerFormule (valeurFormuleCourante)             .compareWithBDD (comp, aOperande2 ()->evaluerFormule (valeurFormuleCourante)) ;}//---------------------------------------------------------------------*void cPtr_typeComparaisonFormules::executerLesChangementsDeVariable (TC_unique_dyn_array <C_bdd> & tabValeurFormules,                                                        const long numeroFormuleCourante) {  aOperande1 ()->executerLesChangementsDeVariable (tabValeurFormules, numeroFormuleCourante) ;  aOperande2 ()->executerLesChangementsDeVariable (tabValeurFormules, numeroFormuleCourante) ;}//---------------------------------------------------------------------*//---------------------------------------------------------------------*C_bdd cPtr_typeFormuleQuelqueSoit::evaluerFormule (const C_bdd & valeurFormuleCourante) {  C_bdd resultat = aOperande ()->evaluerFormule (valeurFormuleCourante) ;  if (aListeArgsBooleens.getFirstItem () != NULL) {    resultat = resultat.forallOnBitsAfterNumber ((unsigned short) aListeArgsBooleens.getFirstItem ()->mVariableIndex.getValue ()) ;  }  return resultat ;}//---------------------------------------------------------------------*void cPtr_typeFormuleQuelqueSoit::executerLesChangementsDeVariable (TC_unique_dyn_array <C_bdd> & tabValeurFormules,                                                                    const long numeroFormuleCourante) {  aOperande ()->executerLesChangementsDeVariable (tabValeurFormules, numeroFormuleCourante) ;//--- Évaluer les contraintes  aContraintes.mBDD.setToFalse () ;}//---------------------------------------------------------------------*//---------------------------------------------------------------------*C_bdd cPtr_typeFormuleExist::evaluerFormule (const C_bdd & valeurFormuleCourante) {  C_bdd resultat = aOperande ()->evaluerFormule (valeurFormuleCourante) ;  if (aListeArgsBooleens.getFirstItem () != NULL) {    resultat = resultat.existsOnBitsAfterNumber ((unsigned short) aListeArgsBooleens.getFirstItem ()->mVariableIndex.getValue ()) ;  }  return resultat ;}//---------------------------------------------------------------------*void cPtr_typeFormuleExist::executerLesChangementsDeVariable (TC_unique_dyn_array <C_bdd> & tabValeurFormules,                                                         const long numeroFormuleCourante) {  aOperande ()->executerLesChangementsDeVariable (tabValeurFormules, numeroFormuleCourante) ;//--- Évaluer les contraintes  aContraintes.mBDD.setToTrue () ;}//---------------------------------------------------------------------*//---------------------------------------------------------------------*C_bdd cPtr_typeFormuleComparaisonValeur::evaluerFormule (const C_bdd & /* valeurFormuleCourante */) {  const unsigned short premierIndice = (unsigned short) aIndiceBDD.getValue () ;  const unsigned short dimension = (unsigned short)  aDimension.getValue () ;  const unsigned long valeur = aValeur.getValue () ;  C_bdd::compareEnum comp = C_bdd::kEqual ;  switch (aComparaison.getValue ()) {  case 1 :    comp = C_bdd::kNonEqual ;    break ;  case 2 :    comp = C_bdd::kLowerOrEqual ;    break ;  case 3 :    comp = C_bdd::kStrictLower ;    break ;  case 4 :    comp = C_bdd::kGreaterOrEqual ;    break ;  case 5 :    comp = C_bdd::kStrictGreater ;    break ;  default :    break ;  }  return C_bdd::varCompareConst (premierIndice, dimension, comp, valeur) ;}//---------------------------------------------------------------------*void cPtr_typeFormuleComparaisonValeur::executerLesChangementsDeVariable (TC_unique_dyn_array <C_bdd> & /* tabValeurFormules */,                                                         const long /* numeroFormuleCourante */) {}//---------------------------------------------------------------------*C_bdd cPtr_typeFormuleComparaisonVariable::evaluerFormule (const C_bdd & /* valeurFormuleCourante */) {  const unsigned short premierIndiceGauche = (unsigned short) aIndiceBDDgauche.getValue () ;  const unsigned short dimension = (unsigned short) aDimension.getValue () ;  const unsigned short premierIndiceDroite = (unsigned short) aIndiceBDDdroite.getValue () ;  C_bdd::compareEnum comp = C_bdd::kEqual ;  switch (aComparaison.getValue ()) {  case 1 :    comp = C_bdd::kNonEqual ;    break ;  case 2 :    comp = C_bdd::kLowerOrEqual ;    break ;  case 3 :    comp = C_bdd::kStrictLower ;    break ;  case 4 :    comp = C_bdd::kGreaterOrEqual ;    break ;  case 5 :    comp = C_bdd::kStrictGreater ;    break ;  default :    break ;  }  return C_bdd::varCompareVar (premierIndiceGauche, dimension, comp, premierIndiceDroite) ;}//---------------------------------------------------------------------*void cPtr_typeFormuleComparaisonVariable::executerLesChangementsDeVariable (TC_unique_dyn_array <C_bdd> & /* tabValeurFormules */,                                                         const long /* numeroFormuleCourante */) {}//----------------------------------------------------------------------------*//                                                                            *//            Methods of 'cPtr_typeDirectVariable'                            *//                                                                            *//----------------------------------------------------------------------------*void cPtr_typeDirectVariable::allocateBDDvariables (unsigned short & ioBDDindex) {  mIndex.setUlongValue (ioBDDindex) ;  ioBDDindex += (unsigned short) mBitSize.getValue () ;}//----------------------------------------------------------------------------*long cPtr_typeDirectVariable::getBDDvariablesCount (void) const {  return 1 ;}//----------------------------------------------------------------------------*void cPtr_typeDirectVariable::defineBDDvariableNames (C_display_bdd & ioBDDvariableNameArray,                                                      const C_string & inVariableName,                                                      unsigned long & ioIndex) {  const unsigned long dimension = mBitSize.getValue () ;  ioBDDvariableNameArray.definir (ioIndex, inVariableName.getStringPtr (), (unsigned short) dimension) ;  ioIndex ++ ;}//----------------------------------------------------------------------------*void cPtr_typeDirectVariable::computeBoundsConstraint (C_bdd & ioConstraint) const {  const unsigned long borneInf = mLowBound.getValue () ;  const unsigned long borneSup = mHighBound.getValue () ;  const unsigned short varIndex = (unsigned short) mIndex.getValue () ;  const unsigned short bitSize = (unsigned short) mBitSize.getValue () ;  if (borneInf > 0) {    ioConstraint &= C_bdd::varCompareConst (varIndex, bitSize, C_bdd::kGreaterOrEqual, borneInf) ;  }  if (borneSup < ((1UL << bitSize) -1UL)) {    ioConstraint &= C_bdd::varCompareConst (varIndex, bitSize, C_bdd::kLowerOrEqual, borneSup) ;  }}//----------------------------------------------------------------------------*//                                                                            *//            Methods of 'cPtr_typeRecordVariable'                            *//                                                                            *//----------------------------------------------------------------------------*void cPtr_typeRecordVariable::allocateBDDvariables (unsigned short & ioBDDindex) {  GGS_typeTableVariablesBool::element_type * p = mMap.getFirstItem () ;  while (p != NULL) {    macroValidPointer (p) ;    p->mInfo.mVariableDescriptor ()->allocateBDDvariables (ioBDDindex) ;    p = p->getNextItem () ;  }}//----------------------------------------------------------------------------*long cPtr_typeRecordVariable::getBDDvariablesCount (void) const {  long variableCount = 0 ;  GGS_typeTableVariablesBool::element_type * p = mMap.getFirstItem () ;  while (p != NULL) {    macroValidPointer (p) ;    variableCount += p->mInfo.mVariableDescriptor ()->getBDDvariablesCount () ;    p = p->getNextItem () ;  }  return variableCount ;}//----------------------------------------------------------------------------*void cPtr_typeRecordVariable::defineBDDvariableNames (C_display_bdd & ioBDDvariableNameArray,                                                      const C_string & inVariableName,                                                      unsigned long & ioIndex) {  GGS_typeTableVariablesBool::element_type * p = mMap.getFirstItem () ;  while (p != NULL) {    macroValidPointer (p) ;    C_string variableName ;    variableName << inVariableName << '.' << p->mKey ;    p->mInfo.mVariableDescriptor ()->defineBDDvariableNames (ioBDDvariableNameArray, variableName, ioIndex) ;    p = p->getNextItem () ;  }}//----------------------------------------------------------------------------*void cPtr_typeRecordVariable::computeBoundsConstraint (C_bdd & ioConstraint) const {  GGS_typeTableVariablesBool::element_type * p = mMap.getFirstItem () ;  while (p != NULL) {    macroValidPointer (p) ;    p->mInfo.mVariableDescriptor ()->computeBoundsConstraint (ioConstraint) ;    p = p->getNextItem () ;  }}//----------------------------------------------------------------------------*